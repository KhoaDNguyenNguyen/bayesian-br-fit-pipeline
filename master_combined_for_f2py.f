
C------------------- SUBROUTINE D01FCF -------------------

      SUBROUTINE D01FCF(NDIM, A, B, MINPTS, MAXPTS, FUNCTN, EPS, ACC,
     * LENWRK, WRKSTR, FINVAL, IFAIL)
C     MARK 8 RELEASE. NAG COPYRIGHT 1979.
C
C     ADAPTIVE MULTIDIMENSIONAL INTEGRATION SUBROUTINE
C
C     *********  PARAMETERS FOR D01FCF  ****************************
C
C      INPUT PARAMETERS
C
C     NDIM    INTEGER NUMBER OF VARIABLES, MUST EXCEED 1 BUT
C             NOT EXCEED 15.
C
C     A       REAL ARRAY OF LOWER LIMITS, WITH DIMENSION NDIM
C
C     B       REAL ARRAY OF UPPER LIMITS, WITH DIMENSION NDIM
C
C     MINPTS  INTEGER MINIMUM NUMBER OF INTEGRAND VALUES TO BE
C             ALLOWED, WHICH MUST NOT EXCEED MAXPTS.
C
C     MAXPTS  INTEGER MAXIMUM NUMBER OF INTEGRAND VALUES TO BE
C             ALLOWED, WHICH MUST BE AT LEAST
C             2**NDIM+2*NDIM**2+2*NDIM+1.
C
C     FUNCTN  EXTERNALLY DECLARED USER DEFINED REAL FUNCTION
C             INTEGRAND. IT MUST HAVE PARAMETERS (NDIM,Z),
C             WHERE Z IS A REAL ARRAY OF DIMENSION NDIM.
C
C     EPS     REAL REQUIRED RELATIVE ACCURACY, MUST BE GREATER
C             THAN ZERO
C
C     LENWRK  INTEGER LENGTH OF ARRAY WRKSTR, MUST BE AT LEAST
C             2*NDIM+4.
C
C     IFAIL   INTEGER NAG FAILURE PARAMETER
C             IFAIL=0 FOR HARD FAIL
C             IFAIL=1 FOR SOFT FAIL
C
C      OUTPUT PARAMETERS
C
C     MINPTS  INTEGER NUMBER OF INTEGRAND VALUES USED BY THE
C             ROUTINE
C
C     WRKSTR  REAL ARRAY OF WORKING STORAGE OF DIMENSION (LENWRK).
C
C     ACC     REAL ESTIMATED RELATIVE ACCURACY OF FINVAL
C
C     FINVAL  REAL ESTIMATED VALUE OF INTEGRAL
C
C     IFAIL   IFAIL=0 FOR NORMAL EXIT, WHEN ESTIMATED RELATIVE
C                  LESS INTEGACCURACY RAND VALUES USED.
C
C          IFAIL=1 IF NDIM.LT.2, NDIM.GT.15, MINPTS.GT.MAXPTS,
C                  MAXPTS.LT.2**NDIM+2*NDIM*(NDIM+1)+1, EPS.LE.0
C                  OR LENWRK.LT.2*NDIM+4.
C
C          IFAIL=2 IF MAXPTS WAS TOO SMALL FOR D01FCF TO OBTAIN THE
C                  REQUIRED RELATIVE ACCURACY EPS.  IN THIS
C                  CASE D01FCF RETURNS A VALUE OF FINVAL
C                  WITH ESTIMATED RELATIVE ACCURACY ACC.
C
C          IFAIL=3 IF LENWRK TOO SMALL FOR MAXPTS INTEGRAND
C                  VALUES.  IN THIS CASE D01FCF RETURNS A
C                  VALUE OF FINVAL WITH ESTIMATED ACCURACY
C                  ACC USING THE WORKING STORAGE
C                  AVAILABLE, BUT ACC WILL BE GREATER
C                  THAN EPS.
C
C     **************************************************************
C
C     .. SCALAR ARGUMENTS ..
      DOUBLE PRECISION EPS, FINVAL, ACC
      INTEGER IFAIL, LENWRK, MAXPTS, MINPTS, NDIM
C     .. ARRAY ARGUMENTS ..
      DOUBLE PRECISION A(NDIM), B(NDIM), WRKSTR(LENWRK)
C     .. FUNCTION ARGUMENTS ..
      DOUBLE PRECISION FUNCTN
C     ..
C     .. LOCAL SCALARS ..
C$P 1
      DOUBLE PRECISION SRNAME
      DOUBLE PRECISION ABSERR, DF1, DF2, DIFMAX, F1, F2, F3, F4, HALF,
     * LAMDA2,LAMDA4, LAMDA5, ONE, RATIO, RGNCMP, RGNERR, RGNERT,
     * RGNVAL,RGNVLT, RGNVOL, RLNDIM, SUM1, SUM2, SUM3, SUM4, SUM5, TWO,
     *TWONDM, WEIT1, WEIT2, WEIT3, WEIT4, WEIT5, WEITP1, WEITP2,WEITP3,
     * WEITP4, ZERO
      INTEGER DVAXES, DVAXIS, DVFLAG, FUNCLS, IERROR, J, K, MAXAXS,
     *MXRGNS, POINTR, RGNCLS, RULCLS, SBRGNS, SUBRGN, SUBTMP,TPONTP,
     * TPONTR
C     .. LOCAL ARRAYS ..
      DOUBLE PRECISION CENTER(15), DIF(15), OLDCNT(15), WIDTH(15), Z(15)
      INTEGER DVCNTL(15), DVCNTR(15)
C     .. FUNCTION REFERENCES ..
      DOUBLE PRECISION DSQRT, X02AAF
C     *** IMPLEMENTATION DEPENDENT DECLARATION ***
C     DOUBLE PRECISION DFLOAT
      INTEGER P01AAF, X02BBF
C     ..
      DATA SRNAME /8H D01FCF /

      DATA ZERO, ONE, TWO, HALF /0.0D0, 1.0D0, 2.0D0, 0.5D0/
C
C       SUBROUTINE INITIALISATION AND PARAMETER CHECKING
C
      IF (NDIM.LT.2 .OR. NDIM.GT.15) GO TO 560
      IF (MINPTS.GT.MAXPTS) GO TO 560
      IF (EPS.LE.ZERO) GO TO 560
      IF (LENWRK.LT.2*NDIM+4) GO TO 560
      FUNCLS = 0
      FINVAL = ZERO
      ABSERR = ZERO
      TWONDM = TWO**NDIM
      RGNVOL = TWONDM
      DVFLAG = 1
      MAXAXS = IDINT(DMIN1(DFLOAT(X02BBF(ONE)),1.0D0/X02AAF(0.0D0))
     *)
      MAXAXS = (MAXAXS-NDIM)/(NDIM+1)
      MXRGNS = LENWRK/(2*NDIM+4)
      SBRGNS = 0
      RGNVLT = ZERO
      RGNERT = ZERO
      DO 20 J=1,NDIM
         CENTER(J) = (A(J)+B(J))*HALF
         DIF(J) = ZERO
         WIDTH(J) = (B(J)-A(J))*HALF
         DVCNTL(J) = 1
         DVCNTR(J) = 1
         OLDCNT(J) = CENTER(J)
         RGNVOL = RGNVOL*WIDTH(J)
   20 CONTINUE
C
C       END SUBROUTINE INITIALISATION
C       BASIC RULE INITIALISATION
C
      RULCLS = 2**NDIM + 2*NDIM*NDIM + 2*NDIM + 1
      FUNCLS = RULCLS
      IF (MAXPTS.LT.RULCLS) GO TO 560
      RLNDIM = NDIM
      LAMDA2 = DSQRT(9.0D0/70.0D0)
      LAMDA4 = DSQRT(9.0D0/10.0D0)
      LAMDA5 = DSQRT(9.0D0/19.0D0)
      WEIT1 = (12824.0D0-9120.0D0*RLNDIM+400.0D0*RLNDIM*RLNDIM)/
     *19683.0D0
      WEIT2 = 980.0D0/6561.0D0
      WEIT3 = (1820.0D0-400.0D0*RLNDIM)/19683.0D0
      WEIT4 = 200.0D0/19683.0D0
      WEIT5 = 6859.0D0/19683.0D0/TWONDM
      WEITP1 = (729.0D0-950.0D0*RLNDIM+50.0D0*RLNDIM**2)/729.0D0
      WEITP2 = 245.0D0/486.0D0
      WEITP3 = (265.0D0-100.0D0*RLNDIM)/1458.0D0
      WEITP4 = 25.0D0/729.0D0
      RATIO = (LAMDA2/LAMDA4)**2
C
C       END BASIC RULE INITIALISATION
      GO TO 100
C       DIVIDE SUBREGION WITH LARGEST ERROR AND PREPARE TO USE
C       BASIC RULE ON EACH PORTION
C
   40 SUBRGN = 1
      POINTR = WRKSTR(1)
      RGNCLS = RULCLS
      RGNVOL = TWONDM
      TPONTR = POINTR + 2
      DO 60 J=1,NDIM
         TPONTR = TPONTR + 2
         CENTER(J) = WRKSTR(TPONTR-1)
         WIDTH(J) = WRKSTR(TPONTR)
         DVCNTR(J) = 1
         DVCNTL(J) = 1
         OLDCNT(J) = CENTER(J)
         RGNVOL = RGNVOL*WIDTH(J)
   60 CONTINUE
      DVAXES = WRKSTR(POINTR+2)
      IF (DVAXES.LT.0) GO TO 600
   80 DVAXIS = DVAXES
      DVAXES = DVAXIS/(NDIM+1)
      DVAXIS = DVAXIS - (NDIM+1)*DVAXES
      DVCNTL(DVAXIS) = 2*DVCNTL(DVAXIS)
      RGNCLS = RGNCLS*2
      IF (DVAXES.GT.0) GO TO 80
      IF (FUNCLS+RGNCLS.GT.MAXPTS) GO TO 580
      IF (RGNCLS/RULCLS+SBRGNS-1.GT.MXRGNS) DVFLAG = 2
      FUNCLS = FUNCLS + RGNCLS
      ABSERR = ABSERR - WRKSTR(POINTR)
      FINVAL = FINVAL - WRKSTR(POINTR+1)
C
C       BEGIN BASIC RULE
  100 DO 120 J=1,NDIM
         Z(J) = CENTER(J)
  120 CONTINUE
      SUM1 = FUNCTN(NDIM,Z)
      SUM2 = ZERO
      SUM3 = ZERO
      DO 140 J=1,NDIM
         Z(J) = CENTER(J) - LAMDA2*WIDTH(J)
         F1 = FUNCTN(NDIM,Z)
         Z(J) = CENTER(J) + LAMDA2*WIDTH(J)
         F2 = FUNCTN(NDIM,Z)
         Z(J) = CENTER(J) - LAMDA4*WIDTH(J)
         F3 = FUNCTN(NDIM,Z)
         Z(J) = CENTER(J) + LAMDA4*WIDTH(J)
         F4 = FUNCTN(NDIM,Z)
         SUM2 = SUM2 + F1 + F2
         SUM3 = SUM3 + F3 + F4
         DF1 = F1 + F2 - TWO*SUM1
         DF2 = F3 + F4 - TWO*SUM1
         DIF(J) = DIF(J) + DABS(DF1-RATIO*DF2)
         Z(J) = CENTER(J)
  140 CONTINUE
      SUM4 = ZERO
      DO 200 J=2,NDIM
         Z(J-1) = CENTER(J-1) - LAMDA4*WIDTH(J-1)
         DO 160 K=J,NDIM
            Z(K) = CENTER(K) - LAMDA4*WIDTH(K)
            SUM4 = SUM4 + FUNCTN(NDIM,Z)
            Z(K) = CENTER(K) + LAMDA4*WIDTH(K)
            SUM4 = SUM4 + FUNCTN(NDIM,Z)
            Z(K) = CENTER(K)
  160    CONTINUE
         Z(J-1) = CENTER(J-1) + LAMDA4*WIDTH(J-1)
         DO 180 K=J,NDIM
            Z(K) = CENTER(K) - LAMDA4*WIDTH(K)
            SUM4 = SUM4 + FUNCTN(NDIM,Z)
            Z(K) = CENTER(K) + LAMDA4*WIDTH(K)
            SUM4 = SUM4 + FUNCTN(NDIM,Z)
            Z(K) = CENTER(K)
  180    CONTINUE
         Z(J-1) = CENTER(J-1)
  200 CONTINUE
      SUM5 = ZERO
      DO 220 J=1,NDIM
         Z(J) = CENTER(J) - LAMDA5*WIDTH(J)
  220 CONTINUE
  240 DO 260 J=2,NDIM
         IF (Z(J-1).LT.CENTER(J-1)+WIDTH(J-1)) GO TO 280
         Z(J-1) = CENTER(J-1) - LAMDA5*WIDTH(J-1)
         Z(J) = Z(J) + TWO*LAMDA5*WIDTH(J)
  260 CONTINUE
      IF (Z(NDIM).GT.CENTER(NDIM)+WIDTH(NDIM)) GO TO 300
  280 SUM5 = SUM5 + FUNCTN(NDIM,Z)
      Z(1) = Z(1) + TWO*LAMDA5*WIDTH(1)
      GO TO 240
  300 RGNVAL = RGNVOL*(WEIT1*SUM1+WEIT2*SUM2+WEIT3*SUM3+WEIT4*SUM4+
     *WEIT5*SUM5)
      RGNCMP = RGNVOL*(WEITP1*SUM1+WEITP2*SUM2+WEITP3*SUM3+WEITP4*SUM4)
      RGNERR = DABS(RGNVAL-RGNCMP)
C
C       END BASIC RULE
C       STORE RESULTS OF BASIC RULE APPLICATION
C
      RGNVLT = RGNVLT + RGNVAL
      RGNERT = RGNERT + RGNERR
      FINVAL = FINVAL + RGNVAL
      ABSERR = ABSERR + RGNERR
      IF (DVFLAG.EQ.0) GO TO 340
      IF (DVFLAG.EQ.2) GO TO 500
      POINTR = MXRGNS + SBRGNS*(2*NDIM+3) + 1
      SBRGNS = SBRGNS + 1
      WRKSTR(SBRGNS) = POINTR
      SUBRGN = SBRGNS
      TPONTR = POINTR + 2
      DO 320 J=1,NDIM
         TPONTR = TPONTR + 2
         WRKSTR(TPONTR-1) = CENTER(J)
         WRKSTR(TPONTR) = WIDTH(J)
  320 CONTINUE
  340 WRKSTR(POINTR) = RGNERT
      WRKSTR(POINTR+1) = RGNVLT
C       DETERMINE AXIS ALONG WHICH FOURTH DIFFERENCE IS LARGEST
      DIFMAX = ZERO
      DO 380 J=1,NDIM
         IF (DIFMAX.GT.DIF(J)) GO TO 360
         DIFMAX = DIF(J)
         DVAXIS = J
  360    DIF(J) = ZERO
  380 CONTINUE
      TPONTR = POINTR + 2*(DVAXIS+1)
      WRKSTR(TPONTR) = WIDTH(DVAXIS)*HALF
      WRKSTR(TPONTR-1) = CENTER(DVAXIS) - WRKSTR(TPONTR)
      IF (DVFLAG.NE.2) GO TO 400
      DVAXES = WRKSTR(POINTR+2)
      IF (DVAXES.GT.MAXAXS) DVAXES = -1
      DVAXIS = DVAXIS + (NDIM+1)*DVAXES
  400 WRKSTR(POINTR+2) = DVAXIS
      IF (DVFLAG.EQ.1) GO TO 460
C       DETERMINE THE POSITION IN THE PARIALLY ORDERED LIST OF
C       THE SUBREGION WHICH REPLACES MOST RECENTLY DIVIDED SUBREGION
  420 SUBTMP = 2*SUBRGN
      IF (SUBTMP.GT.SBRGNS) GO TO 480
      TPONTR = WRKSTR(SUBTMP)
      IF (SUBTMP.EQ.SBRGNS) GO TO 440
      TPONTP = WRKSTR(SUBTMP+1)
      IF (WRKSTR(TPONTR).GE.WRKSTR(TPONTP)) GO TO 440
      SUBTMP = SUBTMP + 1
      TPONTR = TPONTP
  440 IF (RGNERT.GE.WRKSTR(TPONTR)) GO TO 480
      WRKSTR(SUBTMP) = POINTR
      WRKSTR(SUBRGN) = TPONTR
      SUBRGN = SUBTMP
      GO TO 420
C       WHEN WORKING STORAGE IS NOT USED UP, DETERMINE THE
C       POSITION IN THE PARTIALLY ORDERED LIST FOR THE DESCRIPTION
C       OF OTHER PORTION(S) OF MOST RECENTLY DIVIDED SUBREGION
  460 SUBTMP = SUBRGN/2
      IF (SUBTMP.LT.1) GO TO 480
      TPONTR = WRKSTR(SUBTMP)
      IF (RGNERT.LE.WRKSTR(TPONTR)) GO TO 480
      WRKSTR(SUBTMP) = POINTR
      WRKSTR(SUBRGN) = TPONTR
      SUBRGN = SUBTMP
      GO TO 460
  480 RGNVLT = ZERO
      RGNERT = ZERO
      IF (DVFLAG.EQ.2) GO TO 540
      DVFLAG = 1 - DVFLAG
C       COUNT TO DETERMINE THE NEXT PART OF THE RECENTLY DIVIDED
C       SUBREGION FOR APPLICATION OF THE BASIC RULE
  500 CENTER(1) = CENTER(1) + TWO*WIDTH(1)
      DVCNTR(1) = DVCNTR(1) + 1
      DO 520 J=2,NDIM
         IF (DVCNTR(J-1).LE.DVCNTL(J-1)) GO TO 100
         DVCNTR(J-1) = 1
         CENTER(J-1) = OLDCNT(J-1)
         DVCNTR(J) = DVCNTR(J) + 1
         CENTER(J) = CENTER(J) + TWO*WIDTH(J)
  520 CONTINUE
      IF (DVCNTR(NDIM).LE.DVCNTL(NDIM)) GO TO 100
      CENTER(NDIM) = OLDCNT(NDIM)
      IF (DVFLAG.EQ.2) GO TO 340
C
C       END ORDERING OF BASIC RULE RESULTS
C       MAKE CHECKS FOR POSSIBLE TERMINATION OF ROUTINE
C
  540 ACC = ABSERR/DABS(FINVAL)
      IF (ACC.GT.EPS .OR. FUNCLS.LT.MINPTS) GO TO 40
C
C       LOOP BACK TO APPLY BASIC RULE
C
C       TERMINATION POINT, SET IFAIL AND RETURN
C
      IERROR = 0
      GO TO 620
  560 IERROR = 1
      GO TO 620
  580 IERROR = 2
      GO TO 620
  600 IERROR = 3
  620 MINPTS = FUNCLS
      IFAIL = P01AAF(IFAIL,IERROR,SRNAME)
      RETURN
      END
C________________________________________________________________________
C
      DOUBLE PRECISION FUNCTION X02AAF(X)
C     NAG COPYRIGHT 1975
C     MARK 4.5 RELEASE
      DOUBLE PRECISION X
C     * EPS *
C
C     IBM DOUBLE PRECISION VERSION
C
C     RETURNS THE VALUE EPS WHERE EPS IS THE SMALLEST
C     POSITIVE
C     NUMBER SUCH THAT 1.0 + EPS > 1.0
C     THE X PARAMETER IS NOT USED
C     FOR ICL 1900
C     X02AAF = 2.0**(-37.0)
C     FOR IBM 360/370
C     X02AAF = 2.0D0**(-52.0D0)
C     FOR IBM PC 486
      X02AAF = 2.2204460492503131d-016
C     DOUBLE PRECISION Z
C     DATA Z/Z3410000000000000/
C     X02AAF = Z
      RETURN
      END
C________________________________________________________________________
C
      INTEGER FUNCTION X02BBF(X)
C     NAG COPYRIGHT 1975
C     MARK 4.5 RELEASE
      DOUBLE PRECISION X
C     * MAXINT *
C
C     IBM DOUBLE PRECISION VERSION
C
C     RETURNS THE LARGEST INTEGER REPRESENTABLE ON THE COMPUTER
C     THE X PARAMETER IS NOT USED
C     FOR ICL 1900
C     X02BBF = 8388607
C     FOR IBM 360/370
      X02BBF = 2147483647
      RETURN
      END
C________________________________________________________________________
C
      INTEGER FUNCTION P01AAF(IFAIL, ERROR, SRNAME)
C     MARK 1 RELEASE.  NAG COPYRIGHT 1971
C     MARK 3 REVISED
C     MARK 4A REVISED, IER-45
C     MARK 4.5 REVISED
C     MARK 7 REVISED (DEC 1978)
C     RETURNS THE VALUE OF ERROR OR TERMINATES THE PROGRAM.
      INTEGER ERROR, IFAIL, NOUT
C$P 1
      DOUBLE PRECISION SRNAME
C     TEST IF NO ERROR DETECTED
      IF (ERROR.EQ.0) GO TO 20
C     DETERMINE OUTPUT UNIT FOR MESSAGE
      CALL X04AAF (0,NOUT)
C     TEST FOR SOFT FAILURE
      IF (MOD(IFAIL,10).EQ.1) GO TO 10
C     HARD FAILURE
      WRITE (NOUT,99999) SRNAME, ERROR
C     STOPPING MECHANISM MAY ALSO DIFFER
      STOP
C     SOFT FAIL
C     TEST IF ERROR MESSAGES SUPPRESSED
   10 IF (MOD(IFAIL/10,10).EQ.0) GO TO 20
      WRITE (NOUT,99999) SRNAME, ERROR
   20 P01AAF = ERROR
      RETURN
99999 FORMAT (1H0, 38HERROR DETECTED BY NAG LIBRARY ROUTINE , A8,
     * 11H - IFAIL = , I5//)
      END
C________________________________________________________________________
C
      SUBROUTINE X04AAF(I,NERR)
C     MARK 7 RELEASE. NAG COPYRIGHT 1978
C     MARK 7C REVISED IER-190 (MAY 1979)
C     IF I = 0, SETS NERR TO CURRENT ERROR MESSAGE UNIT NUMBER
C     (STORED IN NERR1).
C     IF I = 1, CHANGES CURRENT ERROR MESSAGE UNIT NUMBER TO
C     VALUE SPECIFIED BY NERR.
C
C     *** NOTE ***
C     THIS ROUTINE ASSUMES THAT THE VALUE OF NERR1 IS SAVED
C     BETWEEN CALLS.  IN SOME IMPLEMENTATIONS IT MAY BE
C     NECESSARY TO STORE NERR1 IN A LABELLED COMMON
C     BLOCK /AX04AA/ TO ACHIEVE THIS.
C
C     .. SCALAR ARGUMENTS ..
      INTEGER I, NERR
C     ..
C     .. LOCAL SCALARS ..
      INTEGER NERR1
C     ..
      DATA NERR1 /6/
      IF (I.EQ.0) NERR = NERR1
      IF (I.EQ.1) NERR1 = NERR
      RETURN
      END


































******************************************************
C             Normalization
*****************************************************

C--------  PP-Normalization  ------------------

        double precision function FPP_psi2schic0(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFPP_psi2schic0/hhm,sss,qqm1,qqm2
C
        external FFPP_psi2schic0

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFPP_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FPP_psi2schic0=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFPP_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFPP_psi2schic0/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFPP_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *PP

        return
        end

C------------  VV-normalization  ----------------------------------

        double precision function FVV_psi2schic0(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFVV_psi2schic0/hhm,sss,qqm1,qqm2
C
        external FFVV_psi2schic0

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFVV_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FVV_psi2schic0=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFVV_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFVV_psi2schic0/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFVV_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *VV

        return
        end

C------------  SS-normalization  ----------------------------------

        double precision function FSS_psi2schic0(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFSS_psi2schic0/hhm,sss,qqm1,qqm2
C
        external FFSS_psi2schic0

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFSS_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FSS_psi2schic0=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFSS_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFSS_psi2schic0/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFSS_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Scalar

        return
        end

C------------AA-normalization  ----------------------------------

        double precision function FAA_psi2schic0(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFAA_psi2schic0/hhm,sss,qqm1,qqm2
C
        external FFAA_psi2schic0

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFAA_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FAA_psi2schic0=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFAA_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFAA_psi2schic0/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFAA_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Axial

        return
        end

C------------ TT-normalization  ----------------------------------

        double precision function FTT_psi2schic0(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFTT_psi2schic0/hhm,sss,qqm1,qqm2
C
        external FFTT_psi2schic0

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFTT_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FTT_psi2schic0=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFTT_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFTT_psi2schic0/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFTT_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Tensor

        return
        end

C-------------------norm: V1V1  --------------------------

        double precision function FV1V1_psi2schic0(hm,ss,qm,CC1)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps
        common/CFV1V1_psi2schic0/hhm,sss,qqm,CCC1
C
        external FFV1V1_psi2schic0

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm=qm
        CCC1=CC1

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFV1V1_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
        FV1V1_psi2schic0=finval
C

       return
      deallocate(wrkstr)
        end
C-----------------------------------------------------------

        double precision function FFV1V1_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFV1V1_psi2schic0/hm,ss,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
        alp2=x1

C-----------   exponential  -----


      aa =
     &  + t * ( 1.D0 )
      aa = aa + 2.D0*ss

      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )

C------numerator --------------

      V1V1 =
     &  + CC1 * (  - 12.D0*aINV*qm**2*alp2*t*ss - aINV*hm**2*alp2*t*ss
     &     - 18.D0*aINV**2*alp2*t*ss + 12.D0*aINV**2*bb*qm**2*alp2*t*ss
     &     + 3.D0*aINV**2*bb*hm**2*alp2*t*ss + 6.D0*aINV**2*bb**2*hm**2
     &    *qm**2*alp2*t*ss + 1.D0/2.D0*aINV**2*bb**2*hm**4*alp2*t*ss +
     &    16.D0*aINV**3*bb*alp2*t*ss + 14.D0*aINV**3*bb**2*hm**2*alp2*t
     &    *ss - 4.D0*aINV**3*bb**3*hm**2*qm**2*alp2*t*ss - aINV**3*
     &    bb**3*hm**4*alp2*t*ss - 24.D0*aINV**4*bb**3*hm**2*alp2*t*ss
     &     - 2.D0*aINV**4*bb**4*hm**4*alp2*t*ss + 4.D0*aINV**5*bb**5*
     &    hm**4*alp2*t*ss )
      V1V1 = V1V1 + CC1**2 * ( 18.D0*aINV**2*qm**2*alp2*t*ss**2 + 3.D0/
     &    2.D0*aINV**2*hm**2*alp2*t*ss**2 + 36.D0*aINV**3*alp2*t*ss**2
     &     - 24.D0*aINV**3*bb*qm**2*alp2*t*ss**2 - 6.D0*aINV**3*bb*
     &    hm**2*alp2*t*ss**2 - 18.D0*aINV**3*bb**2*hm**2*qm**2*alp2*t*
     &    ss**2 - 3.D0/2.D0*aINV**3*bb**2*hm**4*alp2*t*ss**2 - 40.D0*
     &    aINV**4*bb*alp2*t*ss**2 - 44.D0*aINV**4*bb**2*hm**2*alp2*t*
     &    ss**2 + 16.D0*aINV**4*bb**3*hm**2*qm**2*alp2*t*ss**2 + 4.D0*
     &    aINV**4*bb**3*hm**4*alp2*t*ss**2 + 3.D0*aINV**4*bb**4*hm**4*
     &    qm**2*alp2*t*ss**2 + 1.D0/4.D0*aINV**4*bb**4*hm**6*alp2*t*
     &    ss**2 + 80.D0*aINV**5*bb**3*hm**2*alp2*t*ss**2 + 13.D0*
     &    aINV**5*bb**4*hm**4*alp2*t*ss**2 - 2.D0*aINV**5*bb**5*hm**4*
     &    qm**2*alp2*t*ss**2 - 1.D0/2.D0*aINV**5*bb**5*hm**6*alp2*t*
     &    ss**2 - 26.D0*aINV**6*bb**5*hm**4*alp2*t*ss**2 - aINV**6*
     &    bb**6*hm**6*alp2*t*ss**2 + 2.D0*aINV**7*bb**7*hm**6*alp2*t*
     &    ss**2 )
      V1V1 = V1V1 + 3.D0*qm**2*alp2*t + 1.D0/4.D0*hm**2*alp2*t + 3.D0*
     &    aINV*alp2*t - 2.D0*aINV*bb*qm**2*alp2*t - 1.D0/2.D0*aINV*bb*
     &    hm**2*alp2*t - 2.D0*aINV**2*bb*alp2*t - aINV**2*bb**2*hm**2*
     &    alp2*t + 2.D0*aINV**3*bb**3*hm**2*alp2*t

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFV1V1_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *V1V1

         return
         end

C------------  VtoV  ----------------------------------

        double precision function FVtoV_psi2schic0(hm,ssum,qm)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps
        common/CFVtoV_psi2schic0/hhm,sss,qqm
C
        external FFVtoV_psi2schic0
C
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ssum
        qqm=qm

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFVtoV_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
        FVtoV_psi2schic0=finval
C

       return
      deallocate(wrkstr)
        end
C
C-------------------------------------------------------
C
        double precision function FFVtoV_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFVtoV_psi2schic0/hm,ssum,qm
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
C        alp1=1.d0-x1
        alp2=x1
C
        w=1.d0/2.d0

C-----------   exponential  -----

      aa =
     &  + t * ( 1.D0 )
      aa = aa + ssum

      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )

C------numerator --------------

      VtoV =
     &  + hm**2 * ( 1.D0 )
      VtoV = VtoV + aINV * ( 4.D0 )
      VtoV = VtoV + aINV**2*hm**2 * (  - 4.D0*bb**2 )
      VtoV = VtoV + 4.D0*qm**2

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFVtoV_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *VtoV

        return
        end

C------------  VtoVk2  ----------------------------------

        double precision function FVtoVk2_psi2schic0(hm,ssum,qm)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps
        common/CFVtoVk2_psi2schic0/hhm,sss,qqm
C
        external FFVtoVk2_psi2schic0
C
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ssum
        qqm=qm

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFVtoVk2_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
        FVtoVk2_psi2schic0=finval
C

       return
      deallocate(wrkstr)
        end
C
C-------------------------------------------------------
C
        double precision function FFVtoVk2_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFVtoVk2_psi2schic0/hm,ssum,qm
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
C        alp1=1.d0-x1
        alp2=x1
C
        w=1.d0/2.d0

C-----------   exponential  -----
      aa =
     &  + t * ( 1.D0 )
      aa = aa + ssum

      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )

C------numerator --------------

      VtoVk2 =
     &  + aINV * (  - 8.D0*qm**2 )
      VtoVk2 = VtoVk2 + aINV*hm**2 * (  - 2.D0 )
      VtoVk2 = VtoVk2 + aINV**2 * (  - 12.D0 )
      VtoVk2 = VtoVk2 + aINV**2*hm**2 * ( 4.D0*bb**2*qm**2 )
      VtoVk2 = VtoVk2 + aINV**2*hm**4 * ( bb**2 )
      VtoVk2 = VtoVk2 + aINV**3*hm**2 * ( 20.D0*bb**2 )
      VtoVk2 = VtoVk2 + aINV**4*hm**4 * (  - 4.D0*bb**4 )

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFVtoVk2_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *VtoVk2

        return
        end

C------------ matrix element loop A1  ----------------------------------

        double precision function FloopA1_psi2schic0(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopA1_psi2schic0/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps

        external FFloopA1_psi2schic0

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopA1_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopA1_psi2schic0=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopA1_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopA1_psi2schic0/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

          endif

            p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      A1loop =
     &  + ss1*CC1 * (  - 2.D0*hm1**(-1)*qm*p2q**2 + 2.D0*hm1**(-1)*
     &    qm**3*p2q - 3.D0*hm1**(-1)*hm2**2*qm*p2q + hm1**(-1)*hm2**2*
     &    qm**3 - hm1**(-1)*hm2**4*qm + 16.D0*aINV*hm1**(-1)*qm*p2q - 8.
     &    D0*aINV*hm1**(-1)*qm**3 + 12.D0*aINV*hm1**(-1)*hm2**2*qm + 8.D
     &    0*aINV*bb2*hm1**(-1)*qm*p2q**2 - 4.D0*aINV*bb2*hm1**(-1)*
     &    qm**3*p2q + 14.D0*aINV*bb2*hm1**(-1)*hm2**2*qm*p2q - 4.D0*
     &    aINV*bb2*hm1**(-1)*hm2**2*qm**3 + 6.D0*aINV*bb2*hm1**(-1)*
     &    hm2**4*qm + 16.D0*aINV*bb1*hm1**(-1)*qm*p2q**2 - 8.D0*aINV*
     &    bb1*hm1**(-1)*qm**3*p2q + 20.D0*aINV*bb1*hm1**(-1)*hm2**2*qm*
     &    p2q - 4.D0*aINV*bb1*hm1**(-1)*hm2**2*qm**3 + 6.D0*aINV*bb1*
     &    hm1**(-1)*hm2**4*qm - 28.D0*aINV**2*bb2*hm1**(-1)*qm*p2q - 28.
     &    D0*aINV**2*bb2*hm1**(-1)*hm2**2*qm - 8.D0*aINV**2*bb2**2*
     &    hm1**(-1)*qm*p2q**2 - 22.D0*aINV**2*bb2**2*hm1**(-1)*hm2**2*
     &    qm*p2q + 4.D0*aINV**2*bb2**2*hm1**(-1)*hm2**2*qm**3 - 13.D0*
     &    aINV**2*bb2**2*hm1**(-1)*hm2**4*qm - 56.D0*aINV**2*bb1*
     &    hm1**(-1)*qm*p2q )
      A1loop = A1loop + ss1*CC1 * (  - 28.D0*aINV**2*bb1*hm1**(-1)*
     &    hm2**2*qm - 44.D0*aINV**2*bb1*bb2*hm1**(-1)*qm*p2q**2 + 8.D0*
     &    aINV**2*bb1*bb2*hm1**(-1)*qm**3*p2q - 70.D0*aINV**2*bb1*bb2*
     &    hm1**(-1)*hm2**2*qm*p2q + 8.D0*aINV**2*bb1*bb2*hm1**(-1)*
     &    hm2**2*qm**3 - 26.D0*aINV**2*bb1*bb2*hm1**(-1)*hm2**4*qm - 44.
     &    D0*aINV**2*bb1**2*hm1**(-1)*qm*p2q**2 + 8.D0*aINV**2*bb1**2*
     &    hm1**(-1)*qm**3*p2q - 48.D0*aINV**2*bb1**2*hm1**(-1)*hm2**2*
     &    qm*p2q + 4.D0*aINV**2*bb1**2*hm1**(-1)*hm2**2*qm**3 - 13.D0*
     &    aINV**2*bb1**2*hm1**(-1)*hm2**4*qm + 16.D0*aINV**3*bb2**2*
     &    hm1**(-1)*hm2**2*qm + 12.D0*aINV**3*bb2**3*hm1**(-1)*hm2**2*
     &    qm*p2q + 12.D0*aINV**3*bb2**3*hm1**(-1)*hm2**4*qm + 32.D0*
     &    aINV**3*bb1*bb2*hm1**(-1)*qm*p2q + 32.D0*aINV**3*bb1*bb2*
     &    hm1**(-1)*hm2**2*qm + 24.D0*aINV**3*bb1*bb2**2*hm1**(-1)*qm*
     &    p2q**2 + 72.D0*aINV**3*bb1*bb2**2*hm1**(-1)*hm2**2*qm*p2q + 
     &    36.D0*aINV**3*bb1*bb2**2*hm1**(-1)*hm2**4*qm + 32.D0*aINV**3*
     &    bb1**2*hm1**(-1)*qm*p2q )
      A1loop = A1loop + ss1*CC1 * ( 16.D0*aINV**3*bb1**2*hm1**(-1)*
     &    hm2**2*qm + 72.D0*aINV**3*bb1**2*bb2*hm1**(-1)*qm*p2q**2 + 
     &    108.D0*aINV**3*bb1**2*bb2*hm1**(-1)*hm2**2*qm*p2q + 36.D0*
     &    aINV**3*bb1**2*bb2*hm1**(-1)*hm2**4*qm + 48.D0*aINV**3*bb1**3
     &    *hm1**(-1)*qm*p2q**2 + 48.D0*aINV**3*bb1**3*hm1**(-1)*hm2**2*
     &    qm*p2q + 12.D0*aINV**3*bb1**3*hm1**(-1)*hm2**4*qm - 4.D0*
     &    aINV**4*bb2**4*hm1**(-1)*hm2**4*qm - 16.D0*aINV**4*bb1*bb2**3
     &    *hm1**(-1)*hm2**2*qm*p2q - 16.D0*aINV**4*bb1*bb2**3*hm1**(-1)
     &    *hm2**4*qm - 16.D0*aINV**4*bb1**2*bb2**2*hm1**(-1)*qm*p2q**2
     &     - 48.D0*aINV**4*bb1**2*bb2**2*hm1**(-1)*hm2**2*qm*p2q - 24.D0
     &    *aINV**4*bb1**2*bb2**2*hm1**(-1)*hm2**4*qm - 32.D0*aINV**4*
     &    bb1**3*bb2*hm1**(-1)*qm*p2q**2 - 48.D0*aINV**4*bb1**3*bb2*
     &    hm1**(-1)*hm2**2*qm*p2q - 16.D0*aINV**4*bb1**3*bb2*hm1**(-1)*
     &    hm2**4*qm - 16.D0*aINV**4*bb1**4*hm1**(-1)*qm*p2q**2 - 16.D0*
     &    aINV**4*bb1**4*hm1**(-1)*hm2**2*qm*p2q - 4.D0*aINV**4*bb1**4*
     &    hm1**(-1)*hm2**4*qm )
      A1loop = A1loop - 4.D0*hm1**(-1)*qm*p2q + 4.D0*hm1**(-1)*qm**3 - 
     &    4.D0*hm1**(-1)*hm2**2*qm + 8.D0*aINV*bb2*hm1**(-1)*qm*p2q + 8.
     &    D0*aINV*bb2*hm1**(-1)*hm2**2*qm + 16.D0*aINV*bb1*hm1**(-1)*qm
     &    *p2q + 8.D0*aINV*bb1*hm1**(-1)*hm2**2*qm - 4.D0*aINV**2*
     &    bb2**2*hm1**(-1)*hm2**2*qm - 8.D0*aINV**2*bb1*bb2*hm1**(-1)*
     &    qm*p2q - 8.D0*aINV**2*bb1*bb2*hm1**(-1)*hm2**2*qm - 8.D0*
     &    aINV**2*bb1**2*hm1**(-1)*qm*p2q - 4.D0*aINV**2*bb1**2*
     &    hm1**(-1)*hm2**2*qm

      A2loop =
     &  + ss1*CC1 * (  - 2.D0*hm1*qm*p2q - hm1*hm2**2*qm + 8.D0*aINV*
     &    hm1*qm + 12.D0*aINV*bb2*hm1*qm*p2q + 8.D0*aINV*bb2*hm1*hm2**2
     &    *qm + 8.D0*aINV*bb1*hm1*qm*p2q + 4.D0*aINV*bb1*hm1*hm2**2*qm
     &     - 56.D0*aINV**2*bb2*hm1*qm - 24.D0*aINV**2*bb2**2*hm1*qm*p2q
     &     - 24.D0*aINV**2*bb2**2*hm1*hm2**2*qm - 48.D0*aINV**2*bb1*bb2
     &    *hm1*qm*p2q - 28.D0*aINV**2*bb1*bb2*hm1*hm2**2*qm - 8.D0*
     &    aINV**2*bb1**2*hm1*qm*p2q - 4.D0*aINV**2*bb1**2*hm1*hm2**2*qm
     &     + 64.D0*aINV**3*bb2**2*hm1*qm + 16.D0*aINV**3*bb2**3*hm1*qm*
     &    p2q + 32.D0*aINV**3*bb2**3*hm1*hm2**2*qm + 64.D0*aINV**3*bb1*
     &    bb2*hm1*qm + 80.D0*aINV**3*bb1*bb2**2*hm1*qm*p2q + 64.D0*
     &    aINV**3*bb1*bb2**2*hm1*hm2**2*qm + 64.D0*aINV**3*bb1**2*bb2*
     &    hm1*qm*p2q + 32.D0*aINV**3*bb1**2*bb2*hm1*hm2**2*qm - 16.D0*
     &    aINV**4*bb2**4*hm1*hm2**2*qm - 32.D0*aINV**4*bb1*bb2**3*hm1*
     &    qm*p2q - 48.D0*aINV**4*bb1*bb2**3*hm1*hm2**2*qm - 64.D0*
     &    aINV**4*bb1**2*bb2**2*hm1*qm*p2q - 48.D0*aINV**4*bb1**2*
     &    bb2**2*hm1*hm2**2*qm )
      A2loop = A2loop + ss1*CC1 * (  - 32.D0*aINV**4*bb1**3*bb2*hm1*qm*
     &    p2q - 16.D0*aINV**4*bb1**3*bb2*hm1*hm2**2*qm )
      A2loop = A2loop - 4.D0*hm1*qm + 16.D0*aINV*bb2*hm1*qm - 16.D0*
     &    aINV**2*bb2**2*hm1*qm - 16.D0*aINV**2*bb1*bb2*hm1*qm


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopA1_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *A1loop

        return
        end

C------------   matrix element loop A2  ----------------------------------

        double precision function FloopA2_psi2schic0(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopA2_psi2schic0/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps

        external FFloopA2_psi2schic0

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopA2_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopA2_psi2schic0=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopA2_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopA2_psi2schic0/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      A1loop =
     &  + ss1*CC1 * (  - 2.D0*hm1**(-1)*qm*p2q**2 + 2.D0*hm1**(-1)*
     &    qm**3*p2q - 3.D0*hm1**(-1)*hm2**2*qm*p2q + hm1**(-1)*hm2**2*
     &    qm**3 - hm1**(-1)*hm2**4*qm + 16.D0*aINV*hm1**(-1)*qm*p2q - 8.
     &    D0*aINV*hm1**(-1)*qm**3 + 12.D0*aINV*hm1**(-1)*hm2**2*qm + 8.D
     &    0*aINV*bb2*hm1**(-1)*qm*p2q**2 - 4.D0*aINV*bb2*hm1**(-1)*
     &    qm**3*p2q + 14.D0*aINV*bb2*hm1**(-1)*hm2**2*qm*p2q - 4.D0*
     &    aINV*bb2*hm1**(-1)*hm2**2*qm**3 + 6.D0*aINV*bb2*hm1**(-1)*
     &    hm2**4*qm + 16.D0*aINV*bb1*hm1**(-1)*qm*p2q**2 - 8.D0*aINV*
     &    bb1*hm1**(-1)*qm**3*p2q + 20.D0*aINV*bb1*hm1**(-1)*hm2**2*qm*
     &    p2q - 4.D0*aINV*bb1*hm1**(-1)*hm2**2*qm**3 + 6.D0*aINV*bb1*
     &    hm1**(-1)*hm2**4*qm - 28.D0*aINV**2*bb2*hm1**(-1)*qm*p2q - 28.
     &    D0*aINV**2*bb2*hm1**(-1)*hm2**2*qm - 8.D0*aINV**2*bb2**2*
     &    hm1**(-1)*qm*p2q**2 - 22.D0*aINV**2*bb2**2*hm1**(-1)*hm2**2*
     &    qm*p2q + 4.D0*aINV**2*bb2**2*hm1**(-1)*hm2**2*qm**3 - 13.D0*
     &    aINV**2*bb2**2*hm1**(-1)*hm2**4*qm - 56.D0*aINV**2*bb1*
     &    hm1**(-1)*qm*p2q )
      A1loop = A1loop + ss1*CC1 * (  - 28.D0*aINV**2*bb1*hm1**(-1)*
     &    hm2**2*qm - 44.D0*aINV**2*bb1*bb2*hm1**(-1)*qm*p2q**2 + 8.D0*
     &    aINV**2*bb1*bb2*hm1**(-1)*qm**3*p2q - 70.D0*aINV**2*bb1*bb2*
     &    hm1**(-1)*hm2**2*qm*p2q + 8.D0*aINV**2*bb1*bb2*hm1**(-1)*
     &    hm2**2*qm**3 - 26.D0*aINV**2*bb1*bb2*hm1**(-1)*hm2**4*qm - 44.
     &    D0*aINV**2*bb1**2*hm1**(-1)*qm*p2q**2 + 8.D0*aINV**2*bb1**2*
     &    hm1**(-1)*qm**3*p2q - 48.D0*aINV**2*bb1**2*hm1**(-1)*hm2**2*
     &    qm*p2q + 4.D0*aINV**2*bb1**2*hm1**(-1)*hm2**2*qm**3 - 13.D0*
     &    aINV**2*bb1**2*hm1**(-1)*hm2**4*qm + 16.D0*aINV**3*bb2**2*
     &    hm1**(-1)*hm2**2*qm + 12.D0*aINV**3*bb2**3*hm1**(-1)*hm2**2*
     &    qm*p2q + 12.D0*aINV**3*bb2**3*hm1**(-1)*hm2**4*qm + 32.D0*
     &    aINV**3*bb1*bb2*hm1**(-1)*qm*p2q + 32.D0*aINV**3*bb1*bb2*
     &    hm1**(-1)*hm2**2*qm + 24.D0*aINV**3*bb1*bb2**2*hm1**(-1)*qm*
     &    p2q**2 + 72.D0*aINV**3*bb1*bb2**2*hm1**(-1)*hm2**2*qm*p2q + 
     &    36.D0*aINV**3*bb1*bb2**2*hm1**(-1)*hm2**4*qm + 32.D0*aINV**3*
     &    bb1**2*hm1**(-1)*qm*p2q )
      A1loop = A1loop + ss1*CC1 * ( 16.D0*aINV**3*bb1**2*hm1**(-1)*
     &    hm2**2*qm + 72.D0*aINV**3*bb1**2*bb2*hm1**(-1)*qm*p2q**2 + 
     &    108.D0*aINV**3*bb1**2*bb2*hm1**(-1)*hm2**2*qm*p2q + 36.D0*
     &    aINV**3*bb1**2*bb2*hm1**(-1)*hm2**4*qm + 48.D0*aINV**3*bb1**3
     &    *hm1**(-1)*qm*p2q**2 + 48.D0*aINV**3*bb1**3*hm1**(-1)*hm2**2*
     &    qm*p2q + 12.D0*aINV**3*bb1**3*hm1**(-1)*hm2**4*qm - 4.D0*
     &    aINV**4*bb2**4*hm1**(-1)*hm2**4*qm - 16.D0*aINV**4*bb1*bb2**3
     &    *hm1**(-1)*hm2**2*qm*p2q - 16.D0*aINV**4*bb1*bb2**3*hm1**(-1)
     &    *hm2**4*qm - 16.D0*aINV**4*bb1**2*bb2**2*hm1**(-1)*qm*p2q**2
     &     - 48.D0*aINV**4*bb1**2*bb2**2*hm1**(-1)*hm2**2*qm*p2q - 24.D0
     &    *aINV**4*bb1**2*bb2**2*hm1**(-1)*hm2**4*qm - 32.D0*aINV**4*
     &    bb1**3*bb2*hm1**(-1)*qm*p2q**2 - 48.D0*aINV**4*bb1**3*bb2*
     &    hm1**(-1)*hm2**2*qm*p2q - 16.D0*aINV**4*bb1**3*bb2*hm1**(-1)*
     &    hm2**4*qm - 16.D0*aINV**4*bb1**4*hm1**(-1)*qm*p2q**2 - 16.D0*
     &    aINV**4*bb1**4*hm1**(-1)*hm2**2*qm*p2q - 4.D0*aINV**4*bb1**4*
     &    hm1**(-1)*hm2**4*qm )
      A1loop = A1loop - 4.D0*hm1**(-1)*qm*p2q + 4.D0*hm1**(-1)*qm**3 - 
     &    4.D0*hm1**(-1)*hm2**2*qm + 8.D0*aINV*bb2*hm1**(-1)*qm*p2q + 8.
     &    D0*aINV*bb2*hm1**(-1)*hm2**2*qm + 16.D0*aINV*bb1*hm1**(-1)*qm
     &    *p2q + 8.D0*aINV*bb1*hm1**(-1)*hm2**2*qm - 4.D0*aINV**2*
     &    bb2**2*hm1**(-1)*hm2**2*qm - 8.D0*aINV**2*bb1*bb2*hm1**(-1)*
     &    qm*p2q - 8.D0*aINV**2*bb1*bb2*hm1**(-1)*hm2**2*qm - 8.D0*
     &    aINV**2*bb1**2*hm1**(-1)*qm*p2q - 4.D0*aINV**2*bb1**2*
     &    hm1**(-1)*hm2**2*qm

      A2loop =
     &  + ss1*CC1 * (  - 2.D0*hm1*qm*p2q - hm1*hm2**2*qm + 8.D0*aINV*
     &    hm1*qm + 12.D0*aINV*bb2*hm1*qm*p2q + 8.D0*aINV*bb2*hm1*hm2**2
     &    *qm + 8.D0*aINV*bb1*hm1*qm*p2q + 4.D0*aINV*bb1*hm1*hm2**2*qm
     &     - 56.D0*aINV**2*bb2*hm1*qm - 24.D0*aINV**2*bb2**2*hm1*qm*p2q
     &     - 24.D0*aINV**2*bb2**2*hm1*hm2**2*qm - 48.D0*aINV**2*bb1*bb2
     &    *hm1*qm*p2q - 28.D0*aINV**2*bb1*bb2*hm1*hm2**2*qm - 8.D0*
     &    aINV**2*bb1**2*hm1*qm*p2q - 4.D0*aINV**2*bb1**2*hm1*hm2**2*qm
     &     + 64.D0*aINV**3*bb2**2*hm1*qm + 16.D0*aINV**3*bb2**3*hm1*qm*
     &    p2q + 32.D0*aINV**3*bb2**3*hm1*hm2**2*qm + 64.D0*aINV**3*bb1*
     &    bb2*hm1*qm + 80.D0*aINV**3*bb1*bb2**2*hm1*qm*p2q + 64.D0*
     &    aINV**3*bb1*bb2**2*hm1*hm2**2*qm + 64.D0*aINV**3*bb1**2*bb2*
     &    hm1*qm*p2q + 32.D0*aINV**3*bb1**2*bb2*hm1*hm2**2*qm - 16.D0*
     &    aINV**4*bb2**4*hm1*hm2**2*qm - 32.D0*aINV**4*bb1*bb2**3*hm1*
     &    qm*p2q - 48.D0*aINV**4*bb1*bb2**3*hm1*hm2**2*qm - 64.D0*
     &    aINV**4*bb1**2*bb2**2*hm1*qm*p2q - 48.D0*aINV**4*bb1**2*
     &    bb2**2*hm1*hm2**2*qm )
      A2loop = A2loop + ss1*CC1 * (  - 32.D0*aINV**4*bb1**3*bb2*hm1*qm*
     &    p2q - 16.D0*aINV**4*bb1**3*bb2*hm1*hm2**2*qm )
      A2loop = A2loop - 4.D0*hm1*qm + 16.D0*aINV*bb2*hm1*qm - 16.D0*
     &    aINV**2*bb2**2*hm1*qm - 16.D0*aINV**2*bb1*bb2*hm1*qm



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopA2_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *A2loop

        return
        end

C------------  matrix element bub1 A1  ------------------------------

        double precision function Fbub1A1_psi2schic0(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1A1_psi2schic0/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub1A1_psi2schic0

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1A1_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1A1_psi2schic0=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1A1_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1A1_psi2schic0/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

            p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      A1bub1 =
     &  + ss1 * ( 4.D0*aINV*hm1**(-1)*qm )
      A1bub1 = A1bub1 + ss1*CC1 * ( 4.D0*aINV*hm1**(-1)*qm )
      A1bub1 = A1bub1 + ss1**2*CC1 * (  - 12.D0*aINV**2*hm1**(-1)*qm - 
     &    4.D0*aINV**2*bb2*hm1**(-1)*qm*tau*p2q - 4.D0*aINV**2*bb1*
     &    hm1**(-1)*qm*tau*p2q + 4.D0*aINV**3*bb2**2*hm1**(-1)*hm2**2*
     &    qm + 8.D0*aINV**3*bb1*bb2*hm1**(-1)*qm*p2q + 8.D0*aINV**3*bb1
     &    *bb2*hm1**(-1)*hm2**2*qm + 8.D0*aINV**3*bb1**2*hm1**(-1)*qm*
     &    p2q + 4.D0*aINV**3*bb1**2*hm1**(-1)*hm2**2*qm )

      A2bub1 =
     &  + ss1 * ( 8.D0*aINV**2*bb2**2*hm1*qm + 8.D0*aINV**2*bb1*bb2*hm1
     &    *qm )
      A2bub1 = A2bub1 + ss1*CC1 * ( 8.D0*aINV**2*bb2**2*hm1*qm + 8.D0*
     &    aINV**2*bb1*bb2*hm1*qm )
      A2bub1 = A2bub1 + ss1**2*CC1 * (  - 4.D0*aINV**2*bb2*hm1*qm*tau
     &     - 4.D0*aINV**2*bb1*hm1*qm*tau - 32.D0*aINV**3*bb2**2*hm1*qm
     &     - 8.D0*aINV**3*bb2**3*hm1*qm*tau*p2q - 32.D0*aINV**3*bb1*bb2
     &    *hm1*qm - 16.D0*aINV**3*bb1*bb2**2*hm1*qm*tau*p2q - 8.D0*
     &    aINV**3*bb1**2*bb2*hm1*qm*tau*p2q + 8.D0*aINV**4*bb2**4*hm1*
     &    hm2**2*qm + 16.D0*aINV**4*bb1*bb2**3*hm1*qm*p2q + 24.D0*
     &    aINV**4*bb1*bb2**3*hm1*hm2**2*qm + 32.D0*aINV**4*bb1**2*
     &    bb2**2*hm1*qm*p2q + 24.D0*aINV**4*bb1**2*bb2**2*hm1*hm2**2*qm
     &     + 16.D0*aINV**4*bb1**3*bb2*hm1*qm*p2q + 8.D0*aINV**4*bb1**3*
     &    bb2*hm1*hm2**2*qm )


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1A1_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *A1bub1

        return
        end

C------------  matrix element bub1 A2  ------------------------------

        double precision function Fbub1A2_psi2schic0(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1A2_psi2schic0/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub1A2_psi2schic0

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1A2_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1A2_psi2schic0=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1A2_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1A2_psi2schic0/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      A1bub1 =
     &  + ss1 * ( 4.D0*aINV*hm1**(-1)*qm )
      A1bub1 = A1bub1 + ss1*CC1 * ( 4.D0*aINV*hm1**(-1)*qm )
      A1bub1 = A1bub1 + ss1**2*CC1 * (  - 12.D0*aINV**2*hm1**(-1)*qm - 
     &    4.D0*aINV**2*bb2*hm1**(-1)*qm*tau*p2q - 4.D0*aINV**2*bb1*
     &    hm1**(-1)*qm*tau*p2q + 4.D0*aINV**3*bb2**2*hm1**(-1)*hm2**2*
     &    qm + 8.D0*aINV**3*bb1*bb2*hm1**(-1)*qm*p2q + 8.D0*aINV**3*bb1
     &    *bb2*hm1**(-1)*hm2**2*qm + 8.D0*aINV**3*bb1**2*hm1**(-1)*qm*
     &    p2q + 4.D0*aINV**3*bb1**2*hm1**(-1)*hm2**2*qm )

      A2bub1 =
     &  + ss1 * ( 8.D0*aINV**2*bb2**2*hm1*qm + 8.D0*aINV**2*bb1*bb2*hm1
     &    *qm )
      A2bub1 = A2bub1 + ss1*CC1 * ( 8.D0*aINV**2*bb2**2*hm1*qm + 8.D0*
     &    aINV**2*bb1*bb2*hm1*qm )
      A2bub1 = A2bub1 + ss1**2*CC1 * (  - 4.D0*aINV**2*bb2*hm1*qm*tau
     &     - 4.D0*aINV**2*bb1*hm1*qm*tau - 32.D0*aINV**3*bb2**2*hm1*qm
     &     - 8.D0*aINV**3*bb2**3*hm1*qm*tau*p2q - 32.D0*aINV**3*bb1*bb2
     &    *hm1*qm - 16.D0*aINV**3*bb1*bb2**2*hm1*qm*tau*p2q - 8.D0*
     &    aINV**3*bb1**2*bb2*hm1*qm*tau*p2q + 8.D0*aINV**4*bb2**4*hm1*
     &    hm2**2*qm + 16.D0*aINV**4*bb1*bb2**3*hm1*qm*p2q + 24.D0*
     &    aINV**4*bb1*bb2**3*hm1*hm2**2*qm + 32.D0*aINV**4*bb1**2*
     &    bb2**2*hm1*qm*p2q + 24.D0*aINV**4*bb1**2*bb2**2*hm1*hm2**2*qm
     &     + 16.D0*aINV**4*bb1**3*bb2*hm1*qm*p2q + 8.D0*aINV**4*bb1**3*
     &    bb2*hm1*hm2**2*qm )


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1A2_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *A2bub1

        return
        end

C--------------- bub2-------------------------------------

C------------  matrix element bub2 A1  ------------------------------

        double precision function Fbub2A1_psi2schic0(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2A1_psi2schic0/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub2A1_psi2schic0

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2A1_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2A1_psi2schic0=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2A1_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2A1_psi2schic0/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

            p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )


      A1bub2 =
     &  + ss2 * ( 4.D0*aINV*hm1**(-1)*qm )
      A1bub2 = A1bub2 + CC1*ss2 * (  - 12.D0*aINV**2*hm1**(-1)*ss1*qm
     &     + 4.D0*aINV**3*bb2**2*hm1**(-1)*ss1*hm2**2*qm + 8.D0*aINV**3
     &    *bb1*bb2*hm1**(-1)*ss1*qm*p2q + 8.D0*aINV**3*bb1*bb2*
     &    hm1**(-1)*ss1*hm2**2*qm + 8.D0*aINV**3*bb1**2*hm1**(-1)*ss1*
     &    qm*p2q + 4.D0*aINV**3*bb1**2*hm1**(-1)*ss1*hm2**2*qm )

      A2bub2 =
     &  + ss2 * ( 8.D0*aINV**2*bb2**2*hm1*qm + 8.D0*aINV**2*bb1*bb2*hm1
     &    *qm )
      A2bub2 = A2bub2 + CC1*ss2 * (  - 32.D0*aINV**3*bb2**2*hm1*ss1*qm
     &     - 32.D0*aINV**3*bb1*bb2*hm1*ss1*qm + 8.D0*aINV**4*bb2**4*hm1
     &    *ss1*hm2**2*qm + 16.D0*aINV**4*bb1*bb2**3*hm1*ss1*qm*p2q + 24.
     &    D0*aINV**4*bb1*bb2**3*hm1*ss1*hm2**2*qm + 32.D0*aINV**4*
     &    bb1**2*bb2**2*hm1*ss1*qm*p2q + 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm1*ss1*hm2**2*qm + 16.D0*aINV**4*bb1**3*bb2*hm1*ss1*qm*p2q
     &     + 8.D0*aINV**4*bb1**3*bb2*hm1*ss1*hm2**2*qm )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2A1_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *A1bub2

        return
        end

C------------  matrix element bub2 A2  ------------------------------

        double precision function Fbub2A2_psi2schic0(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2A2_psi2schic0/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub2A2_psi2schic0

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2A2_psi2schic0,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2A2_psi2schic0=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2A2_psi2schic0(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2A2_psi2schic0/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

            p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )


      A1bub2 =
     &  + ss2 * ( 4.D0*aINV*hm1**(-1)*qm )
      A1bub2 = A1bub2 + CC1*ss2 * (  - 12.D0*aINV**2*hm1**(-1)*ss1*qm
     &     + 4.D0*aINV**3*bb2**2*hm1**(-1)*ss1*hm2**2*qm + 8.D0*aINV**3
     &    *bb1*bb2*hm1**(-1)*ss1*qm*p2q + 8.D0*aINV**3*bb1*bb2*
     &    hm1**(-1)*ss1*hm2**2*qm + 8.D0*aINV**3*bb1**2*hm1**(-1)*ss1*
     &    qm*p2q + 4.D0*aINV**3*bb1**2*hm1**(-1)*ss1*hm2**2*qm )

      A2bub2 =
     &  + ss2 * ( 8.D0*aINV**2*bb2**2*hm1*qm + 8.D0*aINV**2*bb1*bb2*hm1
     &    *qm )
      A2bub2 = A2bub2 + CC1*ss2 * (  - 32.D0*aINV**3*bb2**2*hm1*ss1*qm
     &     - 32.D0*aINV**3*bb1*bb2*hm1*ss1*qm + 8.D0*aINV**4*bb2**4*hm1
     &    *ss1*hm2**2*qm + 16.D0*aINV**4*bb1*bb2**3*hm1*ss1*qm*p2q + 24.
     &    D0*aINV**4*bb1*bb2**3*hm1*ss1*hm2**2*qm + 32.D0*aINV**4*
     &    bb1**2*bb2**2*hm1*ss1*qm*p2q + 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm1*ss1*hm2**2*qm + 16.D0*aINV**4*bb1**3*bb2*hm1*ss1*qm*p2q
     &     + 8.D0*aINV**4*bb1**3*bb2*hm1*ss1*hm2**2*qm )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2A2_psi2schic0 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *A2bub2

        return
        end








































******************************************************
C             Normalization
*****************************************************

C--------  PP-Normalization  ------------------

        double precision function FPP_Jpsietac(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFPP_Jpsietac/hhm,sss,qqm1,qqm2
C
        external FFPP_Jpsietac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFPP_Jpsietac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FPP_Jpsietac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFPP_Jpsietac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFPP_Jpsietac/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

       ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )

        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFPP_Jpsietac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *PP

        return
        end

C------------  VV-normalization  ----------------------------------

        double precision function FVV_Jpsietac(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFVV_Jpsietac/hhm,sss,qqm1,qqm2
C
        external FFVV_Jpsietac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFVV_Jpsietac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FVV_Jpsietac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFVV_Jpsietac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFVV_Jpsietac/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

       ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )

        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFVV_Jpsietac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *VV

        return
        end

C------------  SS-normalization  ----------------------------------

        double precision function FSS_Jpsietac(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFSS_Jpsietac/hhm,sss,qqm1,qqm2
C
        external FFSS_Jpsietac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFSS_Jpsietac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FSS_Jpsietac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFSS_Jpsietac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFSS_Jpsietac/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

       ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )

        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFSS_Jpsietac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Scalar

        return
        end

C------------AA-normalization  ----------------------------------

        double precision function FAA_Jpsietac(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFAA_Jpsietac/hhm,sss,qqm1,qqm2
C
        external FFAA_Jpsietac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFAA_Jpsietac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FAA_Jpsietac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFAA_Jpsietac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFAA_Jpsietac/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

       ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )

        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFAA_Jpsietac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Axial

        return
        end

C------------ TT-normalization  ----------------------------------

        double precision function FTT_Jpsietac(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFTT_Jpsietac/hhm,sss,qqm1,qqm2
C
        external FFTT_Jpsietac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFTT_Jpsietac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FTT_Jpsietac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFTT_Jpsietac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFTT_Jpsietac/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

       ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )

        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFTT_Jpsietac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Tensor

        return
        end

C--psi(2S) normalization from file charm_12.f at /Ytt/HQL/ort/ ----

C-------------------norm: V1V1  --------------------------

        double precision function FV1V1_Jpsietac(hm,ss,qm,CC1)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps
        common/CFV1V1_Jpsietac/hhm,sss,qqm,CCC1
C
        external FFV1V1_Jpsietac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm=qm
        CCC1=CC1

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFV1V1_Jpsietac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
        FV1V1_Jpsietac=finval
C

       return
      deallocate(wrkstr)
        end
C-----------------------------------------------------------

        double precision function FFV1V1_Jpsietac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFV1V1_Jpsietac/hm,ss,qm,CC1
        common/confinement/conf,xlam, pi
C
       ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
        alp2=x1

C-----------   exponential  -----


      aa =
     &  + t * ( 1.D0 )
      aa = aa + 2.D0*ss

      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )

C------numerator --------------

      V1V1 =
     &  + CC1 * (  - 12.D0*aINV*qm**2*alp2*t*ss - aINV*hm**2*alp2*t*ss
     &     - 18.D0*aINV**2*alp2*t*ss + 12.D0*aINV**2*bb*qm**2*alp2*t*ss
     &     + 3.D0*aINV**2*bb*hm**2*alp2*t*ss + 6.D0*aINV**2*bb**2*hm**2
     &    *qm**2*alp2*t*ss + 1.D0/2.D0*aINV**2*bb**2*hm**4*alp2*t*ss +
     &    16.D0*aINV**3*bb*alp2*t*ss + 14.D0*aINV**3*bb**2*hm**2*alp2*t
     &    *ss - 4.D0*aINV**3*bb**3*hm**2*qm**2*alp2*t*ss - aINV**3*
     &    bb**3*hm**4*alp2*t*ss - 24.D0*aINV**4*bb**3*hm**2*alp2*t*ss
     &     - 2.D0*aINV**4*bb**4*hm**4*alp2*t*ss + 4.D0*aINV**5*bb**5*
     &    hm**4*alp2*t*ss )
      V1V1 = V1V1 + CC1**2 * ( 18.D0*aINV**2*qm**2*alp2*t*ss**2 + 3.D0/
     &    2.D0*aINV**2*hm**2*alp2*t*ss**2 + 36.D0*aINV**3*alp2*t*ss**2
     &     - 24.D0*aINV**3*bb*qm**2*alp2*t*ss**2 - 6.D0*aINV**3*bb*
     &    hm**2*alp2*t*ss**2 - 18.D0*aINV**3*bb**2*hm**2*qm**2*alp2*t*
     &    ss**2 - 3.D0/2.D0*aINV**3*bb**2*hm**4*alp2*t*ss**2 - 40.D0*
     &    aINV**4*bb*alp2*t*ss**2 - 44.D0*aINV**4*bb**2*hm**2*alp2*t*
     &    ss**2 + 16.D0*aINV**4*bb**3*hm**2*qm**2*alp2*t*ss**2 + 4.D0*
     &    aINV**4*bb**3*hm**4*alp2*t*ss**2 + 3.D0*aINV**4*bb**4*hm**4*
     &    qm**2*alp2*t*ss**2 + 1.D0/4.D0*aINV**4*bb**4*hm**6*alp2*t*
     &    ss**2 + 80.D0*aINV**5*bb**3*hm**2*alp2*t*ss**2 + 13.D0*
     &    aINV**5*bb**4*hm**4*alp2*t*ss**2 - 2.D0*aINV**5*bb**5*hm**4*
     &    qm**2*alp2*t*ss**2 - 1.D0/2.D0*aINV**5*bb**5*hm**6*alp2*t*
     &    ss**2 - 26.D0*aINV**6*bb**5*hm**4*alp2*t*ss**2 - aINV**6*
     &    bb**6*hm**6*alp2*t*ss**2 + 2.D0*aINV**7*bb**7*hm**6*alp2*t*
     &    ss**2 )
      V1V1 = V1V1 + 3.D0*qm**2*alp2*t + 1.D0/4.D0*hm**2*alp2*t + 3.D0*
     &    aINV*alp2*t - 2.D0*aINV*bb*qm**2*alp2*t - 1.D0/2.D0*aINV*bb*
     &    hm**2*alp2*t - 2.D0*aINV**2*bb*alp2*t - aINV**2*bb**2*hm**2*
     &    alp2*t + 2.D0*aINV**3*bb**3*hm**2*alp2*t

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFV1V1_Jpsietac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *V1V1

         return
         end

C------------Jpsi-etac+gamma: matrix element FJpsiEtac_Jpsietac -----------------

        double precision function FJpsiEtac_Jpsietac(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFJpsiEtac_Jpsietac/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFJpsiEtac_Jpsietac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFJpsiEtac_Jpsietac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FJpsiEtac_Jpsietac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFJpsiEtac_Jpsietac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFJpsiEtac_Jpsietac/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

      ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFJpsiEtac_Jpsietac = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)

        return
        end


































******************************************************
C             Normalization
*****************************************************

C--------  PP-Normalization  ------------------

        double precision function FPP_chic0Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFPP_chic0Jpsi/hhm,sss,qqm1,qqm2
C
        external FFPP_chic0Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFPP_chic0Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FPP_chic0Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFPP_chic0Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFPP_chic0Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v = x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFPP_chic0Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *PP

        return
        end

C------------  VV-normalization  ----------------------------------

        double precision function FVV_chic0Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFVV_chic0Jpsi/hhm,sss,qqm1,qqm2
C
        external FFVV_chic0Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFVV_chic0Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FVV_chic0Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFVV_chic0Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFVV_chic0Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFVV_chic0Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *VV

        return
        end

C------------  SS-normalization  ----------------------------------

        double precision function FSS_chic0Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFSS_chic0Jpsi/hhm,sss,qqm1,qqm2
C
        external FFSS_chic0Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFSS_chic0Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FSS_chic0Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFSS_chic0Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFSS_chic0Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFSS_chic0Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Scalar

        return
        end

C------------AA-normalization  ----------------------------------

        double precision function FAA_chic0Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFAA_chic0Jpsi/hhm,sss,qqm1,qqm2
C
        external FFAA_chic0Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFAA_chic0Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FAA_chic0Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFAA_chic0Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFAA_chic0Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFAA_chic0Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Axial

        return
        end

C------------ TT-normalization  ----------------------------------

        double precision function FTT_chic0Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFTT_chic0Jpsi/hhm,sss,qqm1,qqm2
C
        external FFTT_chic0Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFTT_chic0Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FTT_chic0Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFTT_chic0Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFTT_chic0Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFTT_chic0Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Tensor

        return
        end

C--psi(2S) normalization from file charm_12.f at /Ytt/HQL/ort/ ----

C-------------------norm: V1V1  --------------------------

        double precision function FV1V1_chic0Jpsi(hm,ss,qm,CC1)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps
        common/CFV1V1_chic0Jpsi/hhm,sss,qqm,CCC1
C
        external FFV1V1_chic0Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm=qm
        CCC1=CC1

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFV1V1_chic0Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
        FV1V1_chic0Jpsi=finval
C

       return
      deallocate(wrkstr)
        end
C-----------------------------------------------------------

        double precision function FFV1V1_chic0Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFV1V1_chic0Jpsi/hm,ss,qm,CC1
        common/confinement/conf,xlam, pi
C
        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
        alp2=x1

C-----------   exponential  -----


      aa =
     &  + t * ( 1.D0 )
      aa = aa + 2.D0*ss

      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )

C------numerator --------------

      V1V1 =
     &  + CC1 * (  - 12.D0*aINV*qm**2*alp2*t*ss - aINV*hm**2*alp2*t*ss
     &     - 18.D0*aINV**2*alp2*t*ss + 12.D0*aINV**2*bb*qm**2*alp2*t*ss
     &     + 3.D0*aINV**2*bb*hm**2*alp2*t*ss + 6.D0*aINV**2*bb**2*hm**2
     &    *qm**2*alp2*t*ss + 1.D0/2.D0*aINV**2*bb**2*hm**4*alp2*t*ss +
     &    16.D0*aINV**3*bb*alp2*t*ss + 14.D0*aINV**3*bb**2*hm**2*alp2*t
     &    *ss - 4.D0*aINV**3*bb**3*hm**2*qm**2*alp2*t*ss - aINV**3*
     &    bb**3*hm**4*alp2*t*ss - 24.D0*aINV**4*bb**3*hm**2*alp2*t*ss
     &     - 2.D0*aINV**4*bb**4*hm**4*alp2*t*ss + 4.D0*aINV**5*bb**5*
     &    hm**4*alp2*t*ss )
      V1V1 = V1V1 + CC1**2 * ( 18.D0*aINV**2*qm**2*alp2*t*ss**2 + 3.D0/
     &    2.D0*aINV**2*hm**2*alp2*t*ss**2 + 36.D0*aINV**3*alp2*t*ss**2
     &     - 24.D0*aINV**3*bb*qm**2*alp2*t*ss**2 - 6.D0*aINV**3*bb*
     &    hm**2*alp2*t*ss**2 - 18.D0*aINV**3*bb**2*hm**2*qm**2*alp2*t*
     &    ss**2 - 3.D0/2.D0*aINV**3*bb**2*hm**4*alp2*t*ss**2 - 40.D0*
     &    aINV**4*bb*alp2*t*ss**2 - 44.D0*aINV**4*bb**2*hm**2*alp2*t*
     &    ss**2 + 16.D0*aINV**4*bb**3*hm**2*qm**2*alp2*t*ss**2 + 4.D0*
     &    aINV**4*bb**3*hm**4*alp2*t*ss**2 + 3.D0*aINV**4*bb**4*hm**4*
     &    qm**2*alp2*t*ss**2 + 1.D0/4.D0*aINV**4*bb**4*hm**6*alp2*t*
     &    ss**2 + 80.D0*aINV**5*bb**3*hm**2*alp2*t*ss**2 + 13.D0*
     &    aINV**5*bb**4*hm**4*alp2*t*ss**2 - 2.D0*aINV**5*bb**5*hm**4*
     &    qm**2*alp2*t*ss**2 - 1.D0/2.D0*aINV**5*bb**5*hm**6*alp2*t*
     &    ss**2 - 26.D0*aINV**6*bb**5*hm**4*alp2*t*ss**2 - aINV**6*
     &    bb**6*hm**6*alp2*t*ss**2 + 2.D0*aINV**7*bb**7*hm**6*alp2*t*
     &    ss**2 )
      V1V1 = V1V1 + 3.D0*qm**2*alp2*t + 1.D0/4.D0*hm**2*alp2*t + 3.D0*
     &    aINV*alp2*t - 2.D0*aINV*bb*qm**2*alp2*t - 1.D0/2.D0*aINV*bb*
     &    hm**2*alp2*t - 2.D0*aINV**2*bb*alp2*t - aINV**2*bb**2*hm**2*
     &    alp2*t + 2.D0*aINV**3*bb**3*hm**2*alp2*t

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFV1V1_chic0Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *V1V1

         return
         end

C------------C0: matrix element loop A1  ----------------------------------

        double precision function FloopA1_chic0Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopA1_chic0Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopA1_chic0Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopA1_chic0Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopA1_chic0Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopA1_chic0Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopA1_chic0Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif
           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      A1loop =
     &  + hm1**(-1) * (  - 4.D0*qm*p2q + 4.D0*qm**3 - 4.D0*hm2**2*qm )
      A1loop = A1loop + aINV*hm1**(-1) * ( 8.D0*bb2*hm2**2*qm + 8.D0*
     &    bb1*qm*p2q + 8.D0*bb1*hm2**2*qm )
      A1loop = A1loop + aINV**2*hm1**(-1) * (  - 4.D0*bb2**2*hm2**2*qm
     &     - 8.D0*bb1*bb2*qm*p2q - 8.D0*bb1*bb2*hm2**2*qm - 8.D0*bb1**2
     &    *qm*p2q - 4.D0*bb1**2*hm2**2*qm )

      A2loop =
     &  + hm1 * ( 4.D0*qm )
      A2loop = A2loop + aINV*hm1 * (  - 16.D0*bb1*qm )
      A2loop = A2loop + aINV**2*hm1 * ( 16.D0*bb1*bb2*qm + 16.D0*bb1**2
     &    *qm )


      W1loop =
     &  + p2q**(-1) * ( 4.D0*qm**2 + 4.D0*aINV - 4.D0*aINV*bb1*qm**2 - 
     &    12.D0*aINV**2*bb1 - 8.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*
     &    aINV**2*bb1**2*hm2**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D0
     &    *aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*bb1**3*hm2**2 )
      W1loop = W1loop - 4.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.
     &    D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*bb1**3

      W2loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 + 4.D0*aINV**2*bb1*bb2

      W3loop =
     &  + 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2

      W4loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 - 4.D0*aINV**2*bb1**2

      W5loop =
     &  + p2q**(-1) * ( 8.D0*aINV - 4.D0*aINV*bb2*qm**2 + 4.D0*aINV*bb2
     &    *hm2**2 - 4.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*hm2**2 - 12.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*hm2**2 - 12.D0*aINV**2*bb1
     &     - 16.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*aINV**2*bb1**2*hm2**2
     &     + 4.D0*aINV**3*bb2**3*hm2**2 + 12.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 12.D0*aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*
     &    bb1**3*hm2**2 )
      W5loop = W5loop + 4.D0*aINV*bb2 + 8.D0*aINV*bb1 - 4.D0*aINV**2*
     &    bb2**2 - 16.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2 + 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*
     &    bb1**3




       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopA1_chic0Jpsi = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *A1loop

        return
        end

C------------  C0: matrix element loop A2  ----------------------------------

        double precision function FloopA2_chic0Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopA2_chic0Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopA2_chic0Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopA2_chic0Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopA2_chic0Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopA2_chic0Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopA2_chic0Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif
           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      A1loop =
     &  + hm1**(-1) * (  - 4.D0*qm*p2q + 4.D0*qm**3 - 4.D0*hm2**2*qm )
      A1loop = A1loop + aINV*hm1**(-1) * ( 8.D0*bb2*hm2**2*qm + 8.D0*
     &    bb1*qm*p2q + 8.D0*bb1*hm2**2*qm )
      A1loop = A1loop + aINV**2*hm1**(-1) * (  - 4.D0*bb2**2*hm2**2*qm
     &     - 8.D0*bb1*bb2*qm*p2q - 8.D0*bb1*bb2*hm2**2*qm - 8.D0*bb1**2
     &    *qm*p2q - 4.D0*bb1**2*hm2**2*qm )

      A2loop =
     &  + hm1 * ( 4.D0*qm )
      A2loop = A2loop + aINV*hm1 * (  - 16.D0*bb1*qm )
      A2loop = A2loop + aINV**2*hm1 * ( 16.D0*bb1*bb2*qm + 16.D0*bb1**2
     &    *qm )


      W1loop =
     &  + p2q**(-1) * ( 4.D0*qm**2 + 4.D0*aINV - 4.D0*aINV*bb1*qm**2 - 
     &    12.D0*aINV**2*bb1 - 8.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*
     &    aINV**2*bb1**2*hm2**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D0
     &    *aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*bb1**3*hm2**2 )
      W1loop = W1loop - 4.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.
     &    D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*bb1**3

      W2loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 + 4.D0*aINV**2*bb1*bb2

      W3loop =
     &  + 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2

      W4loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 - 4.D0*aINV**2*bb1**2

      W5loop =
     &  + p2q**(-1) * ( 8.D0*aINV - 4.D0*aINV*bb2*qm**2 + 4.D0*aINV*bb2
     &    *hm2**2 - 4.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*hm2**2 - 12.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*hm2**2 - 12.D0*aINV**2*bb1
     &     - 16.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*aINV**2*bb1**2*hm2**2
     &     + 4.D0*aINV**3*bb2**3*hm2**2 + 12.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 12.D0*aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*
     &    bb1**3*hm2**2 )
      W5loop = W5loop + 4.D0*aINV*bb2 + 8.D0*aINV*bb1 - 4.D0*aINV**2*
     &    bb2**2 - 16.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2 + 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*
     &    bb1**3



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopA2_chic0Jpsi = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *A2loop

        return
        end

C------------  C0: matrix element bub1 A1  ------------------------------

        double precision function Fbub1A1_chic0Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1A1_chic0Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1A1_chic0Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1A1_chic0Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1A1_chic0Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1A1_chic0Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1A1_chic0Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)
           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      A1bub1 =
     &  + aINV*hm1**(-1)*ss1 * ( 4.D0*qm )

      A2bub1 =
     &  + aINV**2*hm1*ss1 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub1 = 0.d0

      W2bub1 = 0.d0

      W3bub1 = 0.d0

      W4bub1 =
     &  + 4.D0*aINV**2*bb1*bb2*ss1 + 4.D0*aINV**2*bb1**2*ss1

      W5bub1 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss1 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1A1_chic0Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *A1bub1

        return
        end

C------------  C0: matrix element bub1 A2  ------------------------------

        double precision function Fbub1A2_chic0Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1A2_chic0Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1A2_chic0Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1A2_chic0Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1A2_chic0Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1A2_chic0Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1A2_chic0Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)
           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      A1bub1 =
     &  + aINV*hm1**(-1)*ss1 * ( 4.D0*qm )

      A2bub1 =
     &  + aINV**2*hm1*ss1 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub1 = 0.d0

      W2bub1 = 0.d0

      W3bub1 = 0.d0

      W4bub1 =
     &  + 4.D0*aINV**2*bb1*bb2*ss1 + 4.D0*aINV**2*bb1**2*ss1

      W5bub1 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss1 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1A2_chic0Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *A2bub1

        return
        end

C--------------- bub2-------------------------------------

C------------  C0: matrix element bub2 A1  ------------------------------

        double precision function Fbub2A1_chic0Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2A1_chic0Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2A1_chic0Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2A1_chic0Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2A1_chic0Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2A1_chic0Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2A1_chic0Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)
           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )

      A1bub2 =
     &  + aINV*hm1**(-1)*ss2 * ( 4.D0*qm )

      A2bub2 =
     &  + aINV**2*hm1*ss2 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )

      W2bub2 = 0.d0

      W3bub2 = 0.d0

      W4bub2 =
     &  - 4.D0*aINV**2*bb2**2*ss2 - 4.D0*aINV**2*bb1*bb2*ss2

      W5bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2A1_chic0Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *A1bub2

        return
        end

C------------  C0: matrix element bub2 A2  ------------------------------

        double precision function Fbub2A2_chic0Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2A2_chic0Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2A2_chic0Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2A2_chic0Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2A2_chic0Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2A2_chic0Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2A2_chic0Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)
           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )

      A1bub2 =
     &  + aINV*hm1**(-1)*ss2 * ( 4.D0*qm )

      A2bub2 =
     &  + aINV**2*hm1*ss2 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )

      W2bub2 = 0.d0

      W3bub2 = 0.d0

      W4bub2 =
     &  - 4.D0*aINV**2*bb2**2*ss2 - 4.D0*aINV**2*bb1*bb2*ss2

      W5bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2A2_chic0Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *A2bub2

        return
        end


























******************************************************
C             Normalization
*****************************************************

C--------  PP-Normalization  ------------------

        double precision function FPP_hcetac(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFPP_hcetac/hhm,sss,qqm1,qqm2
C
        external FFPP_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFPP_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FPP_hcetac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFPP_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFPP_hcetac/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )

        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFPP_hcetac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *PP

        return
        end

C------------  VV-normalization  ----------------------------------

        double precision function FVV_hcetac(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFVV_hcetac/hhm,sss,qqm1,qqm2
C
        external FFVV_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFVV_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FVV_hcetac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFVV_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFVV_hcetac/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )

        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFVV_hcetac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *VV

        return
        end

C------------  SS-normalization  ----------------------------------

        double precision function FSS_hcetac(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFSS_hcetac/hhm,sss,qqm1,qqm2
C
        external FFSS_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFSS_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FSS_hcetac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFSS_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFSS_hcetac/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )

        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFSS_hcetac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Scalar

        return
        end

C------------AA-normalization  ----------------------------------

        double precision function FAA_hcetac(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFAA_hcetac/hhm,sss,qqm1,qqm2
C
        external FFAA_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFAA_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FAA_hcetac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFAA_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFAA_hcetac/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

       ! pi=x01aaf()
       pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )

        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFAA_hcetac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Axial

        return
        end

C------------ TT-normalization  ----------------------------------

        double precision function FTT_hcetac(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFTT_hcetac/hhm,sss,qqm1,qqm2
C
        external FFTT_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFTT_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FTT_hcetac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFTT_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFTT_hcetac/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )

        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFTT_hcetac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Tensor

        return
        end

C--psi(2S) normalization from file charm_12.f at /Ytt/HQL/ort/ ----

C-------------------norm: V1V1  --------------------------

        double precision function FV1V1_hcetac(hm,ss,qm,CC1)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps
        common/CFV1V1_hcetac/hhm,sss,qqm,CCC1
C
        external FFV1V1_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm=qm
        CCC1=CC1

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFV1V1_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
        FV1V1_hcetac=finval
C

       return
      deallocate(wrkstr)
        end
C-----------------------------------------------------------

        double precision function FFV1V1_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFV1V1_hcetac/hm,ss,qm,CC1
        common/confinement/conf,xlam, pi
C
       ! pi=x01aaf()
       pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
        alp2=x1

C-----------   exponential  -----


      aa =
     &  + t * ( 1.D0 )
      aa = aa + 2.D0*ss

      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )

C------numerator --------------

      V1V1 =
     &  + CC1 * (  - 12.D0*aINV*qm**2*alp2*t*ss - aINV*hm**2*alp2*t*ss
     &     - 18.D0*aINV**2*alp2*t*ss + 12.D0*aINV**2*bb*qm**2*alp2*t*ss
     &     + 3.D0*aINV**2*bb*hm**2*alp2*t*ss + 6.D0*aINV**2*bb**2*hm**2
     &    *qm**2*alp2*t*ss + 1.D0/2.D0*aINV**2*bb**2*hm**4*alp2*t*ss +
     &    16.D0*aINV**3*bb*alp2*t*ss + 14.D0*aINV**3*bb**2*hm**2*alp2*t
     &    *ss - 4.D0*aINV**3*bb**3*hm**2*qm**2*alp2*t*ss - aINV**3*
     &    bb**3*hm**4*alp2*t*ss - 24.D0*aINV**4*bb**3*hm**2*alp2*t*ss
     &     - 2.D0*aINV**4*bb**4*hm**4*alp2*t*ss + 4.D0*aINV**5*bb**5*
     &    hm**4*alp2*t*ss )
      V1V1 = V1V1 + CC1**2 * ( 18.D0*aINV**2*qm**2*alp2*t*ss**2 + 3.D0/
     &    2.D0*aINV**2*hm**2*alp2*t*ss**2 + 36.D0*aINV**3*alp2*t*ss**2
     &     - 24.D0*aINV**3*bb*qm**2*alp2*t*ss**2 - 6.D0*aINV**3*bb*
     &    hm**2*alp2*t*ss**2 - 18.D0*aINV**3*bb**2*hm**2*qm**2*alp2*t*
     &    ss**2 - 3.D0/2.D0*aINV**3*bb**2*hm**4*alp2*t*ss**2 - 40.D0*
     &    aINV**4*bb*alp2*t*ss**2 - 44.D0*aINV**4*bb**2*hm**2*alp2*t*
     &    ss**2 + 16.D0*aINV**4*bb**3*hm**2*qm**2*alp2*t*ss**2 + 4.D0*
     &    aINV**4*bb**3*hm**4*alp2*t*ss**2 + 3.D0*aINV**4*bb**4*hm**4*
     &    qm**2*alp2*t*ss**2 + 1.D0/4.D0*aINV**4*bb**4*hm**6*alp2*t*
     &    ss**2 + 80.D0*aINV**5*bb**3*hm**2*alp2*t*ss**2 + 13.D0*
     &    aINV**5*bb**4*hm**4*alp2*t*ss**2 - 2.D0*aINV**5*bb**5*hm**4*
     &    qm**2*alp2*t*ss**2 - 1.D0/2.D0*aINV**5*bb**5*hm**6*alp2*t*
     &    ss**2 - 26.D0*aINV**6*bb**5*hm**4*alp2*t*ss**2 - aINV**6*
     &    bb**6*hm**6*alp2*t*ss**2 + 2.D0*aINV**7*bb**7*hm**6*alp2*t*
     &    ss**2 )
      V1V1 = V1V1 + 3.D0*qm**2*alp2*t + 1.D0/4.D0*hm**2*alp2*t + 3.D0*
     &    aINV*alp2*t - 2.D0*aINV*bb*qm**2*alp2*t - 1.D0/2.D0*aINV*bb*
     &    hm**2*alp2*t - 2.D0*aINV**2*bb*alp2*t - aINV**2*bb**2*hm**2*
     &    alp2*t + 2.D0*aINV**3*bb**3*hm**2*alp2*t

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFV1V1_hcetac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *V1V1

         return
         end

C------------   loop A1  -------------------------

        double precision function FloopA1_hcetac(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopA1_hcetac/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopA1_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopA1_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopA1_hcetac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopA1_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopA1_hcetac/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
       ! pi=x01aaf()
       pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

            endif

            p1q = (hm1**2-hm2**2)/2.d0

           
      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )

           
      A1loop =
     &  + p1q * ( 32.D0*aINV**3*bb1*bb2**2 - 16.D0*aINV**4*bb1*bb2**3
     &     - 16.D0*aINV**4*bb1**2*bb2**2 )
      A1loop = A1loop - 4.D0*aINV + 16.D0*aINV*bb2*qm**2 + 48.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*qm**2 + 8.D0*aINV**2*bb2**2
     &    *hm2**2 - 8.D0*aINV**2*bb1*bb2*qm**2 + 8.D0*aINV**2*bb1*bb2*
     &    hm1**2 - 32.D0*aINV**3*bb2**2 - 16.D0*aINV**3*bb2**3*hm2**2
     &     - 32.D0*aINV**3*bb1*bb2 - 32.D0*aINV**3*bb1*bb2**2*hm1**2 - 
     &    16.D0*aINV**3*bb1**2*bb2*hm1**2 + 8.D0*aINV**4*bb2**4*hm2**2
     &     + 8.D0*aINV**4*bb1*bb2**3*hm2**2 + 16.D0*aINV**4*bb1*bb2**3*
     &    hm1**2 + 24.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 8.D0*aINV**4*
     &    bb1**3*bb2*hm1**2

      A2loop =
     &  + p1q * ( 4.D0*aINV - 8.D0*aINV**3*bb1*bb2 )
      A2loop = A2loop - 4.D0*aINV*qm**2 - 4.D0*aINV*hm1**2 - 12.D0*
     &    aINV**2 + 4.D0*aINV**3*bb2**2*hm2**2 + 8.D0*aINV**3*bb1*bb2*
     &    hm1**2 + 4.D0*aINV**3*bb1**2*hm1**2


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopA1_hcetac = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *A1loop

        return
        end

C------------  loop A2  -------------------------

        double precision function FloopA2_hcetac(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopA2_hcetac/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopA2_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopA2_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopA2_hcetac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopA2_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopA2_hcetac/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
       ! pi=x01aaf()
       pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

            endif

            p1q = (hm1**2-hm2**2)/2.d0

           
      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )

           
      A1loop =
     &  + p1q * ( 32.D0*aINV**3*bb1*bb2**2 - 16.D0*aINV**4*bb1*bb2**3
     &     - 16.D0*aINV**4*bb1**2*bb2**2 )
      A1loop = A1loop - 4.D0*aINV + 16.D0*aINV*bb2*qm**2 + 48.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*qm**2 + 8.D0*aINV**2*bb2**2
     &    *hm2**2 - 8.D0*aINV**2*bb1*bb2*qm**2 + 8.D0*aINV**2*bb1*bb2*
     &    hm1**2 - 32.D0*aINV**3*bb2**2 - 16.D0*aINV**3*bb2**3*hm2**2
     &     - 32.D0*aINV**3*bb1*bb2 - 32.D0*aINV**3*bb1*bb2**2*hm1**2 - 
     &    16.D0*aINV**3*bb1**2*bb2*hm1**2 + 8.D0*aINV**4*bb2**4*hm2**2
     &     + 8.D0*aINV**4*bb1*bb2**3*hm2**2 + 16.D0*aINV**4*bb1*bb2**3*
     &    hm1**2 + 24.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 8.D0*aINV**4*
     &    bb1**3*bb2*hm1**2

      A2loop =
     &  + p1q * ( 4.D0*aINV - 8.D0*aINV**3*bb1*bb2 )
      A2loop = A2loop - 4.D0*aINV*qm**2 - 4.D0*aINV*hm1**2 - 12.D0*
     &    aINV**2 + 4.D0*aINV**3*bb2**2*hm2**2 + 8.D0*aINV**3*bb1*bb2*
     &    hm1**2 + 4.D0*aINV**3*bb1**2*hm1**2


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopA2_hcetac = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *A2loop

        return
        end

C------------  bub1a A2  -----------------

        double precision function Fbub1aA2_hcetac(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1aA2_hcetac/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1aA2_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1aA2_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1aA2_hcetac=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1aA2_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFbub1aA2_hcetac/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

       ! pi=x01aaf()
       pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

           p1q = (hm1**2-hm2**2)/2.d0

           
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
     
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2 + 1.D0/4.D0*ss1*
     &    alp1 )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2 - 1.D0/4.D0*ss1*alp1
     &     )

           
      A1bub1a = 0

      A2bub1a =
     &  + p1q * ( 8.D0*aINV**2*bb1*bb2 )
      A2bub1a = A2bub1a + 4.D0*qm**2 + hm2**2 + 8.D0*aINV - 4.D0*
     &    aINV**2*bb2**2*hm2**2 - 8.D0*aINV**2*bb1*bb2*hm1**2 - 4.D0*
     &    aINV**2*bb1**2*hm1**2

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1aA2_hcetac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *A2bub1a

        return
        end

C------------   bub1b A1  -----------------

        double precision function Fbub1bA1_hcetac(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1bA1_hcetac/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1bA1_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bA1_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1bA1_hcetac=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bA1_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1bA1_hcetac/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p1q = (hm1**2-hm2**2)/2.d0
                 aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
     
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )
           
      A1bub1b =
     &  + ss1 * ( 8.D0*aINV**2*bb2**2*qm**2 + 2.D0*aINV**2*bb2**2*
     &    hm2**2 + 8.D0*aINV**2*bb1*bb2*qm**2 + 2.D0*aINV**2*bb1*bb2*
     &    hm2**2 + 32.D0*aINV**3*bb2**2 + 32.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb2**4*hm2**2 - 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1*bb2**3*hm1**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm1**2 - 8.D0*aINV**4*bb1**3*bb2*hm1**2 )
      A1bub1b = A1bub1b + ss1*p1q * ( 16.D0*aINV**4*bb1*bb2**3 + 16.D0*
     &    aINV**4*bb1**2*bb2**2 )

      A2bub1b =
     &  + ss1 * ( 4.D0*aINV*qm**2 + aINV*hm2**2 + 12.D0*aINV**2 - 4.D0*
     &    aINV**3*bb2**2*hm2**2 - 8.D0*aINV**3*bb1*bb2*hm1**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2 )
      A2bub1b = A2bub1b + ss1*p1q * ( 8.D0*aINV**3*bb1*bb2 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1bA1_hcetac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *A1bub1b

        return
        end

C------------  bub1b A2  -----------------

        double precision function Fbub1bA2_hcetac(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1bA2_hcetac/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1bA2_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bA2_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1bA2_hcetac=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bA2_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1bA2_hcetac/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

      !  pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p1q = (hm1**2-hm2**2)/2.d0
                 aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
     
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )
           
      A1bub1b =
     &  + ss1 * ( 8.D0*aINV**2*bb2**2*qm**2 + 2.D0*aINV**2*bb2**2*
     &    hm2**2 + 8.D0*aINV**2*bb1*bb2*qm**2 + 2.D0*aINV**2*bb1*bb2*
     &    hm2**2 + 32.D0*aINV**3*bb2**2 + 32.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb2**4*hm2**2 - 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1*bb2**3*hm1**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm1**2 - 8.D0*aINV**4*bb1**3*bb2*hm1**2 )
      A1bub1b = A1bub1b + ss1*p1q * ( 16.D0*aINV**4*bb1*bb2**3 + 16.D0*
     &    aINV**4*bb1**2*bb2**2 )

      A2bub1b =
     &  + ss1 * ( 4.D0*aINV*qm**2 + aINV*hm2**2 + 12.D0*aINV**2 - 4.D0*
     &    aINV**3*bb2**2*hm2**2 - 8.D0*aINV**3*bb1*bb2*hm1**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2 )
      A2bub1b = A2bub1b + ss1*p1q * ( 8.D0*aINV**3*bb1*bb2 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1bA2_hcetac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *A2bub1b

        return
        end

C------------  bub2 A1  -----------------

        double precision function Fbub2A1_hcetac(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2A1_hcetac/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2A1_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2A1_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2A1_hcetac=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2A1_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2A1_hcetac/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p1q = (hm1**2-hm2**2)/2.d0
           
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
     
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )

 
           
      A1bub2 =
     &  + ss2 * ( 8.D0*aINV**2*bb2**2*qm**2 + 2.D0*aINV**2*bb2**2*
     &    hm1**2 + 8.D0*aINV**2*bb1*bb2*qm**2 + 2.D0*aINV**2*bb1*bb2*
     &    hm1**2 + 32.D0*aINV**3*bb2**2 + 32.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb2**4*hm2**2 - 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1*bb2**3*hm1**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm1**2 - 8.D0*aINV**4*bb1**3*bb2*hm1**2 )
      A1bub2 = A1bub2 + ss2*p1q * ( 16.D0*aINV**4*bb1*bb2**3 + 16.D0*
     &    aINV**4*bb1**2*bb2**2 )

      A2bub2 =
     &  + ss2 * ( 4.D0*aINV*qm**2 + aINV*hm1**2 + 12.D0*aINV**2 - 4.D0*
     &    aINV**3*bb2**2*hm2**2 - 8.D0*aINV**3*bb1*bb2*hm1**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2 )
      A2bub2 = A2bub2 + ss2*p1q * ( 8.D0*aINV**3*bb1*bb2 )

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2A1_hcetac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *A1bub2

        return
        end

C------------  bub2 A2  -----------------

        double precision function Fbub2A2_hcetac(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2A2_hcetac/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2A2_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2A2_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2A2_hcetac=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2A2_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2A2_hcetac/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

       ! pi=x01aaf()
       pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p1q = (hm1**2-hm2**2)/2.d0
           
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
     
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )

 
           
      A1bub2 =
     &  + ss2 * ( 8.D0*aINV**2*bb2**2*qm**2 + 2.D0*aINV**2*bb2**2*
     &    hm1**2 + 8.D0*aINV**2*bb1*bb2*qm**2 + 2.D0*aINV**2*bb1*bb2*
     &    hm1**2 + 32.D0*aINV**3*bb2**2 + 32.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb2**4*hm2**2 - 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1*bb2**3*hm1**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm1**2 - 8.D0*aINV**4*bb1**3*bb2*hm1**2 )
      A1bub2 = A1bub2 + ss2*p1q * ( 16.D0*aINV**4*bb1*bb2**3 + 16.D0*
     &    aINV**4*bb1**2*bb2**2 )

      A2bub2 =
     &  + ss2 * ( 4.D0*aINV*qm**2 + aINV*hm1**2 + 12.D0*aINV**2 - 4.D0*
     &    aINV**3*bb2**2*hm2**2 - 8.D0*aINV**3*bb1*bb2*hm1**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2 )
      A2bub2 = A2bub2 + ss2*p1q * ( 8.D0*aINV**3*bb1*bb2 )

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2A2_hcetac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *A2bub2

        return
        end

C------------hc-normalization  ----------------------------------

        double precision function Fhc_hcetac(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFhc_hcetac/hhm,sss,qqm1,qqm2
C
        external FFhc_hcetac

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFhc_hcetac,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fhc_hcetac=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFhc_hcetac(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFhc_hcetac/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

       ! pi=x01aaf()
       pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)  
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )

      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



      hc =
     &  + aINV*t * ( qm2**2*w1*w2*alp2 + 2.D0*qm1*qm2*w2**2*alp2 + 2.D0
     &    *qm1*qm2*w1**2*alp1 + qm1**2*w1*w2*alp1 )
      hc = hc + aINV*t*hm**2 * ( w1*w2**3*alp2 + w1**3*w2*alp1 )
      hc = hc + aINV**2*t * ( 6.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*
     &    w1*w2*alp1 + 6.D0*w1**2*alp1 )
      hc = hc + aINV**2*bb*t * (  - qm2**2*w2*alp2 + 2.D0*qm1*qm2*w2*
     &    alp2 - 2.D0*qm1*qm2*w1*alp1 + qm1**2*w1*alp1 )
      hc = hc + aINV**2*bb*t*hm**2 * (  - w2**3*alp2 + 2.D0*w1*w2**2*
     &    alp2 - 2.D0*w1**2*w2*alp1 + w1**3*alp1 )
      hc = hc + aINV**3*bb*t * ( 4.D0*w2*alp2 - 4.D0*w1*alp1 )
      hc = hc + aINV**3*bb**2*t*hm**2 * (  - 2.D0*w2**2*alp2 + w1*w2*
     &    alp2 + w1*w2*alp1 - 2.D0*w1**2*alp1 )
      hc = hc + aINV**4*bb**3*t*hm**2 * (  - w2*alp2 + w1*alp1 )




C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFhc_hcetac = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *hc

        return
        end

C--------  PP-Normalization  ------------------

        double precision function FPP_etacgg(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFPP_etacgg/hhm,sss,qqm1,qqm2
C
        external FFPP_etacgg

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFPP_etacgg,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FPP_etacgg=finval

        return
      deallocate(wrkstr)
        end



C-------------------------------------------------------

        double precision function FFPP_etacgg(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFPP_etacgg/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )


        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFPP_etacgg = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *PP

        return
        end


C------------  VV-normalization  ----------------------------------

        double precision function FVV_etacgg(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFVV_etacgg/hhm,sss,qqm1,qqm2
C
        external FFVV_etacgg

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFVV_etacgg,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FVV_etacgg=finval

        return
      deallocate(wrkstr)
        end




C-------------------------------------------------------

        double precision function FFVV_etacgg(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFVV_etacgg/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )


        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFVV_etacgg = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *VV

        return
        end



C------------  SS-normalization  ----------------------------------

        double precision function FSS_etacgg(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFSS_etacgg/hhm,sss,qqm1,qqm2
C
        external FFSS_etacgg

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFSS_etacgg,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FSS_etacgg=finval

        return
      deallocate(wrkstr)
        end




C-------------------------------------------------------

        double precision function FFSS_etacgg(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFSS_etacgg/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )


        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFSS_etacgg = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Scalar

        return
        end



C------------AA-normalization  ----------------------------------

        double precision function FAA_etacgg(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFAA_etacgg/hhm,sss,qqm1,qqm2
C
        external FFAA_etacgg

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFAA_etacgg,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FAA_etacgg=finval

        return
      deallocate(wrkstr)
        end



C-------------------------------------------------------

        double precision function FFAA_etacgg(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFAA_etacgg/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )


        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFAA_etacgg = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Axial

        return
        end


C------------ TT-normalization  ----------------------------------

        double precision function FTT_etacgg(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFTT_etacgg/hhm,sss,qqm1,qqm2
C
        external FFTT_etacgg

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFTT_etacgg,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FTT_etacgg=finval

        return
      deallocate(wrkstr)
        end




C-------------------------------------------------------

        double precision function FFTT_etacgg(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFTT_etacgg/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)

        
      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )


        
      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFTT_etacgg = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Tensor

        return
        end

C--psi(2S) normalization from file charm_12.f at /Ytt/HQL/ort/ ----

C-------------------norm: V1V1  --------------------------

        double precision function FV1V1_etacgg(hm,ss,qm,CC1)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps
        common/CFV1V1_etacgg/hhm,sss,qqm,CCC1
C
        external FFV1V1_etacgg

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm=qm
        CCC1=CC1

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFV1V1_etacgg,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
        FV1V1_etacgg=finval
C

       return
      deallocate(wrkstr)
        end



C-----------------------------------------------------------

        double precision function FFV1V1_etacgg(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFV1V1_etacgg/hm,ss,qm,CC1
        common/confinement/conf,xlam, pi
C
        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
        alp2=x1

C-----------   exponential  -----


      aa =
     &  + t * ( 1.D0 )
      aa = aa + 2.D0*ss

      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )

C------numerator --------------

      V1V1 =
     &  + CC1 * (  - 12.D0*aINV*qm**2*alp2*t*ss - aINV*hm**2*alp2*t*ss
     &     - 18.D0*aINV**2*alp2*t*ss + 12.D0*aINV**2*bb*qm**2*alp2*t*ss
     &     + 3.D0*aINV**2*bb*hm**2*alp2*t*ss + 6.D0*aINV**2*bb**2*hm**2
     &    *qm**2*alp2*t*ss + 1.D0/2.D0*aINV**2*bb**2*hm**4*alp2*t*ss +
     &    16.D0*aINV**3*bb*alp2*t*ss + 14.D0*aINV**3*bb**2*hm**2*alp2*t
     &    *ss - 4.D0*aINV**3*bb**3*hm**2*qm**2*alp2*t*ss - aINV**3*
     &    bb**3*hm**4*alp2*t*ss - 24.D0*aINV**4*bb**3*hm**2*alp2*t*ss
     &     - 2.D0*aINV**4*bb**4*hm**4*alp2*t*ss + 4.D0*aINV**5*bb**5*
     &    hm**4*alp2*t*ss )
      V1V1 = V1V1 + CC1**2 * ( 18.D0*aINV**2*qm**2*alp2*t*ss**2 + 3.D0/
     &    2.D0*aINV**2*hm**2*alp2*t*ss**2 + 36.D0*aINV**3*alp2*t*ss**2
     &     - 24.D0*aINV**3*bb*qm**2*alp2*t*ss**2 - 6.D0*aINV**3*bb*
     &    hm**2*alp2*t*ss**2 - 18.D0*aINV**3*bb**2*hm**2*qm**2*alp2*t*
     &    ss**2 - 3.D0/2.D0*aINV**3*bb**2*hm**4*alp2*t*ss**2 - 40.D0*
     &    aINV**4*bb*alp2*t*ss**2 - 44.D0*aINV**4*bb**2*hm**2*alp2*t*
     &    ss**2 + 16.D0*aINV**4*bb**3*hm**2*qm**2*alp2*t*ss**2 + 4.D0*
     &    aINV**4*bb**3*hm**4*alp2*t*ss**2 + 3.D0*aINV**4*bb**4*hm**4*
     &    qm**2*alp2*t*ss**2 + 1.D0/4.D0*aINV**4*bb**4*hm**6*alp2*t*
     &    ss**2 + 80.D0*aINV**5*bb**3*hm**2*alp2*t*ss**2 + 13.D0*
     &    aINV**5*bb**4*hm**4*alp2*t*ss**2 - 2.D0*aINV**5*bb**5*hm**4*
     &    qm**2*alp2*t*ss**2 - 1.D0/2.D0*aINV**5*bb**5*hm**6*alp2*t*
     &    ss**2 - 26.D0*aINV**6*bb**5*hm**4*alp2*t*ss**2 - aINV**6*
     &    bb**6*hm**6*alp2*t*ss**2 + 2.D0*aINV**7*bb**7*hm**6*alp2*t*
     &    ss**2 )
      V1V1 = V1V1 + 3.D0*qm**2*alp2*t + 1.D0/4.D0*hm**2*alp2*t + 3.D0*
     &    aINV*alp2*t - 2.D0*aINV*bb*qm**2*alp2*t - 1.D0/2.D0*aINV*bb*
     &    hm**2*alp2*t - 2.D0*aINV**2*bb*alp2*t - aINV**2*bb**2*hm**2*
     &    alp2*t + 2.D0*aINV**3*bb**3*hm**2*alp2*t

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFV1V1_etacgg = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *V1V1

        return
        end
C------------Etac->gg: matrix element FEtacgg_etacgg -----------------

        double precision function FEtacgg_etacgg(hm,ss,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFEtacgg_etacgg/hhm,sss,qqm
        common/accuracy/eps

        external FFEtacgg_etacgg

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm=hm
        sss=ss
        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFEtacgg_etacgg,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FEtacgg_etacgg=finval

        return
      deallocate(wrkstr)
        end


C-------------------------------------------------------

        double precision function FFEtacgg_etacgg(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFEtacgg_etacgg/hm,ss,qm
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           
      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss

       aINV = 1.d0/aa

      bb1 =
     &  + t * (  - alp1 )
      bb1 = bb1 - 1.D0/2.D0*ss

      bb2 =
     &  + t * ( alp3 )
      bb2 = bb2 + 1.D0/2.D0*ss

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm**2 * (  - 1.D0/4.D0*ss )
      z = z + aINV*hm**2 * ( 1.D0/4.D0*ss**2 )
      z = z + aINV*hm**2*t * ( 1.D0/2.D0*ss*alp3 + 1.D0/2.D0*ss*alp1 )
      z = z + aINV*hm**2*t**2 * ( alp1*alp3 )


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFEtacgg_etacgg = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)

        return
        end


























































































******************************************************
C             Normalization
*****************************************************

C--------  PP-Normalization  ------------------

        double precision function FPP_chic1Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFPP_chic1Jpsi/hhm,sss,qqm1,qqm2
C
        external FFPP_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFPP_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FPP_chic1Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFPP_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFPP_chic1Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFPP_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *PP

        return
        end

C------------  VV-normalization  ----------------------------------

        double precision function FVV_chic1Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFVV_chic1Jpsi/hhm,sss,qqm1,qqm2
C
        external FFVV_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFVV_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FVV_chic1Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFVV_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFVV_chic1Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        !pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFVV_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *VV

        return
        end

C------------  SS-normalization  ----------------------------------

        double precision function FSS_chic1Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFSS_chic1Jpsi/hhm,sss,qqm1,qqm2
C
        external FFSS_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFSS_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FSS_chic1Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFSS_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFSS_chic1Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFSS_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Scalar

        return
        end

C------------AA-normalization  ----------------------------------

        double precision function FAA_chic1Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFAA_chic1Jpsi/hhm,sss,qqm1,qqm2
C
        external FFAA_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFAA_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FAA_chic1Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFAA_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFAA_chic1Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFAA_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Axial

        return
        end

C------------ TT-normalization  ----------------------------------

        double precision function FTT_chic1Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFTT_chic1Jpsi/hhm,sss,qqm1,qqm2
C
        external FFTT_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFTT_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FTT_chic1Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFTT_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFTT_chic1Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFTT_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Tensor

        return
        end

C--psi(2S) normalization from file charm_12.f at /Ytt/HQL/ort/ ----

C-------------------norm: V1V1  --------------------------

        double precision function FV1V1_chic1Jpsi(hm,ss,qm,CC1)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps
        common/CFV1V1_chic1Jpsi/hhm,sss,qqm,CCC1
C
        external FFV1V1_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm=qm
        CCC1=CC1

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFV1V1_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
        FV1V1_chic1Jpsi=finval
C

       return
      deallocate(wrkstr)
        end
C-----------------------------------------------------------

        double precision function FFV1V1_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFV1V1_chic1Jpsi/hm,ss,qm,CC1
        common/confinement/conf,xlam, pi
C
        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
        alp2=x1

C-----------   exponential  -----


      aa =
     &  + t * ( 1.D0 )
      aa = aa + 2.D0*ss

      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )

C------numerator --------------

      V1V1 =
     &  + CC1 * (  - 12.D0*aINV*qm**2*alp2*t*ss - aINV*hm**2*alp2*t*ss
     &     - 18.D0*aINV**2*alp2*t*ss + 12.D0*aINV**2*bb*qm**2*alp2*t*ss
     &     + 3.D0*aINV**2*bb*hm**2*alp2*t*ss + 6.D0*aINV**2*bb**2*hm**2
     &    *qm**2*alp2*t*ss + 1.D0/2.D0*aINV**2*bb**2*hm**4*alp2*t*ss +
     &    16.D0*aINV**3*bb*alp2*t*ss + 14.D0*aINV**3*bb**2*hm**2*alp2*t
     &    *ss - 4.D0*aINV**3*bb**3*hm**2*qm**2*alp2*t*ss - aINV**3*
     &    bb**3*hm**4*alp2*t*ss - 24.D0*aINV**4*bb**3*hm**2*alp2*t*ss
     &     - 2.D0*aINV**4*bb**4*hm**4*alp2*t*ss + 4.D0*aINV**5*bb**5*
     &    hm**4*alp2*t*ss )
      V1V1 = V1V1 + CC1**2 * ( 18.D0*aINV**2*qm**2*alp2*t*ss**2 + 3.D0/
     &    2.D0*aINV**2*hm**2*alp2*t*ss**2 + 36.D0*aINV**3*alp2*t*ss**2
     &     - 24.D0*aINV**3*bb*qm**2*alp2*t*ss**2 - 6.D0*aINV**3*bb*
     &    hm**2*alp2*t*ss**2 - 18.D0*aINV**3*bb**2*hm**2*qm**2*alp2*t*
     &    ss**2 - 3.D0/2.D0*aINV**3*bb**2*hm**4*alp2*t*ss**2 - 40.D0*
     &    aINV**4*bb*alp2*t*ss**2 - 44.D0*aINV**4*bb**2*hm**2*alp2*t*
     &    ss**2 + 16.D0*aINV**4*bb**3*hm**2*qm**2*alp2*t*ss**2 + 4.D0*
     &    aINV**4*bb**3*hm**4*alp2*t*ss**2 + 3.D0*aINV**4*bb**4*hm**4*
     &    qm**2*alp2*t*ss**2 + 1.D0/4.D0*aINV**4*bb**4*hm**6*alp2*t*
     &    ss**2 + 80.D0*aINV**5*bb**3*hm**2*alp2*t*ss**2 + 13.D0*
     &    aINV**5*bb**4*hm**4*alp2*t*ss**2 - 2.D0*aINV**5*bb**5*hm**4*
     &    qm**2*alp2*t*ss**2 - 1.D0/2.D0*aINV**5*bb**5*hm**6*alp2*t*
     &    ss**2 - 26.D0*aINV**6*bb**5*hm**4*alp2*t*ss**2 - aINV**6*
     &    bb**6*hm**6*alp2*t*ss**2 + 2.D0*aINV**7*bb**7*hm**6*alp2*t*
     &    ss**2 )
      V1V1 = V1V1 + 3.D0*qm**2*alp2*t + 1.D0/4.D0*hm**2*alp2*t + 3.D0*
     &    aINV*alp2*t - 2.D0*aINV*bb*qm**2*alp2*t - 1.D0/2.D0*aINV*bb*
     &    hm**2*alp2*t - 2.D0*aINV**2*bb*alp2*t - aINV**2*bb**2*hm**2*
     &    alp2*t + 2.D0*aINV**3*bb**3*hm**2*alp2*t

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFV1V1_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *V1V1

         return
         end

C------------C1: matrix element loop W1  ----------------------------------

        double precision function FloopW1_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
        double precision a(3),b(3), acc, finval
        double precision, allocatable :: wrkstr(:)
        
        common/CFloopW1_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopW1_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000
        ifail=0

        ndim = 3
        allocate(wrkstr(lenwrk), stat=ifail)
        if (ifail /= 0) then
            print *, '***Error: Unable to allocate memory for wrkstr in FloopW1_chic1Jpsi'
            FloopW1_chic1Jpsi = 0.0d0
            return
        end if

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW1_chic1Jpsi,eps,acc,
     &          lenwrk,wrkstr,finval,ifail)

        FloopW1_chic1Jpsi=finval
        deallocate(wrkstr)
        return
        end

C-------------------------------------------------------

        double precision function FFloopW1_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW1_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      A1loop =
     &  + hm1**(-1) * (  - 4.D0*qm*p2q + 4.D0*qm**3 - 4.D0*hm2**2*qm )
      A1loop = A1loop + aINV*hm1**(-1) * ( 8.D0*bb2*hm2**2*qm + 8.D0*
     &    bb1*qm*p2q + 8.D0*bb1*hm2**2*qm )
      A1loop = A1loop + aINV**2*hm1**(-1) * (  - 4.D0*bb2**2*hm2**2*qm
     &     - 8.D0*bb1*bb2*qm*p2q - 8.D0*bb1*bb2*hm2**2*qm - 8.D0*bb1**2
     &    *qm*p2q - 4.D0*bb1**2*hm2**2*qm )

      A2loop =
     &  + hm1 * ( 4.D0*qm )
      A2loop = A2loop + aINV*hm1 * (  - 16.D0*bb1*qm )
      A2loop = A2loop + aINV**2*hm1 * ( 16.D0*bb1*bb2*qm + 16.D0*bb1**2
     &    *qm )


      W1loop =
     &  + p2q**(-1) * ( 4.D0*qm**2 + 4.D0*aINV - 4.D0*aINV*bb1*qm**2 - 
     &    12.D0*aINV**2*bb1 - 8.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*
     &    aINV**2*bb1**2*hm2**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D0
     &    *aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*bb1**3*hm2**2 )
      W1loop = W1loop - 4.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.
     &    D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*bb1**3

      W2loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 + 4.D0*aINV**2*bb1*bb2

      W3loop =
     &  + 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2

      W4loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 - 4.D0*aINV**2*bb1**2

      W5loop =
     &  + p2q**(-1) * ( 8.D0*aINV - 4.D0*aINV*bb2*qm**2 + 4.D0*aINV*bb2
     &    *hm2**2 - 4.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*hm2**2 - 12.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*hm2**2 - 12.D0*aINV**2*bb1
     &     - 16.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*aINV**2*bb1**2*hm2**2
     &     + 4.D0*aINV**3*bb2**3*hm2**2 + 12.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 12.D0*aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*
     &    bb1**3*hm2**2 )
      W5loop = W5loop + 4.D0*aINV*bb2 + 8.D0*aINV*bb1 - 4.D0*aINV**2*
     &    bb2**2 - 16.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2 + 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*
     &    bb1**3


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW1_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W1loop

        return
        end

C------------  C1: matrix element bub1 W1  ------------------------------

        double precision function Fbub1W1_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1W1_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1W1_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1W1_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1W1_chic1Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1W1_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1W1_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      A1bub1 =
     &  + aINV*hm1**(-1)*ss1 * ( 4.D0*qm )

      A2bub1 =
     &  + aINV**2*hm1*ss1 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub1 = 0.d0

      W2bub1 = 0.d0

      W3bub1 = 0.d0

      W4bub1 =
     &  + 4.D0*aINV**2*bb1*bb2*ss1 + 4.D0*aINV**2*bb1**2*ss1

      W5bub1 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss1 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1W1_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W1bub1

        return
        end

C--------------- bub2-------------------------------------

C------------  C1: matrix element bub2 W1  ------------------------------

        double precision function Fbub2W1_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W1_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2W1_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W1_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W1_chic1Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W1_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W1_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )

      A1bub2 =
     &  + aINV*hm1**(-1)*ss2 * ( 4.D0*qm )

      A2bub2 =
     &  + aINV**2*hm1*ss2 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )

      W2bub2 = 0.d0

      W3bub2 = 0.d0

      W4bub2 =
     &  - 4.D0*aINV**2*bb2**2*ss2 - 4.D0*aINV**2*bb1*bb2*ss2

      W5bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W1_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W1bub2

        return
        end

c      WW2

C------------C1: matrix element loop W2  ----------------------------------

        double precision function FloopW2_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW2_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopW2_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW2_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW2_chic1Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW2_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW2_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      A1loop =
     &  + hm1**(-1) * (  - 4.D0*qm*p2q + 4.D0*qm**3 - 4.D0*hm2**2*qm )
      A1loop = A1loop + aINV*hm1**(-1) * ( 8.D0*bb2*hm2**2*qm + 8.D0*
     &    bb1*qm*p2q + 8.D0*bb1*hm2**2*qm )
      A1loop = A1loop + aINV**2*hm1**(-1) * (  - 4.D0*bb2**2*hm2**2*qm
     &     - 8.D0*bb1*bb2*qm*p2q - 8.D0*bb1*bb2*hm2**2*qm - 8.D0*bb1**2
     &    *qm*p2q - 4.D0*bb1**2*hm2**2*qm )

      A2loop =
     &  + hm1 * ( 4.D0*qm )
      A2loop = A2loop + aINV*hm1 * (  - 16.D0*bb1*qm )
      A2loop = A2loop + aINV**2*hm1 * ( 16.D0*bb1*bb2*qm + 16.D0*bb1**2
     &    *qm )


      W1loop =
     &  + p2q**(-1) * ( 4.D0*qm**2 + 4.D0*aINV - 4.D0*aINV*bb1*qm**2 - 
     &    12.D0*aINV**2*bb1 - 8.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*
     &    aINV**2*bb1**2*hm2**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D0
     &    *aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*bb1**3*hm2**2 )
      W1loop = W1loop - 4.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.
     &    D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*bb1**3

      W2loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 + 4.D0*aINV**2*bb1*bb2

      W3loop =
     &  + 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2

      W4loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 - 4.D0*aINV**2*bb1**2

      W5loop =
     &  + p2q**(-1) * ( 8.D0*aINV - 4.D0*aINV*bb2*qm**2 + 4.D0*aINV*bb2
     &    *hm2**2 - 4.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*hm2**2 - 12.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*hm2**2 - 12.D0*aINV**2*bb1
     &     - 16.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*aINV**2*bb1**2*hm2**2
     &     + 4.D0*aINV**3*bb2**3*hm2**2 + 12.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 12.D0*aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*
     &    bb1**3*hm2**2 )
      W5loop = W5loop + 4.D0*aINV*bb2 + 8.D0*aINV*bb1 - 4.D0*aINV**2*
     &    bb2**2 - 16.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2 + 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*
     &    bb1**3




       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW2_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W2loop

        return
        end

C------------  C1: matrix element bub1 W2  ------------------------------

        double precision function Fbub1W2_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1W2_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1W2_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1W2_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1W2_chic1Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1W2_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1W2_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      A1bub1 =
     &  + aINV*hm1**(-1)*ss1 * ( 4.D0*qm )

      A2bub1 =
     &  + aINV**2*hm1*ss1 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub1 = 0.d0

      W2bub1 = 0.d0

      W3bub1 = 0.d0

      W4bub1 =
     &  + 4.D0*aINV**2*bb1*bb2*ss1 + 4.D0*aINV**2*bb1**2*ss1

      W5bub1 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss1 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1W2_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W2bub1

        return
        end

C--------------- bub2-------------------------------------

C------------  C1: matrix element bub2 W2  ------------------------------

        double precision function Fbub2W2_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W2_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2W2_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W2_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W2_chic1Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W2_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W2_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )

      A1bub2 =
     &  + aINV*hm1**(-1)*ss2 * ( 4.D0*qm )

      A2bub2 =
     &  + aINV**2*hm1*ss2 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )

      W2bub2 = 0.d0

      W3bub2 = 0.d0

      W4bub2 =
     &  - 4.D0*aINV**2*bb2**2*ss2 - 4.D0*aINV**2*bb1*bb2*ss2

      W5bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W2_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W2bub2

        return
        end

C  WW3

C------------C1: matrix element loop W3  ----------------------------------

        double precision function FloopW3_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW3_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopW3_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW3_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW3_chic1Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW3_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW3_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

        endif

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      A1loop =
     &  + hm1**(-1) * (  - 4.D0*qm*p2q + 4.D0*qm**3 - 4.D0*hm2**2*qm )
      A1loop = A1loop + aINV*hm1**(-1) * ( 8.D0*bb2*hm2**2*qm + 8.D0*
     &    bb1*qm*p2q + 8.D0*bb1*hm2**2*qm )
      A1loop = A1loop + aINV**2*hm1**(-1) * (  - 4.D0*bb2**2*hm2**2*qm
     &     - 8.D0*bb1*bb2*qm*p2q - 8.D0*bb1*bb2*hm2**2*qm - 8.D0*bb1**2
     &    *qm*p2q - 4.D0*bb1**2*hm2**2*qm )

      A2loop =
     &  + hm1 * ( 4.D0*qm )
      A2loop = A2loop + aINV*hm1 * (  - 16.D0*bb1*qm )
      A2loop = A2loop + aINV**2*hm1 * ( 16.D0*bb1*bb2*qm + 16.D0*bb1**2
     &    *qm )


      W1loop =
     &  + p2q**(-1) * ( 4.D0*qm**2 + 4.D0*aINV - 4.D0*aINV*bb1*qm**2 - 
     &    12.D0*aINV**2*bb1 - 8.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*
     &    aINV**2*bb1**2*hm2**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D0
     &    *aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*bb1**3*hm2**2 )
      W1loop = W1loop - 4.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.
     &    D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*bb1**3

      W2loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 + 4.D0*aINV**2*bb1*bb2

      W3loop =
     &  + 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2

      W4loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 - 4.D0*aINV**2*bb1**2

      W5loop =
     &  + p2q**(-1) * ( 8.D0*aINV - 4.D0*aINV*bb2*qm**2 + 4.D0*aINV*bb2
     &    *hm2**2 - 4.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*hm2**2 - 12.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*hm2**2 - 12.D0*aINV**2*bb1
     &     - 16.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*aINV**2*bb1**2*hm2**2
     &     + 4.D0*aINV**3*bb2**3*hm2**2 + 12.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 12.D0*aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*
     &    bb1**3*hm2**2 )
      W5loop = W5loop + 4.D0*aINV*bb2 + 8.D0*aINV*bb1 - 4.D0*aINV**2*
     &    bb2**2 - 16.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2 + 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*
     &    bb1**3




       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW3_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W3loop

        return
        end

C------------  C1: matrix element bub1 W3  ------------------------------

        double precision function Fbub1W3_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1W3_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1W3_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1W3_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1W3_chic1Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1W3_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1W3_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)
           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      A1bub1 =
     &  + aINV*hm1**(-1)*ss1 * ( 4.D0*qm )

      A2bub1 =
     &  + aINV**2*hm1*ss1 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub1 = 0.d0

      W2bub1 = 0.d0

      W3bub1 = 0.d0

      W4bub1 =
     &  + 4.D0*aINV**2*bb1*bb2*ss1 + 4.D0*aINV**2*bb1**2*ss1

      W5bub1 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss1 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1W3_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W3bub1

        return
        end

C--------------- bub2-------------------------------------

C------------  C1: matrix element bub2 W3  ------------------------------

        double precision function Fbub2W3_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W3_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2W3_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W3_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W3_chic1Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W3_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W3_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)
           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )

      A1bub2 =
     &  + aINV*hm1**(-1)*ss2 * ( 4.D0*qm )

      A2bub2 =
     &  + aINV**2*hm1*ss2 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )

      W2bub2 = 0.d0

      W3bub2 = 0.d0

      W4bub2 =
     &  - 4.D0*aINV**2*bb2**2*ss2 - 4.D0*aINV**2*bb1*bb2*ss2

      W5bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W3_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W3bub2

        return
        end

C      WW4

C------------C1: matrix element loop W4  ----------------------------------

        double precision function FloopW4_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW4_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopW4_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW4_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW4_chic1Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW4_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW4_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif
           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      A1loop =
     &  + hm1**(-1) * (  - 4.D0*qm*p2q + 4.D0*qm**3 - 4.D0*hm2**2*qm )
      A1loop = A1loop + aINV*hm1**(-1) * ( 8.D0*bb2*hm2**2*qm + 8.D0*
     &    bb1*qm*p2q + 8.D0*bb1*hm2**2*qm )
      A1loop = A1loop + aINV**2*hm1**(-1) * (  - 4.D0*bb2**2*hm2**2*qm
     &     - 8.D0*bb1*bb2*qm*p2q - 8.D0*bb1*bb2*hm2**2*qm - 8.D0*bb1**2
     &    *qm*p2q - 4.D0*bb1**2*hm2**2*qm )

      A2loop =
     &  + hm1 * ( 4.D0*qm )
      A2loop = A2loop + aINV*hm1 * (  - 16.D0*bb1*qm )
      A2loop = A2loop + aINV**2*hm1 * ( 16.D0*bb1*bb2*qm + 16.D0*bb1**2
     &    *qm )


      W1loop =
     &  + p2q**(-1) * ( 4.D0*qm**2 + 4.D0*aINV - 4.D0*aINV*bb1*qm**2 - 
     &    12.D0*aINV**2*bb1 - 8.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*
     &    aINV**2*bb1**2*hm2**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D0
     &    *aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*bb1**3*hm2**2 )
      W1loop = W1loop - 4.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.
     &    D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*bb1**3

      W2loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 + 4.D0*aINV**2*bb1*bb2

      W3loop =
     &  + 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2

      W4loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 - 4.D0*aINV**2*bb1**2

      W5loop =
     &  + p2q**(-1) * ( 8.D0*aINV - 4.D0*aINV*bb2*qm**2 + 4.D0*aINV*bb2
     &    *hm2**2 - 4.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*hm2**2 - 12.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*hm2**2 - 12.D0*aINV**2*bb1
     &     - 16.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*aINV**2*bb1**2*hm2**2
     &     + 4.D0*aINV**3*bb2**3*hm2**2 + 12.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 12.D0*aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*
     &    bb1**3*hm2**2 )
      W5loop = W5loop + 4.D0*aINV*bb2 + 8.D0*aINV*bb1 - 4.D0*aINV**2*
     &    bb2**2 - 16.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2 + 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*
     &    bb1**3




       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW4_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W4loop

        return
        end

C------------  C1: matrix element bub1 W4  ------------------------------

        double precision function Fbub1W4_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1W4_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1W4_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1W4_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1W4_chic1Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1W4_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1W4_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)
           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      A1bub1 =
     &  + aINV*hm1**(-1)*ss1 * ( 4.D0*qm )

      A2bub1 =
     &  + aINV**2*hm1*ss1 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub1 = 0.d0

      W2bub1 = 0.d0

      W3bub1 = 0.d0

      W4bub1 =
     &  + 4.D0*aINV**2*bb1*bb2*ss1 + 4.D0*aINV**2*bb1**2*ss1

      W5bub1 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss1 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1W4_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W4bub1

        return
        end

C--------------- bub2-------------------------------------

C------------  C1: matrix element bub2 W4  ------------------------------

        double precision function Fbub2W4_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W4_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2W4_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W4_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W4_chic1Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W4_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W4_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)
           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )

      A1bub2 =
     &  + aINV*hm1**(-1)*ss2 * ( 4.D0*qm )

      A2bub2 =
     &  + aINV**2*hm1*ss2 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )

      W2bub2 = 0.d0

      W3bub2 = 0.d0

      W4bub2 =
     &  - 4.D0*aINV**2*bb2**2*ss2 - 4.D0*aINV**2*bb1*bb2*ss2

      W5bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W4_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W4bub2

        return
        end

C      WW5

C------------C1: matrix element loop W5  ----------------------------------

        double precision function FloopW5_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW5_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopW5_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW5_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW5_chic1Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW5_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW5_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif
           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      A1loop =
     &  + hm1**(-1) * (  - 4.D0*qm*p2q + 4.D0*qm**3 - 4.D0*hm2**2*qm )
      A1loop = A1loop + aINV*hm1**(-1) * ( 8.D0*bb2*hm2**2*qm + 8.D0*
     &    bb1*qm*p2q + 8.D0*bb1*hm2**2*qm )
      A1loop = A1loop + aINV**2*hm1**(-1) * (  - 4.D0*bb2**2*hm2**2*qm
     &     - 8.D0*bb1*bb2*qm*p2q - 8.D0*bb1*bb2*hm2**2*qm - 8.D0*bb1**2
     &    *qm*p2q - 4.D0*bb1**2*hm2**2*qm )

      A2loop =
     &  + hm1 * ( 4.D0*qm )
      A2loop = A2loop + aINV*hm1 * (  - 16.D0*bb1*qm )
      A2loop = A2loop + aINV**2*hm1 * ( 16.D0*bb1*bb2*qm + 16.D0*bb1**2
     &    *qm )


      W1loop =
     &  + p2q**(-1) * ( 4.D0*qm**2 + 4.D0*aINV - 4.D0*aINV*bb1*qm**2 - 
     &    12.D0*aINV**2*bb1 - 8.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*
     &    aINV**2*bb1**2*hm2**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D0
     &    *aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*bb1**3*hm2**2 )
      W1loop = W1loop - 4.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.
     &    D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*bb1**3

      W2loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 + 4.D0*aINV**2*bb1*bb2

      W3loop =
     &  + 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2

      W4loop =
     &  - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 - 4.D0*aINV**2*bb1**2

      W5loop =
     &  + p2q**(-1) * ( 8.D0*aINV - 4.D0*aINV*bb2*qm**2 + 4.D0*aINV*bb2
     &    *hm2**2 - 4.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*hm2**2 - 12.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*hm2**2 - 12.D0*aINV**2*bb1
     &     - 16.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*aINV**2*bb1**2*hm2**2
     &     + 4.D0*aINV**3*bb2**3*hm2**2 + 12.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 12.D0*aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*
     &    bb1**3*hm2**2 )
      W5loop = W5loop + 4.D0*aINV*bb2 + 8.D0*aINV*bb1 - 4.D0*aINV**2*
     &    bb2**2 - 16.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2 + 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*
     &    bb1**3




       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW5_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W5loop

        return
        end

C------------  C1: matrix element bub1 W5  ------------------------------

        double precision function Fbub1W5_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1W5_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1W5_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1W5_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1W5_chic1Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1W5_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1W5_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)
           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      A1bub1 =
     &  + aINV*hm1**(-1)*ss1 * ( 4.D0*qm )

      A2bub1 =
     &  + aINV**2*hm1*ss1 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub1 = 0.d0

      W2bub1 = 0.d0

      W3bub1 = 0.d0

      W4bub1 =
     &  + 4.D0*aINV**2*bb1*bb2*ss1 + 4.D0*aINV**2*bb1**2*ss1

      W5bub1 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss1 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1W5_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W5bub1

        return
        end

C--------------- bub2-------------------------------------

C------------  C1: matrix element bub2 W5  ------------------------------

        double precision function Fbub2W5_chic1Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W5_chic1Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2W5_chic1Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W5_chic1Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W5_chic1Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W5_chic1Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W5_chic1Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)
           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )

      A1bub2 =
     &  + aINV*hm1**(-1)*ss2 * ( 4.D0*qm )

      A2bub2 =
     &  + aINV**2*hm1*ss2 * (  - 8.D0*bb1*bb2*qm - 8.D0*bb1**2*qm )


      W1bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )

      W2bub2 = 0.d0

      W3bub2 = 0.d0

      W4bub2 =
     &  - 4.D0*aINV**2*bb2**2*ss2 - 4.D0*aINV**2*bb1*bb2*ss2

      W5bub2 =
     &  + p2q**(-1) * (  - 2.D0*aINV*ss2 )



       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W5_chic1Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W5bub2

        return
        end





































******************************************************
C             Normalization
*****************************************************

C--------  PP-Normalization  ------------------

        double precision function FPP_chic2Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFPP_chic2Jpsi/hhm,sss,qqm1,qqm2
C
        external FFPP_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFPP_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FPP_chic2Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFPP_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFPP_chic2Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFPP_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *PP

        return
        end

C------------  VV-normalization  ----------------------------------

        double precision function FVV_chic2Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFVV_chic2Jpsi/hhm,sss,qqm1,qqm2
C
        external FFVV_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFVV_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FVV_chic2Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFVV_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFVV_chic2Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFVV_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *VV

        return
        end

C------------  SS-normalization  ----------------------------------

        double precision function FSS_chic2Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFSS_chic2Jpsi/hhm,sss,qqm1,qqm2
C
        external FFSS_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFSS_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FSS_chic2Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFSS_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFSS_chic2Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFSS_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Scalar

        return
        end

C------------AA-normalization  ----------------------------------

        double precision function FAA_chic2Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFAA_chic2Jpsi/hhm,sss,qqm1,qqm2
C
        external FFAA_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFAA_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FAA_chic2Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFAA_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFAA_chic2Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFAA_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Axial

        return
        end

C------------ TT-normalization  ----------------------------------

        double precision function FTT_chic2Jpsi(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFTT_chic2Jpsi/hhm,sss,qqm1,qqm2
C
        external FFTT_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFTT_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FTT_chic2Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFTT_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFTT_chic2Jpsi/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFTT_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Tensor

        return
        end

C--psi(2S) normalization from file charm_12.f at /Ytt/HQL/ort/ ----

C-------------------norm: V1V1  --------------------------

        double precision function FV1V1_chic2Jpsi(hm,ss,qm,CC1)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps
        common/CFV1V1_chic2Jpsi/hhm,sss,qqm,CCC1
C
        external FFV1V1_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm=qm
        CCC1=CC1

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFV1V1_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
        FV1V1_chic2Jpsi=finval
C

       return
      deallocate(wrkstr)
        end
C-----------------------------------------------------------

        double precision function FFV1V1_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFV1V1_chic2Jpsi/hm,ss,qm,CC1
        common/confinement/conf,xlam, pi
C
        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
        alp2=x1

C-----------   exponential  -----


      aa =
     &  + t * ( 1.D0 )
      aa = aa + 2.D0*ss

      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )

C------numerator --------------

      V1V1 =
     &  + CC1 * (  - 12.D0*aINV*qm**2*alp2*t*ss - aINV*hm**2*alp2*t*ss
     &     - 18.D0*aINV**2*alp2*t*ss + 12.D0*aINV**2*bb*qm**2*alp2*t*ss
     &     + 3.D0*aINV**2*bb*hm**2*alp2*t*ss + 6.D0*aINV**2*bb**2*hm**2
     &    *qm**2*alp2*t*ss + 1.D0/2.D0*aINV**2*bb**2*hm**4*alp2*t*ss +
     &    16.D0*aINV**3*bb*alp2*t*ss + 14.D0*aINV**3*bb**2*hm**2*alp2*t
     &    *ss - 4.D0*aINV**3*bb**3*hm**2*qm**2*alp2*t*ss - aINV**3*
     &    bb**3*hm**4*alp2*t*ss - 24.D0*aINV**4*bb**3*hm**2*alp2*t*ss
     &     - 2.D0*aINV**4*bb**4*hm**4*alp2*t*ss + 4.D0*aINV**5*bb**5*
     &    hm**4*alp2*t*ss )
      V1V1 = V1V1 + CC1**2 * ( 18.D0*aINV**2*qm**2*alp2*t*ss**2 + 3.D0/
     &    2.D0*aINV**2*hm**2*alp2*t*ss**2 + 36.D0*aINV**3*alp2*t*ss**2
     &     - 24.D0*aINV**3*bb*qm**2*alp2*t*ss**2 - 6.D0*aINV**3*bb*
     &    hm**2*alp2*t*ss**2 - 18.D0*aINV**3*bb**2*hm**2*qm**2*alp2*t*
     &    ss**2 - 3.D0/2.D0*aINV**3*bb**2*hm**4*alp2*t*ss**2 - 40.D0*
     &    aINV**4*bb*alp2*t*ss**2 - 44.D0*aINV**4*bb**2*hm**2*alp2*t*
     &    ss**2 + 16.D0*aINV**4*bb**3*hm**2*qm**2*alp2*t*ss**2 + 4.D0*
     &    aINV**4*bb**3*hm**4*alp2*t*ss**2 + 3.D0*aINV**4*bb**4*hm**4*
     &    qm**2*alp2*t*ss**2 + 1.D0/4.D0*aINV**4*bb**4*hm**6*alp2*t*
     &    ss**2 + 80.D0*aINV**5*bb**3*hm**2*alp2*t*ss**2 + 13.D0*
     &    aINV**5*bb**4*hm**4*alp2*t*ss**2 - 2.D0*aINV**5*bb**5*hm**4*
     &    qm**2*alp2*t*ss**2 - 1.D0/2.D0*aINV**5*bb**5*hm**6*alp2*t*
     &    ss**2 - 26.D0*aINV**6*bb**5*hm**4*alp2*t*ss**2 - aINV**6*
     &    bb**6*hm**6*alp2*t*ss**2 + 2.D0*aINV**7*bb**7*hm**6*alp2*t*
     &    ss**2 )
      V1V1 = V1V1 + 3.D0*qm**2*alp2*t + 1.D0/4.D0*hm**2*alp2*t + 3.D0*
     &    aINV*alp2*t - 2.D0*aINV*bb*qm**2*alp2*t - 1.D0/2.D0*aINV*bb*
     &    hm**2*alp2*t - 2.D0*aINV**2*bb*alp2*t - aINV**2*bb**2*hm**2*
     &    alp2*t + 2.D0*aINV**3*bb**3*hm**2*alp2*t

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFV1V1_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *V1V1

         return
         end

C------------ chiC2: matrix element loop W1  -------------------------

        double precision function FloopW1_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW1_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopW1_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW1_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW1_chic2Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW1_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW1_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

            endif

            p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


C   checkC2 = 0;


      W1loop =
     &  - 32.D0*aINV**3*bb1*bb2**2 + 32.D0*aINV**4*bb1*bb2**3 + 32.D0*
     &    aINV**4*bb1**2*bb2**2

      W2loop =
     &  + p2q * (  - 16.D0*aINV**3*bb1*bb2**2 + 8.D0*aINV**4*bb1*bb2**3
     &     + 8.D0*aINV**4*bb1**2*bb2**2 )
      W2loop = W2loop + 8.D0*aINV*bb2*qm**2 + 8.D0*aINV**2*bb2 - 4.D0*
     &    aINV**2*bb2**2*qm**2 + 4.D0*aINV**2*bb2**2*hm2**2 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 + 4.D0*aINV**2*bb1*bb2*hm1**2 - 8.D0*
     &    aINV**3*bb2**3*hm2**2 - 16.D0*aINV**3*bb1*bb2**2*hm2**2 - 8.D0
     &    *aINV**3*bb1**2*bb2*hm1**2 + 4.D0*aINV**4*bb2**4*hm2**2 + 12.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop - 4.D0*aINV*bb2*qm**2 - 8.D0*aINV**2*bb2 - 4.D0*
     &    aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1*bb2*qm**2 + 4.D0*
     &    aINV**3*bb2**3*hm2**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1*bb2**3 )
      W4loop = W4loop + 8.D0*aINV*bb2*qm**2 + 8.D0*aINV**2*bb2 + 8.D0*
     &    aINV**2*bb2**2*qm**2 + 8.D0*aINV**2*bb1*bb2*hm1**2 + 16.D0*
     &    aINV**3*bb2**2 + 8.D0*aINV**3*bb2**3*hm2**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb2**4*hm2**2 - 16.D0*
     &    aINV**4*bb1*bb2**3*hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb2 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2




       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW1_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W1loop

        return
        end

C------------ chiC2: matrix element loop W2  -------------------------

        double precision function FloopW2_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW2_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopW2_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW2_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW2_chic2Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW2_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW2_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

            endif

            p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


C   checkC2 = 0;


      W1loop =
     &  - 32.D0*aINV**3*bb1*bb2**2 + 32.D0*aINV**4*bb1*bb2**3 + 32.D0*
     &    aINV**4*bb1**2*bb2**2

      W2loop =
     &  + p2q * (  - 16.D0*aINV**3*bb1*bb2**2 + 8.D0*aINV**4*bb1*bb2**3
     &     + 8.D0*aINV**4*bb1**2*bb2**2 )
      W2loop = W2loop + 8.D0*aINV*bb2*qm**2 + 8.D0*aINV**2*bb2 - 4.D0*
     &    aINV**2*bb2**2*qm**2 + 4.D0*aINV**2*bb2**2*hm2**2 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 + 4.D0*aINV**2*bb1*bb2*hm1**2 - 8.D0*
     &    aINV**3*bb2**3*hm2**2 - 16.D0*aINV**3*bb1*bb2**2*hm2**2 - 8.D0
     &    *aINV**3*bb1**2*bb2*hm1**2 + 4.D0*aINV**4*bb2**4*hm2**2 + 12.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop - 4.D0*aINV*bb2*qm**2 - 8.D0*aINV**2*bb2 - 4.D0*
     &    aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1*bb2*qm**2 + 4.D0*
     &    aINV**3*bb2**3*hm2**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1*bb2**3 )
      W4loop = W4loop + 8.D0*aINV*bb2*qm**2 + 8.D0*aINV**2*bb2 + 8.D0*
     &    aINV**2*bb2**2*qm**2 + 8.D0*aINV**2*bb1*bb2*hm1**2 + 16.D0*
     &    aINV**3*bb2**2 + 8.D0*aINV**3*bb2**3*hm2**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb2**4*hm2**2 - 16.D0*
     &    aINV**4*bb1*bb2**3*hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb2 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2




       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW2_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W2loop

        return
        end

C------------ chiC2: matrix element loop W3  -------------------------

        double precision function FloopW3_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW3_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopW3_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW3_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW3_chic2Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW3_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW3_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

            endif

            p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


C   checkC2 = 0;


      W1loop =
     &  - 32.D0*aINV**3*bb1*bb2**2 + 32.D0*aINV**4*bb1*bb2**3 + 32.D0*
     &    aINV**4*bb1**2*bb2**2

      W2loop =
     &  + p2q * (  - 16.D0*aINV**3*bb1*bb2**2 + 8.D0*aINV**4*bb1*bb2**3
     &     + 8.D0*aINV**4*bb1**2*bb2**2 )
      W2loop = W2loop + 8.D0*aINV*bb2*qm**2 + 8.D0*aINV**2*bb2 - 4.D0*
     &    aINV**2*bb2**2*qm**2 + 4.D0*aINV**2*bb2**2*hm2**2 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 + 4.D0*aINV**2*bb1*bb2*hm1**2 - 8.D0*
     &    aINV**3*bb2**3*hm2**2 - 16.D0*aINV**3*bb1*bb2**2*hm2**2 - 8.D0
     &    *aINV**3*bb1**2*bb2*hm1**2 + 4.D0*aINV**4*bb2**4*hm2**2 + 12.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop - 4.D0*aINV*bb2*qm**2 - 8.D0*aINV**2*bb2 - 4.D0*
     &    aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1*bb2*qm**2 + 4.D0*
     &    aINV**3*bb2**3*hm2**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1*bb2**3 )
      W4loop = W4loop + 8.D0*aINV*bb2*qm**2 + 8.D0*aINV**2*bb2 + 8.D0*
     &    aINV**2*bb2**2*qm**2 + 8.D0*aINV**2*bb1*bb2*hm1**2 + 16.D0*
     &    aINV**3*bb2**2 + 8.D0*aINV**3*bb2**3*hm2**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb2**4*hm2**2 - 16.D0*
     &    aINV**4*bb1*bb2**3*hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb2 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2




       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW3_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W3loop

        return
        end

C------------ chiC2: matrix element loop W4  -------------------------

        double precision function FloopW4_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW4_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopW4_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW4_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW4_chic2Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW4_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW4_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

            endif

            p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


C   checkC2 = 0;


      W1loop =
     &  - 32.D0*aINV**3*bb1*bb2**2 + 32.D0*aINV**4*bb1*bb2**3 + 32.D0*
     &    aINV**4*bb1**2*bb2**2

      W2loop =
     &  + p2q * (  - 16.D0*aINV**3*bb1*bb2**2 + 8.D0*aINV**4*bb1*bb2**3
     &     + 8.D0*aINV**4*bb1**2*bb2**2 )
      W2loop = W2loop + 8.D0*aINV*bb2*qm**2 + 8.D0*aINV**2*bb2 - 4.D0*
     &    aINV**2*bb2**2*qm**2 + 4.D0*aINV**2*bb2**2*hm2**2 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 + 4.D0*aINV**2*bb1*bb2*hm1**2 - 8.D0*
     &    aINV**3*bb2**3*hm2**2 - 16.D0*aINV**3*bb1*bb2**2*hm2**2 - 8.D0
     &    *aINV**3*bb1**2*bb2*hm1**2 + 4.D0*aINV**4*bb2**4*hm2**2 + 12.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop - 4.D0*aINV*bb2*qm**2 - 8.D0*aINV**2*bb2 - 4.D0*
     &    aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1*bb2*qm**2 + 4.D0*
     &    aINV**3*bb2**3*hm2**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1*bb2**3 )
      W4loop = W4loop + 8.D0*aINV*bb2*qm**2 + 8.D0*aINV**2*bb2 + 8.D0*
     &    aINV**2*bb2**2*qm**2 + 8.D0*aINV**2*bb1*bb2*hm1**2 + 16.D0*
     &    aINV**3*bb2**2 + 8.D0*aINV**3*bb2**3*hm2**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb2**4*hm2**2 - 16.D0*
     &    aINV**4*bb1*bb2**3*hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb2 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2




       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW4_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W4loop

        return
        end

C------------ chiC2: matrix element loop W5  -------------------------

        double precision function FloopW5_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW5_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps

        external FFloopW5_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW5_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW5_chic2Jpsi=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW5_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW5_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi
C
        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

            endif

            p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


C   checkC2 = 0;


      W1loop =
     &  - 32.D0*aINV**3*bb1*bb2**2 + 32.D0*aINV**4*bb1*bb2**3 + 32.D0*
     &    aINV**4*bb1**2*bb2**2

      W2loop =
     &  + p2q * (  - 16.D0*aINV**3*bb1*bb2**2 + 8.D0*aINV**4*bb1*bb2**3
     &     + 8.D0*aINV**4*bb1**2*bb2**2 )
      W2loop = W2loop + 8.D0*aINV*bb2*qm**2 + 8.D0*aINV**2*bb2 - 4.D0*
     &    aINV**2*bb2**2*qm**2 + 4.D0*aINV**2*bb2**2*hm2**2 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 + 4.D0*aINV**2*bb1*bb2*hm1**2 - 8.D0*
     &    aINV**3*bb2**3*hm2**2 - 16.D0*aINV**3*bb1*bb2**2*hm2**2 - 8.D0
     &    *aINV**3*bb1**2*bb2*hm1**2 + 4.D0*aINV**4*bb2**4*hm2**2 + 12.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop - 4.D0*aINV*bb2*qm**2 - 8.D0*aINV**2*bb2 - 4.D0*
     &    aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1*bb2*qm**2 + 4.D0*
     &    aINV**3*bb2**3*hm2**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1*bb2**3 )
      W4loop = W4loop + 8.D0*aINV*bb2*qm**2 + 8.D0*aINV**2*bb2 + 8.D0*
     &    aINV**2*bb2**2*qm**2 + 8.D0*aINV**2*bb1*bb2*hm1**2 + 16.D0*
     &    aINV**3*bb2**2 + 8.D0*aINV**3*bb2**3*hm2**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb2**4*hm2**2 - 16.D0*
     &    aINV**4*bb1*bb2**3*hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb2 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2




       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW5_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W5loop

        return
        end

C--------------- chiC2: bub1a --------------------------------

C------------  chiC2: matrix element bub1a W3  -----------------

        double precision function Fbub1aW3_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1aW3_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1aW3_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1aW3_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1aW3_chic2Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1aW3_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFbub1aW3_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2 + 1.D0/4.D0*ss1*
     &    alp1 )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2 - 1.D0/4.D0*ss1*alp1
     &     )

C   checkC2 = 0;


      W1bub1a = 0.d0

      W2bub1a = 0.d0

      W3bub1a =
     &  - 4.D0*aINV**2*bb1*bb2

      W4bub1a = 0.d0

      W5bub1a =
     &  + p2q * (  - 4.D0*aINV**2*bb1*bb2 )
      W5bub1a = W5bub1a + 2.D0*qm**2 + 1.D0/2.D0*hm2**2 + 2.D0*aINV - 2.
     &    D0*aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 - 2.D0
     &    *aINV**2*bb1**2*hm1**2


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1aW3_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W3bub1a

        return
        end

C------------  chiC2: matrix element bub1a W5  ------------------------------

        double precision function Fbub1aW5_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1aW5_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1aW5_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1aW5_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1aW5_chic2Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1aW5_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFbub1aW5_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2 + 1.D0/4.D0*ss1*
     &    alp1 )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2 - 1.D0/4.D0*ss1*alp1
     &     )

C   checkC2 = 0;


      W1bub1a = 0.d0

      W2bub1a = 0.d0

      W3bub1a =
     &  - 4.D0*aINV**2*bb1*bb2

      W4bub1a = 0.d0

      W5bub1a =
     &  + p2q * (  - 4.D0*aINV**2*bb1*bb2 )
      W5bub1a = W5bub1a + 2.D0*qm**2 + 1.D0/2.D0*hm2**2 + 2.D0*aINV - 2.
     &    D0*aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 - 2.D0
     &    *aINV**2*bb1**2*hm1**2


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1aW5_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W5bub1a

        return
        end

C---------------chiC2: bub1b --------------------------------

C------------  chiC2: matrix element bub1b W1  -----------------

        double precision function Fbub1bW1_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1bW1_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1bW1_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW1_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1bW1_chic2Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW1_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1bW1_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


C     checkC2 = 0;


      W1bub1b =
     &  - 16.D0*aINV**4*bb1*bb2**3*ss1 - 16.D0*aINV**4*bb1**2*bb2**2*
     &    ss1

      W2bub1b =
     &  + p2q * (  - 8.D0*aINV**4*bb1*bb2**3*ss1 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*ss1 )
      W2bub1b = W2bub1b + 4.D0*aINV**2*bb2**2*ss1*qm**2 + aINV**2*
     &    bb2**2*ss1*hm2**2 + 4.D0*aINV**2*bb1*bb2*ss1*qm**2 + aINV**2*
     &    bb1*bb2*ss1*hm2**2 + 8.D0*aINV**3*bb2**2*ss1 + 8.D0*aINV**3*
     &    bb1*bb2*ss1 - 4.D0*aINV**4*bb2**4*ss1*hm2**2 - 12.D0*aINV**4*
     &    bb1*bb2**3*ss1*hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*ss1*hm2**2
     &     - 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*ss1 - 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*ss1

      W3bub1b =
     &  - 8.D0*aINV**3*bb1*bb2*ss1

      W4bub1b =
     &  + 8.D0*aINV**3*bb2**2*ss1

      W5bub1b =
     &  + p2q * (  - 4.D0*aINV**3*bb1*bb2*ss1 )
      W5bub1b = W5bub1b + 2.D0*aINV*ss1*qm**2 + 1.D0/2.D0*aINV*ss1*
     &    hm2**2 + 2.D0*aINV**2*ss1 - 2.D0*aINV**3*bb2**2*ss1*hm2**2 - 
     &    4.D0*aINV**3*bb1*bb2*ss1*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2*
     &    ss1


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1bW1_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W1bub1b

        return
        end

C------------  chiC2: matrix element bub1b W2  -----------------

        double precision function Fbub1bW2_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1bW2_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1bW2_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW2_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1bW2_chic2Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW2_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1bW2_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


C     checkC2 = 0;


      W1bub1b =
     &  - 16.D0*aINV**4*bb1*bb2**3*ss1 - 16.D0*aINV**4*bb1**2*bb2**2*
     &    ss1

      W2bub1b =
     &  + p2q * (  - 8.D0*aINV**4*bb1*bb2**3*ss1 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*ss1 )
      W2bub1b = W2bub1b + 4.D0*aINV**2*bb2**2*ss1*qm**2 + aINV**2*
     &    bb2**2*ss1*hm2**2 + 4.D0*aINV**2*bb1*bb2*ss1*qm**2 + aINV**2*
     &    bb1*bb2*ss1*hm2**2 + 8.D0*aINV**3*bb2**2*ss1 + 8.D0*aINV**3*
     &    bb1*bb2*ss1 - 4.D0*aINV**4*bb2**4*ss1*hm2**2 - 12.D0*aINV**4*
     &    bb1*bb2**3*ss1*hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*ss1*hm2**2
     &     - 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*ss1 - 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*ss1

      W3bub1b =
     &  - 8.D0*aINV**3*bb1*bb2*ss1

      W4bub1b =
     &  + 8.D0*aINV**3*bb2**2*ss1

      W5bub1b =
     &  + p2q * (  - 4.D0*aINV**3*bb1*bb2*ss1 )
      W5bub1b = W5bub1b + 2.D0*aINV*ss1*qm**2 + 1.D0/2.D0*aINV*ss1*
     &    hm2**2 + 2.D0*aINV**2*ss1 - 2.D0*aINV**3*bb2**2*ss1*hm2**2 - 
     &    4.D0*aINV**3*bb1*bb2*ss1*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2*
     &    ss1


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1bW2_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W2bub1b

        return
        end

C------------  chiC2: matrix element bub1b W3  -----------------

        double precision function Fbub1bW3_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1bW3_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1bW3_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW3_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1bW3_chic2Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW3_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1bW3_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


C     checkC2 = 0;


      W1bub1b =
     &  - 16.D0*aINV**4*bb1*bb2**3*ss1 - 16.D0*aINV**4*bb1**2*bb2**2*
     &    ss1

      W2bub1b =
     &  + p2q * (  - 8.D0*aINV**4*bb1*bb2**3*ss1 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*ss1 )
      W2bub1b = W2bub1b + 4.D0*aINV**2*bb2**2*ss1*qm**2 + aINV**2*
     &    bb2**2*ss1*hm2**2 + 4.D0*aINV**2*bb1*bb2*ss1*qm**2 + aINV**2*
     &    bb1*bb2*ss1*hm2**2 + 8.D0*aINV**3*bb2**2*ss1 + 8.D0*aINV**3*
     &    bb1*bb2*ss1 - 4.D0*aINV**4*bb2**4*ss1*hm2**2 - 12.D0*aINV**4*
     &    bb1*bb2**3*ss1*hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*ss1*hm2**2
     &     - 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*ss1 - 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*ss1

      W3bub1b =
     &  - 8.D0*aINV**3*bb1*bb2*ss1

      W4bub1b =
     &  + 8.D0*aINV**3*bb2**2*ss1

      W5bub1b =
     &  + p2q * (  - 4.D0*aINV**3*bb1*bb2*ss1 )
      W5bub1b = W5bub1b + 2.D0*aINV*ss1*qm**2 + 1.D0/2.D0*aINV*ss1*
     &    hm2**2 + 2.D0*aINV**2*ss1 - 2.D0*aINV**3*bb2**2*ss1*hm2**2 - 
     &    4.D0*aINV**3*bb1*bb2*ss1*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2*
     &    ss1


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1bW3_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W3bub1b

        return
        end

C------------  chiC2: matrix element bub1b W4  -----------------

        double precision function Fbub1bW4_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1bW4_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1bW4_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW4_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1bW4_chic2Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW4_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1bW4_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


C     checkC2 = 0;


      W1bub1b =
     &  - 16.D0*aINV**4*bb1*bb2**3*ss1 - 16.D0*aINV**4*bb1**2*bb2**2*
     &    ss1

      W2bub1b =
     &  + p2q * (  - 8.D0*aINV**4*bb1*bb2**3*ss1 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*ss1 )
      W2bub1b = W2bub1b + 4.D0*aINV**2*bb2**2*ss1*qm**2 + aINV**2*
     &    bb2**2*ss1*hm2**2 + 4.D0*aINV**2*bb1*bb2*ss1*qm**2 + aINV**2*
     &    bb1*bb2*ss1*hm2**2 + 8.D0*aINV**3*bb2**2*ss1 + 8.D0*aINV**3*
     &    bb1*bb2*ss1 - 4.D0*aINV**4*bb2**4*ss1*hm2**2 - 12.D0*aINV**4*
     &    bb1*bb2**3*ss1*hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*ss1*hm2**2
     &     - 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*ss1 - 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*ss1

      W3bub1b =
     &  - 8.D0*aINV**3*bb1*bb2*ss1

      W4bub1b =
     &  + 8.D0*aINV**3*bb2**2*ss1

      W5bub1b =
     &  + p2q * (  - 4.D0*aINV**3*bb1*bb2*ss1 )
      W5bub1b = W5bub1b + 2.D0*aINV*ss1*qm**2 + 1.D0/2.D0*aINV*ss1*
     &    hm2**2 + 2.D0*aINV**2*ss1 - 2.D0*aINV**3*bb2**2*ss1*hm2**2 - 
     &    4.D0*aINV**3*bb1*bb2*ss1*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2*
     &    ss1


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1bW4_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W4bub1b

        return
        end

C------------  chiC2: matrix element bub1b W5  -----------------

        double precision function Fbub1bW5_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1bW5_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub1bW5_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW5_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1bW5_chic2Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW5_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1bW5_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


C     checkC2 = 0;


      W1bub1b =
     &  - 16.D0*aINV**4*bb1*bb2**3*ss1 - 16.D0*aINV**4*bb1**2*bb2**2*
     &    ss1

      W2bub1b =
     &  + p2q * (  - 8.D0*aINV**4*bb1*bb2**3*ss1 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*ss1 )
      W2bub1b = W2bub1b + 4.D0*aINV**2*bb2**2*ss1*qm**2 + aINV**2*
     &    bb2**2*ss1*hm2**2 + 4.D0*aINV**2*bb1*bb2*ss1*qm**2 + aINV**2*
     &    bb1*bb2*ss1*hm2**2 + 8.D0*aINV**3*bb2**2*ss1 + 8.D0*aINV**3*
     &    bb1*bb2*ss1 - 4.D0*aINV**4*bb2**4*ss1*hm2**2 - 12.D0*aINV**4*
     &    bb1*bb2**3*ss1*hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*ss1*hm2**2
     &     - 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*ss1 - 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*ss1

      W3bub1b =
     &  - 8.D0*aINV**3*bb1*bb2*ss1

      W4bub1b =
     &  + 8.D0*aINV**3*bb2**2*ss1

      W5bub1b =
     &  + p2q * (  - 4.D0*aINV**3*bb1*bb2*ss1 )
      W5bub1b = W5bub1b + 2.D0*aINV*ss1*qm**2 + 1.D0/2.D0*aINV*ss1*
     &    hm2**2 + 2.D0*aINV**2*ss1 - 2.D0*aINV**3*bb2**2*ss1*hm2**2 - 
     &    4.D0*aINV**3*bb1*bb2*ss1*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2*
     &    ss1


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1bW5_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W5bub1b

        return
        end

C---------------chiC2: bub2 --------------------------------

C------------  chiC2: matrix element bub2 W1  -----------------

        double precision function Fbub2W1_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W1_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2W1_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W1_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W1_chic2Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W1_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W1_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



C   checkC2 = 0;


      W1bub2 =
     &  - 16.D0*aINV**4*bb1*bb2**3*ss2 - 16.D0*aINV**4*bb1**2*bb2**2*
     &    ss2

      W2bub2 =
     &  + p2q * (  - 8.D0*aINV**4*bb1*bb2**3*ss2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*ss2 )
      W2bub2 = W2bub2 + 4.D0*aINV**2*bb2**2*ss2*qm**2 + aINV**2*bb2**2*
     &    hm1**2*ss2 + 4.D0*aINV**2*bb1*bb2*ss2*qm**2 + aINV**2*bb1*bb2
     &    *hm1**2*ss2 + 8.D0*aINV**3*bb2**2*ss2 + 8.D0*aINV**3*bb1*bb2*
     &    ss2 - 4.D0*aINV**4*bb2**4*hm2**2*ss2 - 12.D0*aINV**4*bb1*
     &    bb2**3*hm2**2*ss2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2*ss2 - 4.
     &    D0*aINV**4*bb1**2*bb2**2*hm1**2*ss2 - 4.D0*aINV**4*bb1**3*bb2
     &    *hm1**2*ss2

      W3bub2 =
     &  - 8.D0*aINV**3*bb1*bb2*ss2

      W4bub2 =
     &  + 8.D0*aINV**3*bb2**2*ss2

      W5bub2 =
     &  + p2q * (  - 4.D0*aINV**3*bb1*bb2*ss2 )
      W5bub2 = W5bub2 + 2.D0*aINV*ss2*qm**2 + 1.D0/2.D0*aINV*hm1**2*ss2
     &     + 2.D0*aINV**2*ss2 - 2.D0*aINV**3*bb2**2*hm2**2*ss2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*ss2 - 2.D0*aINV**3*bb1**2*hm1**2*ss2

 

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W1_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W1bub2

        return
        end

C------------  chiC2: matrix element bub2 W2  -----------------

        double precision function Fbub2W2_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W2_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2W2_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W2_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W2_chic2Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W2_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W2_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



C   checkC2 = 0;


      W1bub2 =
     &  - 16.D0*aINV**4*bb1*bb2**3*ss2 - 16.D0*aINV**4*bb1**2*bb2**2*
     &    ss2

      W2bub2 =
     &  + p2q * (  - 8.D0*aINV**4*bb1*bb2**3*ss2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*ss2 )
      W2bub2 = W2bub2 + 4.D0*aINV**2*bb2**2*ss2*qm**2 + aINV**2*bb2**2*
     &    hm1**2*ss2 + 4.D0*aINV**2*bb1*bb2*ss2*qm**2 + aINV**2*bb1*bb2
     &    *hm1**2*ss2 + 8.D0*aINV**3*bb2**2*ss2 + 8.D0*aINV**3*bb1*bb2*
     &    ss2 - 4.D0*aINV**4*bb2**4*hm2**2*ss2 - 12.D0*aINV**4*bb1*
     &    bb2**3*hm2**2*ss2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2*ss2 - 4.
     &    D0*aINV**4*bb1**2*bb2**2*hm1**2*ss2 - 4.D0*aINV**4*bb1**3*bb2
     &    *hm1**2*ss2

      W3bub2 =
     &  - 8.D0*aINV**3*bb1*bb2*ss2

      W4bub2 =
     &  + 8.D0*aINV**3*bb2**2*ss2

      W5bub2 =
     &  + p2q * (  - 4.D0*aINV**3*bb1*bb2*ss2 )
      W5bub2 = W5bub2 + 2.D0*aINV*ss2*qm**2 + 1.D0/2.D0*aINV*hm1**2*ss2
     &     + 2.D0*aINV**2*ss2 - 2.D0*aINV**3*bb2**2*hm2**2*ss2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*ss2 - 2.D0*aINV**3*bb1**2*hm1**2*ss2

 

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W2_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W2bub2

        return
        end

C------------  chiC2: matrix element bub2 W3  -----------------

        double precision function Fbub2W3_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W3_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2W3_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W3_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W3_chic2Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W3_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W3_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()
        pi = 4.d0*datan(1.d0)

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



C   checkC2 = 0;


      W1bub2 =
     &  - 16.D0*aINV**4*bb1*bb2**3*ss2 - 16.D0*aINV**4*bb1**2*bb2**2*
     &    ss2

      W2bub2 =
     &  + p2q * (  - 8.D0*aINV**4*bb1*bb2**3*ss2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*ss2 )
      W2bub2 = W2bub2 + 4.D0*aINV**2*bb2**2*ss2*qm**2 + aINV**2*bb2**2*
     &    hm1**2*ss2 + 4.D0*aINV**2*bb1*bb2*ss2*qm**2 + aINV**2*bb1*bb2
     &    *hm1**2*ss2 + 8.D0*aINV**3*bb2**2*ss2 + 8.D0*aINV**3*bb1*bb2*
     &    ss2 - 4.D0*aINV**4*bb2**4*hm2**2*ss2 - 12.D0*aINV**4*bb1*
     &    bb2**3*hm2**2*ss2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2*ss2 - 4.
     &    D0*aINV**4*bb1**2*bb2**2*hm1**2*ss2 - 4.D0*aINV**4*bb1**3*bb2
     &    *hm1**2*ss2

      W3bub2 =
     &  - 8.D0*aINV**3*bb1*bb2*ss2

      W4bub2 =
     &  + 8.D0*aINV**3*bb2**2*ss2

      W5bub2 =
     &  + p2q * (  - 4.D0*aINV**3*bb1*bb2*ss2 )
      W5bub2 = W5bub2 + 2.D0*aINV*ss2*qm**2 + 1.D0/2.D0*aINV*hm1**2*ss2
     &     + 2.D0*aINV**2*ss2 - 2.D0*aINV**3*bb2**2*hm2**2*ss2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*ss2 - 2.D0*aINV**3*bb1**2*hm1**2*ss2

 

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W3_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W3bub2

        return
        end

C------------  chiC2: matrix element bub2 W4  -----------------

        double precision function Fbub2W4_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W4_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2W4_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W4_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W4_chic2Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W4_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W4_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



C   checkC2 = 0;


      W1bub2 =
     &  - 16.D0*aINV**4*bb1*bb2**3*ss2 - 16.D0*aINV**4*bb1**2*bb2**2*
     &    ss2

      W2bub2 =
     &  + p2q * (  - 8.D0*aINV**4*bb1*bb2**3*ss2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*ss2 )
      W2bub2 = W2bub2 + 4.D0*aINV**2*bb2**2*ss2*qm**2 + aINV**2*bb2**2*
     &    hm1**2*ss2 + 4.D0*aINV**2*bb1*bb2*ss2*qm**2 + aINV**2*bb1*bb2
     &    *hm1**2*ss2 + 8.D0*aINV**3*bb2**2*ss2 + 8.D0*aINV**3*bb1*bb2*
     &    ss2 - 4.D0*aINV**4*bb2**4*hm2**2*ss2 - 12.D0*aINV**4*bb1*
     &    bb2**3*hm2**2*ss2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2*ss2 - 4.
     &    D0*aINV**4*bb1**2*bb2**2*hm1**2*ss2 - 4.D0*aINV**4*bb1**3*bb2
     &    *hm1**2*ss2

      W3bub2 =
     &  - 8.D0*aINV**3*bb1*bb2*ss2

      W4bub2 =
     &  + 8.D0*aINV**3*bb2**2*ss2

      W5bub2 =
     &  + p2q * (  - 4.D0*aINV**3*bb1*bb2*ss2 )
      W5bub2 = W5bub2 + 2.D0*aINV*ss2*qm**2 + 1.D0/2.D0*aINV*hm1**2*ss2
     &     + 2.D0*aINV**2*ss2 - 2.D0*aINV**3*bb2**2*hm2**2*ss2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*ss2 - 2.D0*aINV**3*bb1**2*hm1**2*ss2

 

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W4_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W4bub2

        return
        end

C------------  chiC2: matrix element bub2 W5  -----------------

        double precision function Fbub2W5_chic2Jpsi(hm1,ss1,hm2,ss2,qm)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W5_chic2Jpsi/hhm1,sss1,hhm2,sss2,qqm
        common/accuracy/eps
C
        external FFbub2W5_chic2Jpsi

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W5_chic2Jpsi,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W5_chic2Jpsi=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W5_chic2Jpsi(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W5_chic2Jpsi/hm1,ss1,hm2,ss2,qm
        common/confinement/conf,xlam, pi

        ! pi=x01aaf()

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



C   checkC2 = 0;


      W1bub2 =
     &  - 16.D0*aINV**4*bb1*bb2**3*ss2 - 16.D0*aINV**4*bb1**2*bb2**2*
     &    ss2

      W2bub2 =
     &  + p2q * (  - 8.D0*aINV**4*bb1*bb2**3*ss2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*ss2 )
      W2bub2 = W2bub2 + 4.D0*aINV**2*bb2**2*ss2*qm**2 + aINV**2*bb2**2*
     &    hm1**2*ss2 + 4.D0*aINV**2*bb1*bb2*ss2*qm**2 + aINV**2*bb1*bb2
     &    *hm1**2*ss2 + 8.D0*aINV**3*bb2**2*ss2 + 8.D0*aINV**3*bb1*bb2*
     &    ss2 - 4.D0*aINV**4*bb2**4*hm2**2*ss2 - 12.D0*aINV**4*bb1*
     &    bb2**3*hm2**2*ss2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2*ss2 - 4.
     &    D0*aINV**4*bb1**2*bb2**2*hm1**2*ss2 - 4.D0*aINV**4*bb1**3*bb2
     &    *hm1**2*ss2

      W3bub2 =
     &  - 8.D0*aINV**3*bb1*bb2*ss2

      W4bub2 =
     &  + 8.D0*aINV**3*bb2**2*ss2

      W5bub2 =
     &  + p2q * (  - 4.D0*aINV**3*bb1*bb2*ss2 )
      W5bub2 = W5bub2 + 2.D0*aINV*ss2*qm**2 + 1.D0/2.D0*aINV*hm1**2*ss2
     &     + 2.D0*aINV**2*ss2 - 2.D0*aINV**3*bb2**2*hm2**2*ss2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*ss2 - 2.D0*aINV**3*bb1**2*hm1**2*ss2

 

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W5_chic2Jpsi = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W5bub2

        return
        end



























































******************************************************
C             Normalization
*****************************************************

C--------  PP-Normalization  ------------------

        double precision function FPP_psi2schic1(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFPP_psi2schic1/hhm,sss,qqm1,qqm2
C
        external FFPP_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFPP_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FPP_psi2schic1=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFPP_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFPP_psi2schic1/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFPP_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *PP

        return
        end

C------------  VV-normalization  ----------------------------------

        double precision function FVV_psi2schic1(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFVV_psi2schic1/hhm,sss,qqm1,qqm2
C
        external FFVV_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFVV_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FVV_psi2schic1=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFVV_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFVV_psi2schic1/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFVV_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *VV

        return
        end

C------------  SS-normalization  ----------------------------------

        double precision function FSS_psi2schic1(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFSS_psi2schic1/hhm,sss,qqm1,qqm2
C
        external FFSS_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFSS_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FSS_psi2schic1=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFSS_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFSS_psi2schic1/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFSS_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Scalar

        return
        end

C------------AA-normalization  ----------------------------------

        double precision function FAA_psi2schic1(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFAA_psi2schic1/hhm,sss,qqm1,qqm2
C
        external FFAA_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFAA_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FAA_psi2schic1=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFAA_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFAA_psi2schic1/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFAA_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Axial

        return
        end

C------------ TT-normalization  ----------------------------------

        double precision function FTT_psi2schic1(hm,ss,qm1,qm2)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
        common/CFTT_psi2schic1/hhm,sss,qqm1,qqm2
C
        external FFTT_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFTT_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FTT_psi2schic1=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFTT_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFTT_psi2schic1/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1

        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFTT_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Tensor

        return
        end

C--psi(2S) normalization from file charm_12.f at /Ytt/HQL/ort/ ----

C-------------------norm: V1V1  --------------------------


        double precision function FV1V1_psi2schic1(hm,ss,qm,CC1)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps
        common/CFV1V1_psi2schic1/hhm,sss,qqm,CCC1
C
        external FFV1V1_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm=qm
        CCC1=CC1

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFV1V1_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
        FV1V1_psi2schic1=finval
C

       return
      deallocate(wrkstr)
        end
C-----------------------------------------------------------

        double precision function FFV1V1_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFV1V1_psi2schic1/hm,ss,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
        alp2=x1

C-----------   exponential  -----


      aa =
     &  + t * ( 1.D0 )
      aa = aa + 2.D0*ss

      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )

C------numerator --------------

      V1V1 =
     &  + CC1 * (  - 12.D0*aINV*qm**2*alp2*t*ss - aINV*hm**2*alp2*t*ss
     &     - 18.D0*aINV**2*alp2*t*ss + 12.D0*aINV**2*bb*qm**2*alp2*t*ss
     &     + 3.D0*aINV**2*bb*hm**2*alp2*t*ss + 6.D0*aINV**2*bb**2*hm**2
     &    *qm**2*alp2*t*ss + 1.D0/2.D0*aINV**2*bb**2*hm**4*alp2*t*ss +
     &    16.D0*aINV**3*bb*alp2*t*ss + 14.D0*aINV**3*bb**2*hm**2*alp2*t
     &    *ss - 4.D0*aINV**3*bb**3*hm**2*qm**2*alp2*t*ss - aINV**3*
     &    bb**3*hm**4*alp2*t*ss - 24.D0*aINV**4*bb**3*hm**2*alp2*t*ss
     &     - 2.D0*aINV**4*bb**4*hm**4*alp2*t*ss + 4.D0*aINV**5*bb**5*
     &    hm**4*alp2*t*ss )
      V1V1 = V1V1 + CC1**2 * ( 18.D0*aINV**2*qm**2*alp2*t*ss**2 + 3.D0/
     &    2.D0*aINV**2*hm**2*alp2*t*ss**2 + 36.D0*aINV**3*alp2*t*ss**2
     &     - 24.D0*aINV**3*bb*qm**2*alp2*t*ss**2 - 6.D0*aINV**3*bb*
     &    hm**2*alp2*t*ss**2 - 18.D0*aINV**3*bb**2*hm**2*qm**2*alp2*t*
     &    ss**2 - 3.D0/2.D0*aINV**3*bb**2*hm**4*alp2*t*ss**2 - 40.D0*
     &    aINV**4*bb*alp2*t*ss**2 - 44.D0*aINV**4*bb**2*hm**2*alp2*t*
     &    ss**2 + 16.D0*aINV**4*bb**3*hm**2*qm**2*alp2*t*ss**2 + 4.D0*
     &    aINV**4*bb**3*hm**4*alp2*t*ss**2 + 3.D0*aINV**4*bb**4*hm**4*
     &    qm**2*alp2*t*ss**2 + 1.D0/4.D0*aINV**4*bb**4*hm**6*alp2*t*
     &    ss**2 + 80.D0*aINV**5*bb**3*hm**2*alp2*t*ss**2 + 13.D0*
     &    aINV**5*bb**4*hm**4*alp2*t*ss**2 - 2.D0*aINV**5*bb**5*hm**4*
     &    qm**2*alp2*t*ss**2 - 1.D0/2.D0*aINV**5*bb**5*hm**6*alp2*t*
     &    ss**2 - 26.D0*aINV**6*bb**5*hm**4*alp2*t*ss**2 - aINV**6*
     &    bb**6*hm**6*alp2*t*ss**2 + 2.D0*aINV**7*bb**7*hm**6*alp2*t*
     &    ss**2 )
      V1V1 = V1V1 + 3.D0*qm**2*alp2*t + 1.D0/4.D0*hm**2*alp2*t + 3.D0*
     &    aINV*alp2*t - 2.D0*aINV*bb*qm**2*alp2*t - 1.D0/2.D0*aINV*bb*
     &    hm**2*alp2*t - 2.D0*aINV**2*bb*alp2*t - aINV**2*bb**2*hm**2*
     &    alp2*t + 2.D0*aINV**3*bb**3*hm**2*alp2*t

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFV1V1_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *V1V1

         return
         end

C------------  VtoV  ----------------------------------

        double precision function FVtoV_psi2schic1(hm,ssum,qm)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps
        common/CFVtoV_psi2schic1/hhm,sss,qqm
C
        external FFVtoV_psi2schic1
C
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ssum
        qqm=qm

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFVtoV_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
        FVtoV_psi2schic1=finval
C

       return
      deallocate(wrkstr)
        end
C
C-------------------------------------------------------
C
        double precision function FFVtoV_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFVtoV_psi2schic1/hm,ssum,qm
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
C        alp1=1.d0-x1
        alp2=x1
C
        w=1.d0/2.d0

C-----------   exponential  -----

      aa =
     &  + t * ( 1.D0 )
      aa = aa + ssum

      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )

C------numerator --------------

      VtoV =
     &  + hm**2 * ( 1.D0 )
      VtoV = VtoV + aINV * ( 4.D0 )
      VtoV = VtoV + aINV**2*hm**2 * (  - 4.D0*bb**2 )
      VtoV = VtoV + 4.D0*qm**2

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFVtoV_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *VtoV

        return
        end

C------------  VtoVk2  ----------------------------------

        double precision function FVtoVk2_psi2schic1(hm,ssum,qm)
C
        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps
        common/CFVtoVk2_psi2schic1/hhm,sss,qqm
C
        external FFVtoVk2_psi2schic1
C
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ssum
        qqm=qm

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFVtoVk2_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
        FVtoVk2_psi2schic1=finval
C

       return
      deallocate(wrkstr)
        end
C
C-------------------------------------------------------
C
        double precision function FFVtoVk2_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

        common/CFVtoVk2_psi2schic1/hm,ssum,qm
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
C        alp1=1.d0-x1
        alp2=x1
C
        w=1.d0/2.d0

C-----------   exponential  -----
      aa =
     &  + t * ( 1.D0 )
      aa = aa + ssum

      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )

C------numerator --------------

      VtoVk2 =
     &  + aINV * (  - 8.D0*qm**2 )
      VtoVk2 = VtoVk2 + aINV*hm**2 * (  - 2.D0 )
      VtoVk2 = VtoVk2 + aINV**2 * (  - 12.D0 )
      VtoVk2 = VtoVk2 + aINV**2*hm**2 * ( 4.D0*bb**2*qm**2 )
      VtoVk2 = VtoVk2 + aINV**2*hm**4 * ( bb**2 )
      VtoVk2 = VtoVk2 + aINV**3*hm**2 * ( 20.D0*bb**2 )
      VtoVk2 = VtoVk2 + aINV**4*hm**4 * (  - 4.D0*bb**4 )

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFVtoVk2_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *VtoVk2

        return
        end

C------------ W1-loop  ----------------------------------

        double precision function FloopW1_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW1_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps

        external FFloopW1_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW1_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW1_psi2schic1=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW1_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW1_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
C

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      W1loop =
     &  + p2q**(-1) * (  - 4.D0*qm**2 + 4.D0*aINV - 4.D0*aINV*bb1*qm**2
     &     - 12.D0*aINV**2*bb1 - 8.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*
     &    aINV**2*bb1**2*hm2**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D0
     &    *aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*bb1**3*hm2**2 )
      W1loop = W1loop + ss1*CC1*p2q**(-1) * (  - hm2**2*qm**2 + 6.D0*
     &    aINV*qm**2 + aINV*hm2**2 + 4.D0*aINV*bb2*hm2**2*qm**2 + 3.D0*
     &    aINV*bb1*hm2**2*qm**2 - 18.D0*aINV**2 - 8.D0*aINV**2*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb2**2*hm2**2*qm**2 + 12.D0*aINV**2*bb1
     &    *qm**2 - 15.D0*aINV**2*bb1*hm2**2 - 4.D0*aINV**2*bb1*bb2*
     &    hm2**2*qm**2 - 2.D0*aINV**2*bb1*bb2*hm2**4 - 2.D0*aINV**2*
     &    bb1**2*hm2**4 + 6.D0*aINV**3*bb2**2*hm2**2 + 48.D0*aINV**3*
     &    bb1 + 60.D0*aINV**3*bb1*bb2*hm2**2 - 4.D0*aINV**3*bb1*bb2**2*
     &    hm2**2*qm**2 + 9.D0*aINV**3*bb1*bb2**2*hm2**4 + 54.D0*aINV**3
     &    *bb1**2*hm2**2 - 8.D0*aINV**3*bb1**2*bb2*hm2**2*qm**2 + 18.D0
     &    *aINV**3*bb1**2*bb2*hm2**4 - 4.D0*aINV**3*bb1**3*hm2**2*qm**2
     &     + 9.D0*aINV**3*bb1**3*hm2**4 - 32.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 12.D0*aINV**4*bb1*bb2**3*hm2**4 - 64.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 - 36.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 32.D0
     &    *aINV**4*bb1**3*hm2**2 - 36.D0*aINV**4*bb1**3*bb2*hm2**4 - 12.
     &    D0*aINV**4*bb1**4*hm2**4 )
      W1loop = W1loop + ss1*CC1*p2q**(-1) * ( 4.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 16.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 24.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4 + 16.D0*aINV**5*bb1**4*bb2*hm2**4 + 4.D0
     &    *aINV**5*bb1**5*hm2**4 )
      W1loop = W1loop + ss1*CC1 * (  - 2.D0*qm**2 + 2.D0*aINV + 4.D0*
     &    aINV*bb2*qm**2 + 6.D0*aINV*bb1*qm**2 - 6.D0*aINV**2*bb2 - 26.D
     &    0*aINV**2*bb1 - 4.D0*aINV**2*bb1*bb2*qm**2 - 5.D0*aINV**2*bb1
     &    *bb2*hm2**2 - 7.D0*aINV**2*bb1**2*hm2**2 + 44.D0*aINV**3*bb1*
     &    bb2 + 14.D0*aINV**3*bb1*bb2**2*hm2**2 + 92.D0*aINV**3*bb1**2
     &     - 8.D0*aINV**3*bb1**2*bb2*qm**2 + 46.D0*aINV**3*bb1**2*bb2*
     &    hm2**2 - 8.D0*aINV**3*bb1**3*qm**2 + 32.D0*aINV**3*bb1**3*
     &    hm2**2 - 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 64.D0*aINV**4*
     &    bb1**2*bb2 - 60.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 64.D0*
     &    aINV**4*bb1**3 - 96.D0*aINV**4*bb1**3*bb2*hm2**2 - 44.D0*
     &    aINV**4*bb1**4*hm2**2 + 16.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    48.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 48.D0*aINV**5*bb1**4*bb2
     &    *hm2**2 + 16.D0*aINV**5*bb1**5*hm2**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 2.D0*aINV**2*bb1*bb2 - 6.D0*
     &    aINV**2*bb1**2 + 4.D0*aINV**3*bb1*bb2**2 + 24.D0*aINV**3*
     &    bb1**2*bb2 + 28.D0*aINV**3*bb1**3 - 16.D0*aINV**4*bb1**2*
     &    bb2**2 - 56.D0*aINV**4*bb1**3*bb2 - 40.D0*aINV**4*bb1**4 + 16.
     &    D0*aINV**5*bb1**3*bb2**2 + 32.D0*aINV**5*bb1**4*bb2 + 16.D0*
     &    aINV**5*bb1**5 )
      W1loop = W1loop - 4.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.
     &    D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*bb1**3

      W2loop =
     &  + ss1*CC1 * (  - aINV*bb2*hm2**2 + 14.D0*aINV**2*bb2 + 5.D0*
     &    aINV**2*bb2**2*hm2**2 + 5.D0*aINV**2*bb1*bb2*hm2**2 - 16.D0*
     &    aINV**3*bb2**2 - 8.D0*aINV**3*bb2**3*hm2**2 - 16.D0*aINV**3*
     &    bb1*bb2 - 16.D0*aINV**3*bb1*bb2**2*hm2**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2 + 4.D0*aINV**4*bb2**4*hm2**2 + 12.D0*
     &    aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm2**2 )
      W2loop = W2loop + ss1*CC1*p2q * (  - 2.D0*aINV*bb2 + 6.D0*aINV**2
     &    *bb2**2 + 10.D0*aINV**2*bb1*bb2 - 4.D0*aINV**3*bb2**3 - 20.D0
     &    *aINV**3*bb1*bb2**2 - 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**4
     &    *bb1*bb2**3 + 16.D0*aINV**4*bb1**2*bb2**2 + 8.D0*aINV**4*
     &    bb1**3*bb2 )
      W2loop = W2loop - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 + 4.D0*
     &    aINV**2*bb1*bb2

      W3loop =
     &  + ss1*CC1 * ( 2.D0*aINV**2*bb2 + 4.D0*aINV**2*bb1 + aINV**2*bb1
     &    *bb2*hm2**2 + aINV**2*bb1**2*hm2**2 - 16.D0*aINV**3*bb1*bb2
     &     - 4.D0*aINV**3*bb1*bb2**2*hm2**2 - 16.D0*aINV**3*bb1**2 - 8.D
     &    0*aINV**3*bb1**2*bb2*hm2**2 - 4.D0*aINV**3*bb1**3*hm2**2 + 4.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 12.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*
     &    bb1**4*hm2**2 )
      W3loop = W3loop + ss1*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2 + 2.D0*
     &    aINV**2*bb1**2 - 4.D0*aINV**3*bb1*bb2**2 - 12.D0*aINV**3*
     &    bb1**2*bb2 - 8.D0*aINV**3*bb1**3 + 8.D0*aINV**4*bb1**2*bb2**2
     &     + 16.D0*aINV**4*bb1**3*bb2 + 8.D0*aINV**4*bb1**4 )
      W3loop = W3loop + 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2

      W4loop =
     &  + ss1*CC1 * (  - aINV*bb2*hm2**2 + 12.D0*aINV**2*bb2 + 5.D0*
     &    aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1 + 4.D0*aINV**2*bb1*
     &    bb2*hm2**2 - aINV**2*bb1**2*hm2**2 - 16.D0*aINV**3*bb2**2 - 8.
     &    D0*aINV**3*bb2**3*hm2**2 - 12.D0*aINV**3*bb1*bb2**2*hm2**2 + 
     &    16.D0*aINV**3*bb1**2 + 4.D0*aINV**3*bb1**3*hm2**2 + 4.D0*
     &    aINV**4*bb2**4*hm2**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 8.D0
     &    *aINV**4*bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**4*hm2**2 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 2.D0*aINV*bb2 + 6.D0*aINV**2
     &    *bb2**2 + 8.D0*aINV**2*bb1*bb2 - 2.D0*aINV**2*bb1**2 - 4.D0*
     &    aINV**3*bb2**3 - 16.D0*aINV**3*bb1*bb2**2 - 4.D0*aINV**3*
     &    bb1**2*bb2 + 8.D0*aINV**3*bb1**3 + 8.D0*aINV**4*bb1*bb2**3 + 
     &    8.D0*aINV**4*bb1**2*bb2**2 - 8.D0*aINV**4*bb1**3*bb2 - 8.D0*
     &    aINV**4*bb1**4 )
      W4loop = W4loop - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 - 4.D0*
     &    aINV**2*bb1**2

      W5loop =
     &  + p2q**(-1) * ( 8.D0*aINV - 4.D0*aINV*bb2*qm**2 + 4.D0*aINV*bb2
     &    *hm2**2 - 4.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*hm2**2 - 12.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*hm2**2 - 12.D0*aINV**2*bb1
     &     - 16.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*aINV**2*bb1**2*hm2**2
     &     + 4.D0*aINV**3*bb2**3*hm2**2 + 12.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 12.D0*aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*
     &    bb1**3*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q**(-1) * (  - 2.D0*aINV*qm**2 + 4.D0
     &    *aINV*hm2**2 - aINV*bb2*hm2**2*qm**2 + aINV*bb2*hm2**4 - aINV
     &    *bb1*hm2**2*qm**2 + aINV*bb1*hm2**4 - 30.D0*aINV**2 + 12.D0*
     &    aINV**2*bb2*qm**2 - 31.D0*aINV**2*bb2*hm2**2 + 4.D0*aINV**2*
     &    bb2**2*hm2**2*qm**2 - 6.D0*aINV**2*bb2**2*hm2**4 + 12.D0*
     &    aINV**2*bb1*qm**2 - 31.D0*aINV**2*bb1*hm2**2 + 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - 12.D0*aINV**2*bb1*bb2*hm2**4 + 4.D0*
     &    aINV**2*bb1**2*hm2**2*qm**2 - 6.D0*aINV**2*bb1**2*hm2**4 + 48.
     &    D0*aINV**3*bb2 + 58.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*
     &    bb2**3*hm2**2*qm**2 + 13.D0*aINV**3*bb2**3*hm2**4 + 48.D0*
     &    aINV**3*bb1 + 116.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*
     &    bb1*bb2**2*hm2**2*qm**2 + 39.D0*aINV**3*bb1*bb2**2*hm2**4 + 
     &    58.D0*aINV**3*bb1**2*hm2**2 - 12.D0*aINV**3*bb1**2*bb2*hm2**2
     &    *qm**2 + 39.D0*aINV**3*bb1**2*bb2*hm2**4 - 4.D0*aINV**3*
     &    bb1**3*hm2**2*qm**2 + 13.D0*aINV**3*bb1**3*hm2**4 - 32.D0*
     &    aINV**4*bb2**3*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q**(-1) * (  - 12.D0*aINV**4*bb2**4*
     &    hm2**4 - 96.D0*aINV**4*bb1*bb2**2*hm2**2 - 48.D0*aINV**4*bb1*
     &    bb2**3*hm2**4 - 96.D0*aINV**4*bb1**2*bb2*hm2**2 - 72.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4 - 32.D0*aINV**4*bb1**3*hm2**2 - 
     &    48.D0*aINV**4*bb1**3*bb2*hm2**4 - 12.D0*aINV**4*bb1**4*hm2**4
     &     + 4.D0*aINV**5*bb2**5*hm2**4 + 20.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 40.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 40.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4 + 20.D0*aINV**5*bb1**4*bb2*hm2**4 + 4.D0
     &    *aINV**5*bb1**5*hm2**4 )
      W5loop = W5loop + ss1*CC1 * ( 8.D0*aINV - 2.D0*aINV*bb2*qm**2 + 3.
     &    D0*aINV*bb2*hm2**2 - 2.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*
     &    hm2**2 - 34.D0*aINV**2*bb2 + 4.D0*aINV**2*bb2**2*qm**2 - 13.D0
     &    *aINV**2*bb2**2*hm2**2 - 58.D0*aINV**2*bb1 + 12.D0*aINV**2*
     &    bb1*bb2*qm**2 - 36.D0*aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*
     &    bb1**2*qm**2 - 23.D0*aINV**2*bb1**2*hm2**2 + 32.D0*aINV**3*
     &    bb2**2 + 18.D0*aINV**3*bb2**3*hm2**2 + 132.D0*aINV**3*bb1*bb2
     &     - 8.D0*aINV**3*bb1*bb2**2*qm**2 + 84.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 100.D0*aINV**3*bb1**2 - 16.D0*aINV**3*bb1**2*bb2*
     &    qm**2 + 114.D0*aINV**3*bb1**2*bb2*hm2**2 - 8.D0*aINV**3*
     &    bb1**3*qm**2 + 48.D0*aINV**3*bb1**3*hm2**2 - 8.D0*aINV**4*
     &    bb2**4*hm2**2 - 64.D0*aINV**4*bb1*bb2**2 - 68.D0*aINV**4*bb1*
     &    bb2**3*hm2**2 - 128.D0*aINV**4*bb1**2*bb2 - 156.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2 - 64.D0*aINV**4*bb1**3 - 140.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 44.D0*aINV**4*bb1**4*hm2**2 + 16.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 )
      W5loop = W5loop + ss1*CC1 * ( 64.D0*aINV**5*bb1**2*bb2**3*hm2**2
     &     + 96.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    bb2*hm2**2 + 16.D0*aINV**5*bb1**5*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q * ( 2.D0*aINV*bb2 + 4.D0*aINV*bb1
     &     - 6.D0*aINV**2*bb2**2 - 24.D0*aINV**2*bb1*bb2 - 22.D0*
     &    aINV**2*bb1**2 + 4.D0*aINV**3*bb2**3 + 36.D0*aINV**3*bb1*
     &    bb2**2 + 76.D0*aINV**3*bb1**2*bb2 + 44.D0*aINV**3*bb1**3 - 16.
     &    D0*aINV**4*bb1*bb2**3 - 72.D0*aINV**4*bb1**2*bb2**2 - 96.D0*
     &    aINV**4*bb1**3*bb2 - 40.D0*aINV**4*bb1**4 + 16.D0*aINV**5*
     &    bb1**2*bb2**3 + 48.D0*aINV**5*bb1**3*bb2**2 + 48.D0*aINV**5*
     &    bb1**4*bb2 + 16.D0*aINV**5*bb1**5 )
      W5loop = W5loop + 4.D0*aINV*bb2 + 8.D0*aINV*bb1 - 4.D0*aINV**2*
     &    bb2**2 - 16.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2 + 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*
     &    bb1**3


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW1_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W1loop

        return
        end

C------------  W1-bub1 ------------------------------

        double precision function Fbub1W1_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1W1_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub1W1_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1W1_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1W1_psi2schic1=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1W1_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1W1_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

         p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      W1bub1 = 0.d0

      W2bub1 = 0.d0

      W3bub1 = 0.d0

      W4bub1 =
     &  + ss1 * ( 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2 )
      W4bub1 = W4bub1 + ss1*CC1 * ( 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2
     &    *bb1**2 )
      W4bub1 = W4bub1 + ss1**2*CC1 * ( 2.D0*aINV**2*bb2*tau + 2.D0*
     &    aINV**2*bb1*tau - 16.D0*aINV**3*bb1*bb2 - 16.D0*aINV**3*
     &    bb1**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2 + 12.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0
     &    *aINV**4*bb1**4*hm2**2 )
      W4bub1 = W4bub1 + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2**2*
     &    tau - 8.D0*aINV**3*bb1**2*bb2*tau - 4.D0*aINV**3*bb1**3*tau
     &     + 8.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*bb2 + 8.D
     &    0*aINV**4*bb1**4 )

      W5bub1 =
     &  + ss1*p2q**(-1) * (  - 2.D0*aINV )
      W5bub1 = W5bub1 + ss1*CC1*p2q**(-1) * (  - 2.D0*aINV )
      W5bub1 = W5bub1 + ss1**2*CC1*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W5bub1 = W5bub1 + ss1**2*CC1 * ( 2.D0*aINV**2*bb2*tau + 2.D0*
     &    aINV**2*bb1*tau - 4.D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1**2
     &     )


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1W1_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W1bub1

        return
        end

C--------------- W1-bub2-------------------------------------

        double precision function Fbub2W1_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W1_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub2W1_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W1_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W1_psi2schic1=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W1_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W1_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

         p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )


      W1bub2 =
     &  + ss2*p2q**(-1) * (  - 2.D0*aINV )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 4.D0*aINV**3*bb1*bb2 - 4.D0*
     &    aINV**3*bb1**2 )

      W2bub2 = 0.d0

      W3bub2 = 0.d0

      W4bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb2**2 - 4.D0*aINV**2*bb1*bb2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb2**2 + 16.D0*
     &    aINV**3*bb1*bb2 - 4.D0*aINV**4*bb2**4*hm2**2 - 12.D0*aINV**4*
     &    bb1*bb2**3*hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1**3*bb2*hm2**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1*bb2**3
     &     - 16.D0*aINV**4*bb1**2*bb2**2 - 8.D0*aINV**4*bb1**3*bb2 )

      W5bub2 =
     &  + ss2*p2q**(-1) * (  - 2.D0*aINV )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 4.D0*aINV**3*bb1*bb2 - 4.D0*
     &    aINV**3*bb1**2 )


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W1_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W1bub2

        return
        end

C     W2

C------------ W2-loop  ----------------------------------

        double precision function FloopW2_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW2_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps

        external FFloopW2_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW2_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW2_psi2schic1=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW2_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW2_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
C

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      W1loop =
     &  + p2q**(-1) * (  - 4.D0*qm**2 + 4.D0*aINV - 4.D0*aINV*bb1*qm**2
     &     - 12.D0*aINV**2*bb1 - 8.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*
     &    aINV**2*bb1**2*hm2**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D0
     &    *aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*bb1**3*hm2**2 )
      W1loop = W1loop + ss1*CC1*p2q**(-1) * (  - hm2**2*qm**2 + 6.D0*
     &    aINV*qm**2 + aINV*hm2**2 + 4.D0*aINV*bb2*hm2**2*qm**2 + 3.D0*
     &    aINV*bb1*hm2**2*qm**2 - 18.D0*aINV**2 - 8.D0*aINV**2*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb2**2*hm2**2*qm**2 + 12.D0*aINV**2*bb1
     &    *qm**2 - 15.D0*aINV**2*bb1*hm2**2 - 4.D0*aINV**2*bb1*bb2*
     &    hm2**2*qm**2 - 2.D0*aINV**2*bb1*bb2*hm2**4 - 2.D0*aINV**2*
     &    bb1**2*hm2**4 + 6.D0*aINV**3*bb2**2*hm2**2 + 48.D0*aINV**3*
     &    bb1 + 60.D0*aINV**3*bb1*bb2*hm2**2 - 4.D0*aINV**3*bb1*bb2**2*
     &    hm2**2*qm**2 + 9.D0*aINV**3*bb1*bb2**2*hm2**4 + 54.D0*aINV**3
     &    *bb1**2*hm2**2 - 8.D0*aINV**3*bb1**2*bb2*hm2**2*qm**2 + 18.D0
     &    *aINV**3*bb1**2*bb2*hm2**4 - 4.D0*aINV**3*bb1**3*hm2**2*qm**2
     &     + 9.D0*aINV**3*bb1**3*hm2**4 - 32.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 12.D0*aINV**4*bb1*bb2**3*hm2**4 - 64.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 - 36.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 32.D0
     &    *aINV**4*bb1**3*hm2**2 - 36.D0*aINV**4*bb1**3*bb2*hm2**4 - 12.
     &    D0*aINV**4*bb1**4*hm2**4 )
      W1loop = W1loop + ss1*CC1*p2q**(-1) * ( 4.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 16.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 24.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4 + 16.D0*aINV**5*bb1**4*bb2*hm2**4 + 4.D0
     &    *aINV**5*bb1**5*hm2**4 )
      W1loop = W1loop + ss1*CC1 * (  - 2.D0*qm**2 + 2.D0*aINV + 4.D0*
     &    aINV*bb2*qm**2 + 6.D0*aINV*bb1*qm**2 - 6.D0*aINV**2*bb2 - 26.D
     &    0*aINV**2*bb1 - 4.D0*aINV**2*bb1*bb2*qm**2 - 5.D0*aINV**2*bb1
     &    *bb2*hm2**2 - 7.D0*aINV**2*bb1**2*hm2**2 + 44.D0*aINV**3*bb1*
     &    bb2 + 14.D0*aINV**3*bb1*bb2**2*hm2**2 + 92.D0*aINV**3*bb1**2
     &     - 8.D0*aINV**3*bb1**2*bb2*qm**2 + 46.D0*aINV**3*bb1**2*bb2*
     &    hm2**2 - 8.D0*aINV**3*bb1**3*qm**2 + 32.D0*aINV**3*bb1**3*
     &    hm2**2 - 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 64.D0*aINV**4*
     &    bb1**2*bb2 - 60.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 64.D0*
     &    aINV**4*bb1**3 - 96.D0*aINV**4*bb1**3*bb2*hm2**2 - 44.D0*
     &    aINV**4*bb1**4*hm2**2 + 16.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    48.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 48.D0*aINV**5*bb1**4*bb2
     &    *hm2**2 + 16.D0*aINV**5*bb1**5*hm2**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 2.D0*aINV**2*bb1*bb2 - 6.D0*
     &    aINV**2*bb1**2 + 4.D0*aINV**3*bb1*bb2**2 + 24.D0*aINV**3*
     &    bb1**2*bb2 + 28.D0*aINV**3*bb1**3 - 16.D0*aINV**4*bb1**2*
     &    bb2**2 - 56.D0*aINV**4*bb1**3*bb2 - 40.D0*aINV**4*bb1**4 + 16.
     &    D0*aINV**5*bb1**3*bb2**2 + 32.D0*aINV**5*bb1**4*bb2 + 16.D0*
     &    aINV**5*bb1**5 )
      W1loop = W1loop - 4.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.
     &    D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*bb1**3

      W2loop =
     &  + ss1*CC1 * (  - aINV*bb2*hm2**2 + 14.D0*aINV**2*bb2 + 5.D0*
     &    aINV**2*bb2**2*hm2**2 + 5.D0*aINV**2*bb1*bb2*hm2**2 - 16.D0*
     &    aINV**3*bb2**2 - 8.D0*aINV**3*bb2**3*hm2**2 - 16.D0*aINV**3*
     &    bb1*bb2 - 16.D0*aINV**3*bb1*bb2**2*hm2**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2 + 4.D0*aINV**4*bb2**4*hm2**2 + 12.D0*
     &    aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm2**2 )
      W2loop = W2loop + ss1*CC1*p2q * (  - 2.D0*aINV*bb2 + 6.D0*aINV**2
     &    *bb2**2 + 10.D0*aINV**2*bb1*bb2 - 4.D0*aINV**3*bb2**3 - 20.D0
     &    *aINV**3*bb1*bb2**2 - 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**4
     &    *bb1*bb2**3 + 16.D0*aINV**4*bb1**2*bb2**2 + 8.D0*aINV**4*
     &    bb1**3*bb2 )
      W2loop = W2loop - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 + 4.D0*
     &    aINV**2*bb1*bb2

      W3loop =
     &  + ss1*CC1 * ( 2.D0*aINV**2*bb2 + 4.D0*aINV**2*bb1 + aINV**2*bb1
     &    *bb2*hm2**2 + aINV**2*bb1**2*hm2**2 - 16.D0*aINV**3*bb1*bb2
     &     - 4.D0*aINV**3*bb1*bb2**2*hm2**2 - 16.D0*aINV**3*bb1**2 - 8.D
     &    0*aINV**3*bb1**2*bb2*hm2**2 - 4.D0*aINV**3*bb1**3*hm2**2 + 4.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 12.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*
     &    bb1**4*hm2**2 )
      W3loop = W3loop + ss1*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2 + 2.D0*
     &    aINV**2*bb1**2 - 4.D0*aINV**3*bb1*bb2**2 - 12.D0*aINV**3*
     &    bb1**2*bb2 - 8.D0*aINV**3*bb1**3 + 8.D0*aINV**4*bb1**2*bb2**2
     &     + 16.D0*aINV**4*bb1**3*bb2 + 8.D0*aINV**4*bb1**4 )
      W3loop = W3loop + 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2

      W4loop =
     &  + ss1*CC1 * (  - aINV*bb2*hm2**2 + 12.D0*aINV**2*bb2 + 5.D0*
     &    aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1 + 4.D0*aINV**2*bb1*
     &    bb2*hm2**2 - aINV**2*bb1**2*hm2**2 - 16.D0*aINV**3*bb2**2 - 8.
     &    D0*aINV**3*bb2**3*hm2**2 - 12.D0*aINV**3*bb1*bb2**2*hm2**2 + 
     &    16.D0*aINV**3*bb1**2 + 4.D0*aINV**3*bb1**3*hm2**2 + 4.D0*
     &    aINV**4*bb2**4*hm2**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 8.D0
     &    *aINV**4*bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**4*hm2**2 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 2.D0*aINV*bb2 + 6.D0*aINV**2
     &    *bb2**2 + 8.D0*aINV**2*bb1*bb2 - 2.D0*aINV**2*bb1**2 - 4.D0*
     &    aINV**3*bb2**3 - 16.D0*aINV**3*bb1*bb2**2 - 4.D0*aINV**3*
     &    bb1**2*bb2 + 8.D0*aINV**3*bb1**3 + 8.D0*aINV**4*bb1*bb2**3 + 
     &    8.D0*aINV**4*bb1**2*bb2**2 - 8.D0*aINV**4*bb1**3*bb2 - 8.D0*
     &    aINV**4*bb1**4 )
      W4loop = W4loop - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 - 4.D0*
     &    aINV**2*bb1**2

      W5loop =
     &  + p2q**(-1) * ( 8.D0*aINV - 4.D0*aINV*bb2*qm**2 + 4.D0*aINV*bb2
     &    *hm2**2 - 4.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*hm2**2 - 12.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*hm2**2 - 12.D0*aINV**2*bb1
     &     - 16.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*aINV**2*bb1**2*hm2**2
     &     + 4.D0*aINV**3*bb2**3*hm2**2 + 12.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 12.D0*aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*
     &    bb1**3*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q**(-1) * (  - 2.D0*aINV*qm**2 + 4.D0
     &    *aINV*hm2**2 - aINV*bb2*hm2**2*qm**2 + aINV*bb2*hm2**4 - aINV
     &    *bb1*hm2**2*qm**2 + aINV*bb1*hm2**4 - 30.D0*aINV**2 + 12.D0*
     &    aINV**2*bb2*qm**2 - 31.D0*aINV**2*bb2*hm2**2 + 4.D0*aINV**2*
     &    bb2**2*hm2**2*qm**2 - 6.D0*aINV**2*bb2**2*hm2**4 + 12.D0*
     &    aINV**2*bb1*qm**2 - 31.D0*aINV**2*bb1*hm2**2 + 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - 12.D0*aINV**2*bb1*bb2*hm2**4 + 4.D0*
     &    aINV**2*bb1**2*hm2**2*qm**2 - 6.D0*aINV**2*bb1**2*hm2**4 + 48.
     &    D0*aINV**3*bb2 + 58.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*
     &    bb2**3*hm2**2*qm**2 + 13.D0*aINV**3*bb2**3*hm2**4 + 48.D0*
     &    aINV**3*bb1 + 116.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*
     &    bb1*bb2**2*hm2**2*qm**2 + 39.D0*aINV**3*bb1*bb2**2*hm2**4 + 
     &    58.D0*aINV**3*bb1**2*hm2**2 - 12.D0*aINV**3*bb1**2*bb2*hm2**2
     &    *qm**2 + 39.D0*aINV**3*bb1**2*bb2*hm2**4 - 4.D0*aINV**3*
     &    bb1**3*hm2**2*qm**2 + 13.D0*aINV**3*bb1**3*hm2**4 - 32.D0*
     &    aINV**4*bb2**3*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q**(-1) * (  - 12.D0*aINV**4*bb2**4*
     &    hm2**4 - 96.D0*aINV**4*bb1*bb2**2*hm2**2 - 48.D0*aINV**4*bb1*
     &    bb2**3*hm2**4 - 96.D0*aINV**4*bb1**2*bb2*hm2**2 - 72.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4 - 32.D0*aINV**4*bb1**3*hm2**2 - 
     &    48.D0*aINV**4*bb1**3*bb2*hm2**4 - 12.D0*aINV**4*bb1**4*hm2**4
     &     + 4.D0*aINV**5*bb2**5*hm2**4 + 20.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 40.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 40.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4 + 20.D0*aINV**5*bb1**4*bb2*hm2**4 + 4.D0
     &    *aINV**5*bb1**5*hm2**4 )
      W5loop = W5loop + ss1*CC1 * ( 8.D0*aINV - 2.D0*aINV*bb2*qm**2 + 3.
     &    D0*aINV*bb2*hm2**2 - 2.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*
     &    hm2**2 - 34.D0*aINV**2*bb2 + 4.D0*aINV**2*bb2**2*qm**2 - 13.D0
     &    *aINV**2*bb2**2*hm2**2 - 58.D0*aINV**2*bb1 + 12.D0*aINV**2*
     &    bb1*bb2*qm**2 - 36.D0*aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*
     &    bb1**2*qm**2 - 23.D0*aINV**2*bb1**2*hm2**2 + 32.D0*aINV**3*
     &    bb2**2 + 18.D0*aINV**3*bb2**3*hm2**2 + 132.D0*aINV**3*bb1*bb2
     &     - 8.D0*aINV**3*bb1*bb2**2*qm**2 + 84.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 100.D0*aINV**3*bb1**2 - 16.D0*aINV**3*bb1**2*bb2*
     &    qm**2 + 114.D0*aINV**3*bb1**2*bb2*hm2**2 - 8.D0*aINV**3*
     &    bb1**3*qm**2 + 48.D0*aINV**3*bb1**3*hm2**2 - 8.D0*aINV**4*
     &    bb2**4*hm2**2 - 64.D0*aINV**4*bb1*bb2**2 - 68.D0*aINV**4*bb1*
     &    bb2**3*hm2**2 - 128.D0*aINV**4*bb1**2*bb2 - 156.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2 - 64.D0*aINV**4*bb1**3 - 140.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 44.D0*aINV**4*bb1**4*hm2**2 + 16.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 )
      W5loop = W5loop + ss1*CC1 * ( 64.D0*aINV**5*bb1**2*bb2**3*hm2**2
     &     + 96.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    bb2*hm2**2 + 16.D0*aINV**5*bb1**5*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q * ( 2.D0*aINV*bb2 + 4.D0*aINV*bb1
     &     - 6.D0*aINV**2*bb2**2 - 24.D0*aINV**2*bb1*bb2 - 22.D0*
     &    aINV**2*bb1**2 + 4.D0*aINV**3*bb2**3 + 36.D0*aINV**3*bb1*
     &    bb2**2 + 76.D0*aINV**3*bb1**2*bb2 + 44.D0*aINV**3*bb1**3 - 16.
     &    D0*aINV**4*bb1*bb2**3 - 72.D0*aINV**4*bb1**2*bb2**2 - 96.D0*
     &    aINV**4*bb1**3*bb2 - 40.D0*aINV**4*bb1**4 + 16.D0*aINV**5*
     &    bb1**2*bb2**3 + 48.D0*aINV**5*bb1**3*bb2**2 + 48.D0*aINV**5*
     &    bb1**4*bb2 + 16.D0*aINV**5*bb1**5 )
      W5loop = W5loop + 4.D0*aINV*bb2 + 8.D0*aINV*bb1 - 4.D0*aINV**2*
     &    bb2**2 - 16.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2 + 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*
     &    bb1**3


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW2_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W2loop

        return
        end

C------------  W2-bub1 ------------------------------

        double precision function Fbub1W2_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1W2_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub1W2_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1W2_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1W2_psi2schic1=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1W2_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1W2_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

         p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      W1bub1 = 0.d0

      W2bub1 = 0.d0

      W3bub1 = 0.d0

      W4bub1 =
     &  + ss1 * ( 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2 )
      W4bub1 = W4bub1 + ss1*CC1 * ( 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2
     &    *bb1**2 )
      W4bub1 = W4bub1 + ss1**2*CC1 * ( 2.D0*aINV**2*bb2*tau + 2.D0*
     &    aINV**2*bb1*tau - 16.D0*aINV**3*bb1*bb2 - 16.D0*aINV**3*
     &    bb1**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2 + 12.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0
     &    *aINV**4*bb1**4*hm2**2 )
      W4bub1 = W4bub1 + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2**2*
     &    tau - 8.D0*aINV**3*bb1**2*bb2*tau - 4.D0*aINV**3*bb1**3*tau
     &     + 8.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*bb2 + 8.D
     &    0*aINV**4*bb1**4 )

      W5bub1 =
     &  + ss1*p2q**(-1) * (  - 2.D0*aINV )
      W5bub1 = W5bub1 + ss1*CC1*p2q**(-1) * (  - 2.D0*aINV )
      W5bub1 = W5bub1 + ss1**2*CC1*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W5bub1 = W5bub1 + ss1**2*CC1 * ( 2.D0*aINV**2*bb2*tau + 2.D0*
     &    aINV**2*bb1*tau - 4.D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1**2
     &     )


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1W2_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W2bub1

        return
        end

C--------------- W2-bub2-------------------------------------

        double precision function Fbub2W2_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W2_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub2W2_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W2_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W2_psi2schic1=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W2_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W2_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

         p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )


      W1bub2 =
     &  + ss2*p2q**(-1) * (  - 2.D0*aINV )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 4.D0*aINV**3*bb1*bb2 - 4.D0*
     &    aINV**3*bb1**2 )

      W2bub2 = 0.d0

      W3bub2 = 0.d0

      W4bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb2**2 - 4.D0*aINV**2*bb1*bb2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb2**2 + 16.D0*
     &    aINV**3*bb1*bb2 - 4.D0*aINV**4*bb2**4*hm2**2 - 12.D0*aINV**4*
     &    bb1*bb2**3*hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1**3*bb2*hm2**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1*bb2**3
     &     - 16.D0*aINV**4*bb1**2*bb2**2 - 8.D0*aINV**4*bb1**3*bb2 )

      W5bub2 =
     &  + ss2*p2q**(-1) * (  - 2.D0*aINV )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 4.D0*aINV**3*bb1*bb2 - 4.D0*
     &    aINV**3*bb1**2 )


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W2_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W2bub2

        return
        end

C     W3

C------------ W3-loop  ----------------------------------

        double precision function FloopW3_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW3_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps

        external FFloopW3_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW3_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW3_psi2schic1=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW3_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW3_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
C

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      W1loop =
     &  + p2q**(-1) * (  - 4.D0*qm**2 + 4.D0*aINV - 4.D0*aINV*bb1*qm**2
     &     - 12.D0*aINV**2*bb1 - 8.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*
     &    aINV**2*bb1**2*hm2**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D0
     &    *aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*bb1**3*hm2**2 )
      W1loop = W1loop + ss1*CC1*p2q**(-1) * (  - hm2**2*qm**2 + 6.D0*
     &    aINV*qm**2 + aINV*hm2**2 + 4.D0*aINV*bb2*hm2**2*qm**2 + 3.D0*
     &    aINV*bb1*hm2**2*qm**2 - 18.D0*aINV**2 - 8.D0*aINV**2*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb2**2*hm2**2*qm**2 + 12.D0*aINV**2*bb1
     &    *qm**2 - 15.D0*aINV**2*bb1*hm2**2 - 4.D0*aINV**2*bb1*bb2*
     &    hm2**2*qm**2 - 2.D0*aINV**2*bb1*bb2*hm2**4 - 2.D0*aINV**2*
     &    bb1**2*hm2**4 + 6.D0*aINV**3*bb2**2*hm2**2 + 48.D0*aINV**3*
     &    bb1 + 60.D0*aINV**3*bb1*bb2*hm2**2 - 4.D0*aINV**3*bb1*bb2**2*
     &    hm2**2*qm**2 + 9.D0*aINV**3*bb1*bb2**2*hm2**4 + 54.D0*aINV**3
     &    *bb1**2*hm2**2 - 8.D0*aINV**3*bb1**2*bb2*hm2**2*qm**2 + 18.D0
     &    *aINV**3*bb1**2*bb2*hm2**4 - 4.D0*aINV**3*bb1**3*hm2**2*qm**2
     &     + 9.D0*aINV**3*bb1**3*hm2**4 - 32.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 12.D0*aINV**4*bb1*bb2**3*hm2**4 - 64.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 - 36.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 32.D0
     &    *aINV**4*bb1**3*hm2**2 - 36.D0*aINV**4*bb1**3*bb2*hm2**4 - 12.
     &    D0*aINV**4*bb1**4*hm2**4 )
      W1loop = W1loop + ss1*CC1*p2q**(-1) * ( 4.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 16.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 24.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4 + 16.D0*aINV**5*bb1**4*bb2*hm2**4 + 4.D0
     &    *aINV**5*bb1**5*hm2**4 )
      W1loop = W1loop + ss1*CC1 * (  - 2.D0*qm**2 + 2.D0*aINV + 4.D0*
     &    aINV*bb2*qm**2 + 6.D0*aINV*bb1*qm**2 - 6.D0*aINV**2*bb2 - 26.D
     &    0*aINV**2*bb1 - 4.D0*aINV**2*bb1*bb2*qm**2 - 5.D0*aINV**2*bb1
     &    *bb2*hm2**2 - 7.D0*aINV**2*bb1**2*hm2**2 + 44.D0*aINV**3*bb1*
     &    bb2 + 14.D0*aINV**3*bb1*bb2**2*hm2**2 + 92.D0*aINV**3*bb1**2
     &     - 8.D0*aINV**3*bb1**2*bb2*qm**2 + 46.D0*aINV**3*bb1**2*bb2*
     &    hm2**2 - 8.D0*aINV**3*bb1**3*qm**2 + 32.D0*aINV**3*bb1**3*
     &    hm2**2 - 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 64.D0*aINV**4*
     &    bb1**2*bb2 - 60.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 64.D0*
     &    aINV**4*bb1**3 - 96.D0*aINV**4*bb1**3*bb2*hm2**2 - 44.D0*
     &    aINV**4*bb1**4*hm2**2 + 16.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    48.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 48.D0*aINV**5*bb1**4*bb2
     &    *hm2**2 + 16.D0*aINV**5*bb1**5*hm2**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 2.D0*aINV**2*bb1*bb2 - 6.D0*
     &    aINV**2*bb1**2 + 4.D0*aINV**3*bb1*bb2**2 + 24.D0*aINV**3*
     &    bb1**2*bb2 + 28.D0*aINV**3*bb1**3 - 16.D0*aINV**4*bb1**2*
     &    bb2**2 - 56.D0*aINV**4*bb1**3*bb2 - 40.D0*aINV**4*bb1**4 + 16.
     &    D0*aINV**5*bb1**3*bb2**2 + 32.D0*aINV**5*bb1**4*bb2 + 16.D0*
     &    aINV**5*bb1**5 )
      W1loop = W1loop - 4.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.
     &    D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*bb1**3

      W2loop =
     &  + ss1*CC1 * (  - aINV*bb2*hm2**2 + 14.D0*aINV**2*bb2 + 5.D0*
     &    aINV**2*bb2**2*hm2**2 + 5.D0*aINV**2*bb1*bb2*hm2**2 - 16.D0*
     &    aINV**3*bb2**2 - 8.D0*aINV**3*bb2**3*hm2**2 - 16.D0*aINV**3*
     &    bb1*bb2 - 16.D0*aINV**3*bb1*bb2**2*hm2**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2 + 4.D0*aINV**4*bb2**4*hm2**2 + 12.D0*
     &    aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm2**2 )
      W2loop = W2loop + ss1*CC1*p2q * (  - 2.D0*aINV*bb2 + 6.D0*aINV**2
     &    *bb2**2 + 10.D0*aINV**2*bb1*bb2 - 4.D0*aINV**3*bb2**3 - 20.D0
     &    *aINV**3*bb1*bb2**2 - 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**4
     &    *bb1*bb2**3 + 16.D0*aINV**4*bb1**2*bb2**2 + 8.D0*aINV**4*
     &    bb1**3*bb2 )
      W2loop = W2loop - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 + 4.D0*
     &    aINV**2*bb1*bb2

      W3loop =
     &  + ss1*CC1 * ( 2.D0*aINV**2*bb2 + 4.D0*aINV**2*bb1 + aINV**2*bb1
     &    *bb2*hm2**2 + aINV**2*bb1**2*hm2**2 - 16.D0*aINV**3*bb1*bb2
     &     - 4.D0*aINV**3*bb1*bb2**2*hm2**2 - 16.D0*aINV**3*bb1**2 - 8.D
     &    0*aINV**3*bb1**2*bb2*hm2**2 - 4.D0*aINV**3*bb1**3*hm2**2 + 4.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 12.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*
     &    bb1**4*hm2**2 )
      W3loop = W3loop + ss1*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2 + 2.D0*
     &    aINV**2*bb1**2 - 4.D0*aINV**3*bb1*bb2**2 - 12.D0*aINV**3*
     &    bb1**2*bb2 - 8.D0*aINV**3*bb1**3 + 8.D0*aINV**4*bb1**2*bb2**2
     &     + 16.D0*aINV**4*bb1**3*bb2 + 8.D0*aINV**4*bb1**4 )
      W3loop = W3loop + 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2

      W4loop =
     &  + ss1*CC1 * (  - aINV*bb2*hm2**2 + 12.D0*aINV**2*bb2 + 5.D0*
     &    aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1 + 4.D0*aINV**2*bb1*
     &    bb2*hm2**2 - aINV**2*bb1**2*hm2**2 - 16.D0*aINV**3*bb2**2 - 8.
     &    D0*aINV**3*bb2**3*hm2**2 - 12.D0*aINV**3*bb1*bb2**2*hm2**2 + 
     &    16.D0*aINV**3*bb1**2 + 4.D0*aINV**3*bb1**3*hm2**2 + 4.D0*
     &    aINV**4*bb2**4*hm2**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 8.D0
     &    *aINV**4*bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**4*hm2**2 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 2.D0*aINV*bb2 + 6.D0*aINV**2
     &    *bb2**2 + 8.D0*aINV**2*bb1*bb2 - 2.D0*aINV**2*bb1**2 - 4.D0*
     &    aINV**3*bb2**3 - 16.D0*aINV**3*bb1*bb2**2 - 4.D0*aINV**3*
     &    bb1**2*bb2 + 8.D0*aINV**3*bb1**3 + 8.D0*aINV**4*bb1*bb2**3 + 
     &    8.D0*aINV**4*bb1**2*bb2**2 - 8.D0*aINV**4*bb1**3*bb2 - 8.D0*
     &    aINV**4*bb1**4 )
      W4loop = W4loop - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 - 4.D0*
     &    aINV**2*bb1**2

      W5loop =
     &  + p2q**(-1) * ( 8.D0*aINV - 4.D0*aINV*bb2*qm**2 + 4.D0*aINV*bb2
     &    *hm2**2 - 4.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*hm2**2 - 12.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*hm2**2 - 12.D0*aINV**2*bb1
     &     - 16.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*aINV**2*bb1**2*hm2**2
     &     + 4.D0*aINV**3*bb2**3*hm2**2 + 12.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 12.D0*aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*
     &    bb1**3*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q**(-1) * (  - 2.D0*aINV*qm**2 + 4.D0
     &    *aINV*hm2**2 - aINV*bb2*hm2**2*qm**2 + aINV*bb2*hm2**4 - aINV
     &    *bb1*hm2**2*qm**2 + aINV*bb1*hm2**4 - 30.D0*aINV**2 + 12.D0*
     &    aINV**2*bb2*qm**2 - 31.D0*aINV**2*bb2*hm2**2 + 4.D0*aINV**2*
     &    bb2**2*hm2**2*qm**2 - 6.D0*aINV**2*bb2**2*hm2**4 + 12.D0*
     &    aINV**2*bb1*qm**2 - 31.D0*aINV**2*bb1*hm2**2 + 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - 12.D0*aINV**2*bb1*bb2*hm2**4 + 4.D0*
     &    aINV**2*bb1**2*hm2**2*qm**2 - 6.D0*aINV**2*bb1**2*hm2**4 + 48.
     &    D0*aINV**3*bb2 + 58.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*
     &    bb2**3*hm2**2*qm**2 + 13.D0*aINV**3*bb2**3*hm2**4 + 48.D0*
     &    aINV**3*bb1 + 116.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*
     &    bb1*bb2**2*hm2**2*qm**2 + 39.D0*aINV**3*bb1*bb2**2*hm2**4 + 
     &    58.D0*aINV**3*bb1**2*hm2**2 - 12.D0*aINV**3*bb1**2*bb2*hm2**2
     &    *qm**2 + 39.D0*aINV**3*bb1**2*bb2*hm2**4 - 4.D0*aINV**3*
     &    bb1**3*hm2**2*qm**2 + 13.D0*aINV**3*bb1**3*hm2**4 - 32.D0*
     &    aINV**4*bb2**3*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q**(-1) * (  - 12.D0*aINV**4*bb2**4*
     &    hm2**4 - 96.D0*aINV**4*bb1*bb2**2*hm2**2 - 48.D0*aINV**4*bb1*
     &    bb2**3*hm2**4 - 96.D0*aINV**4*bb1**2*bb2*hm2**2 - 72.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4 - 32.D0*aINV**4*bb1**3*hm2**2 - 
     &    48.D0*aINV**4*bb1**3*bb2*hm2**4 - 12.D0*aINV**4*bb1**4*hm2**4
     &     + 4.D0*aINV**5*bb2**5*hm2**4 + 20.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 40.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 40.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4 + 20.D0*aINV**5*bb1**4*bb2*hm2**4 + 4.D0
     &    *aINV**5*bb1**5*hm2**4 )
      W5loop = W5loop + ss1*CC1 * ( 8.D0*aINV - 2.D0*aINV*bb2*qm**2 + 3.
     &    D0*aINV*bb2*hm2**2 - 2.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*
     &    hm2**2 - 34.D0*aINV**2*bb2 + 4.D0*aINV**2*bb2**2*qm**2 - 13.D0
     &    *aINV**2*bb2**2*hm2**2 - 58.D0*aINV**2*bb1 + 12.D0*aINV**2*
     &    bb1*bb2*qm**2 - 36.D0*aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*
     &    bb1**2*qm**2 - 23.D0*aINV**2*bb1**2*hm2**2 + 32.D0*aINV**3*
     &    bb2**2 + 18.D0*aINV**3*bb2**3*hm2**2 + 132.D0*aINV**3*bb1*bb2
     &     - 8.D0*aINV**3*bb1*bb2**2*qm**2 + 84.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 100.D0*aINV**3*bb1**2 - 16.D0*aINV**3*bb1**2*bb2*
     &    qm**2 + 114.D0*aINV**3*bb1**2*bb2*hm2**2 - 8.D0*aINV**3*
     &    bb1**3*qm**2 + 48.D0*aINV**3*bb1**3*hm2**2 - 8.D0*aINV**4*
     &    bb2**4*hm2**2 - 64.D0*aINV**4*bb1*bb2**2 - 68.D0*aINV**4*bb1*
     &    bb2**3*hm2**2 - 128.D0*aINV**4*bb1**2*bb2 - 156.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2 - 64.D0*aINV**4*bb1**3 - 140.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 44.D0*aINV**4*bb1**4*hm2**2 + 16.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 )
      W5loop = W5loop + ss1*CC1 * ( 64.D0*aINV**5*bb1**2*bb2**3*hm2**2
     &     + 96.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    bb2*hm2**2 + 16.D0*aINV**5*bb1**5*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q * ( 2.D0*aINV*bb2 + 4.D0*aINV*bb1
     &     - 6.D0*aINV**2*bb2**2 - 24.D0*aINV**2*bb1*bb2 - 22.D0*
     &    aINV**2*bb1**2 + 4.D0*aINV**3*bb2**3 + 36.D0*aINV**3*bb1*
     &    bb2**2 + 76.D0*aINV**3*bb1**2*bb2 + 44.D0*aINV**3*bb1**3 - 16.
     &    D0*aINV**4*bb1*bb2**3 - 72.D0*aINV**4*bb1**2*bb2**2 - 96.D0*
     &    aINV**4*bb1**3*bb2 - 40.D0*aINV**4*bb1**4 + 16.D0*aINV**5*
     &    bb1**2*bb2**3 + 48.D0*aINV**5*bb1**3*bb2**2 + 48.D0*aINV**5*
     &    bb1**4*bb2 + 16.D0*aINV**5*bb1**5 )
      W5loop = W5loop + 4.D0*aINV*bb2 + 8.D0*aINV*bb1 - 4.D0*aINV**2*
     &    bb2**2 - 16.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2 + 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*
     &    bb1**3


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW3_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W3loop

        return
        end

C------------  W3-bub1 ------------------------------

        double precision function Fbub1W3_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1W3_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub1W3_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1W3_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1W3_psi2schic1=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1W3_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1W3_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

         p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      W1bub1 = 0.d0

      W2bub1 = 0.d0

      W3bub1 = 0.d0

      W4bub1 =
     &  + ss1 * ( 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2 )
      W4bub1 = W4bub1 + ss1*CC1 * ( 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2
     &    *bb1**2 )
      W4bub1 = W4bub1 + ss1**2*CC1 * ( 2.D0*aINV**2*bb2*tau + 2.D0*
     &    aINV**2*bb1*tau - 16.D0*aINV**3*bb1*bb2 - 16.D0*aINV**3*
     &    bb1**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2 + 12.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0
     &    *aINV**4*bb1**4*hm2**2 )
      W4bub1 = W4bub1 + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2**2*
     &    tau - 8.D0*aINV**3*bb1**2*bb2*tau - 4.D0*aINV**3*bb1**3*tau
     &     + 8.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*bb2 + 8.D
     &    0*aINV**4*bb1**4 )

      W5bub1 =
     &  + ss1*p2q**(-1) * (  - 2.D0*aINV )
      W5bub1 = W5bub1 + ss1*CC1*p2q**(-1) * (  - 2.D0*aINV )
      W5bub1 = W5bub1 + ss1**2*CC1*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W5bub1 = W5bub1 + ss1**2*CC1 * ( 2.D0*aINV**2*bb2*tau + 2.D0*
     &    aINV**2*bb1*tau - 4.D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1**2
     &     )


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1W3_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W3bub1

        return
        end

C--------------- W3-bub2-------------------------------------

        double precision function Fbub2W3_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W3_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub2W3_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W3_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W3_psi2schic1=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W3_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W3_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

         p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )


      W1bub2 =
     &  + ss2*p2q**(-1) * (  - 2.D0*aINV )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 4.D0*aINV**3*bb1*bb2 - 4.D0*
     &    aINV**3*bb1**2 )

      W2bub2 = 0.d0

      W3bub2 = 0.d0

      W4bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb2**2 - 4.D0*aINV**2*bb1*bb2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb2**2 + 16.D0*
     &    aINV**3*bb1*bb2 - 4.D0*aINV**4*bb2**4*hm2**2 - 12.D0*aINV**4*
     &    bb1*bb2**3*hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1**3*bb2*hm2**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1*bb2**3
     &     - 16.D0*aINV**4*bb1**2*bb2**2 - 8.D0*aINV**4*bb1**3*bb2 )

      W5bub2 =
     &  + ss2*p2q**(-1) * (  - 2.D0*aINV )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 4.D0*aINV**3*bb1*bb2 - 4.D0*
     &    aINV**3*bb1**2 )


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W3_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W3bub2

        return
        end

C     W4

C------------ W4-loop  ----------------------------------

        double precision function FloopW4_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW4_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps

        external FFloopW4_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW4_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW4_psi2schic1=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW4_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW4_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
C

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      W1loop =
     &  + p2q**(-1) * (  - 4.D0*qm**2 + 4.D0*aINV - 4.D0*aINV*bb1*qm**2
     &     - 12.D0*aINV**2*bb1 - 8.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*
     &    aINV**2*bb1**2*hm2**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D0
     &    *aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*bb1**3*hm2**2 )
      W1loop = W1loop + ss1*CC1*p2q**(-1) * (  - hm2**2*qm**2 + 6.D0*
     &    aINV*qm**2 + aINV*hm2**2 + 4.D0*aINV*bb2*hm2**2*qm**2 + 3.D0*
     &    aINV*bb1*hm2**2*qm**2 - 18.D0*aINV**2 - 8.D0*aINV**2*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb2**2*hm2**2*qm**2 + 12.D0*aINV**2*bb1
     &    *qm**2 - 15.D0*aINV**2*bb1*hm2**2 - 4.D0*aINV**2*bb1*bb2*
     &    hm2**2*qm**2 - 2.D0*aINV**2*bb1*bb2*hm2**4 - 2.D0*aINV**2*
     &    bb1**2*hm2**4 + 6.D0*aINV**3*bb2**2*hm2**2 + 48.D0*aINV**3*
     &    bb1 + 60.D0*aINV**3*bb1*bb2*hm2**2 - 4.D0*aINV**3*bb1*bb2**2*
     &    hm2**2*qm**2 + 9.D0*aINV**3*bb1*bb2**2*hm2**4 + 54.D0*aINV**3
     &    *bb1**2*hm2**2 - 8.D0*aINV**3*bb1**2*bb2*hm2**2*qm**2 + 18.D0
     &    *aINV**3*bb1**2*bb2*hm2**4 - 4.D0*aINV**3*bb1**3*hm2**2*qm**2
     &     + 9.D0*aINV**3*bb1**3*hm2**4 - 32.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 12.D0*aINV**4*bb1*bb2**3*hm2**4 - 64.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 - 36.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 32.D0
     &    *aINV**4*bb1**3*hm2**2 - 36.D0*aINV**4*bb1**3*bb2*hm2**4 - 12.
     &    D0*aINV**4*bb1**4*hm2**4 )
      W1loop = W1loop + ss1*CC1*p2q**(-1) * ( 4.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 16.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 24.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4 + 16.D0*aINV**5*bb1**4*bb2*hm2**4 + 4.D0
     &    *aINV**5*bb1**5*hm2**4 )
      W1loop = W1loop + ss1*CC1 * (  - 2.D0*qm**2 + 2.D0*aINV + 4.D0*
     &    aINV*bb2*qm**2 + 6.D0*aINV*bb1*qm**2 - 6.D0*aINV**2*bb2 - 26.D
     &    0*aINV**2*bb1 - 4.D0*aINV**2*bb1*bb2*qm**2 - 5.D0*aINV**2*bb1
     &    *bb2*hm2**2 - 7.D0*aINV**2*bb1**2*hm2**2 + 44.D0*aINV**3*bb1*
     &    bb2 + 14.D0*aINV**3*bb1*bb2**2*hm2**2 + 92.D0*aINV**3*bb1**2
     &     - 8.D0*aINV**3*bb1**2*bb2*qm**2 + 46.D0*aINV**3*bb1**2*bb2*
     &    hm2**2 - 8.D0*aINV**3*bb1**3*qm**2 + 32.D0*aINV**3*bb1**3*
     &    hm2**2 - 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 64.D0*aINV**4*
     &    bb1**2*bb2 - 60.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 64.D0*
     &    aINV**4*bb1**3 - 96.D0*aINV**4*bb1**3*bb2*hm2**2 - 44.D0*
     &    aINV**4*bb1**4*hm2**2 + 16.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    48.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 48.D0*aINV**5*bb1**4*bb2
     &    *hm2**2 + 16.D0*aINV**5*bb1**5*hm2**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 2.D0*aINV**2*bb1*bb2 - 6.D0*
     &    aINV**2*bb1**2 + 4.D0*aINV**3*bb1*bb2**2 + 24.D0*aINV**3*
     &    bb1**2*bb2 + 28.D0*aINV**3*bb1**3 - 16.D0*aINV**4*bb1**2*
     &    bb2**2 - 56.D0*aINV**4*bb1**3*bb2 - 40.D0*aINV**4*bb1**4 + 16.
     &    D0*aINV**5*bb1**3*bb2**2 + 32.D0*aINV**5*bb1**4*bb2 + 16.D0*
     &    aINV**5*bb1**5 )
      W1loop = W1loop - 4.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.
     &    D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*bb1**3

      W2loop =
     &  + ss1*CC1 * (  - aINV*bb2*hm2**2 + 14.D0*aINV**2*bb2 + 5.D0*
     &    aINV**2*bb2**2*hm2**2 + 5.D0*aINV**2*bb1*bb2*hm2**2 - 16.D0*
     &    aINV**3*bb2**2 - 8.D0*aINV**3*bb2**3*hm2**2 - 16.D0*aINV**3*
     &    bb1*bb2 - 16.D0*aINV**3*bb1*bb2**2*hm2**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2 + 4.D0*aINV**4*bb2**4*hm2**2 + 12.D0*
     &    aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm2**2 )
      W2loop = W2loop + ss1*CC1*p2q * (  - 2.D0*aINV*bb2 + 6.D0*aINV**2
     &    *bb2**2 + 10.D0*aINV**2*bb1*bb2 - 4.D0*aINV**3*bb2**3 - 20.D0
     &    *aINV**3*bb1*bb2**2 - 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**4
     &    *bb1*bb2**3 + 16.D0*aINV**4*bb1**2*bb2**2 + 8.D0*aINV**4*
     &    bb1**3*bb2 )
      W2loop = W2loop - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 + 4.D0*
     &    aINV**2*bb1*bb2

      W3loop =
     &  + ss1*CC1 * ( 2.D0*aINV**2*bb2 + 4.D0*aINV**2*bb1 + aINV**2*bb1
     &    *bb2*hm2**2 + aINV**2*bb1**2*hm2**2 - 16.D0*aINV**3*bb1*bb2
     &     - 4.D0*aINV**3*bb1*bb2**2*hm2**2 - 16.D0*aINV**3*bb1**2 - 8.D
     &    0*aINV**3*bb1**2*bb2*hm2**2 - 4.D0*aINV**3*bb1**3*hm2**2 + 4.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 12.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*
     &    bb1**4*hm2**2 )
      W3loop = W3loop + ss1*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2 + 2.D0*
     &    aINV**2*bb1**2 - 4.D0*aINV**3*bb1*bb2**2 - 12.D0*aINV**3*
     &    bb1**2*bb2 - 8.D0*aINV**3*bb1**3 + 8.D0*aINV**4*bb1**2*bb2**2
     &     + 16.D0*aINV**4*bb1**3*bb2 + 8.D0*aINV**4*bb1**4 )
      W3loop = W3loop + 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2

      W4loop =
     &  + ss1*CC1 * (  - aINV*bb2*hm2**2 + 12.D0*aINV**2*bb2 + 5.D0*
     &    aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1 + 4.D0*aINV**2*bb1*
     &    bb2*hm2**2 - aINV**2*bb1**2*hm2**2 - 16.D0*aINV**3*bb2**2 - 8.
     &    D0*aINV**3*bb2**3*hm2**2 - 12.D0*aINV**3*bb1*bb2**2*hm2**2 + 
     &    16.D0*aINV**3*bb1**2 + 4.D0*aINV**3*bb1**3*hm2**2 + 4.D0*
     &    aINV**4*bb2**4*hm2**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 8.D0
     &    *aINV**4*bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**4*hm2**2 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 2.D0*aINV*bb2 + 6.D0*aINV**2
     &    *bb2**2 + 8.D0*aINV**2*bb1*bb2 - 2.D0*aINV**2*bb1**2 - 4.D0*
     &    aINV**3*bb2**3 - 16.D0*aINV**3*bb1*bb2**2 - 4.D0*aINV**3*
     &    bb1**2*bb2 + 8.D0*aINV**3*bb1**3 + 8.D0*aINV**4*bb1*bb2**3 + 
     &    8.D0*aINV**4*bb1**2*bb2**2 - 8.D0*aINV**4*bb1**3*bb2 - 8.D0*
     &    aINV**4*bb1**4 )
      W4loop = W4loop - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 - 4.D0*
     &    aINV**2*bb1**2

      W5loop =
     &  + p2q**(-1) * ( 8.D0*aINV - 4.D0*aINV*bb2*qm**2 + 4.D0*aINV*bb2
     &    *hm2**2 - 4.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*hm2**2 - 12.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*hm2**2 - 12.D0*aINV**2*bb1
     &     - 16.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*aINV**2*bb1**2*hm2**2
     &     + 4.D0*aINV**3*bb2**3*hm2**2 + 12.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 12.D0*aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*
     &    bb1**3*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q**(-1) * (  - 2.D0*aINV*qm**2 + 4.D0
     &    *aINV*hm2**2 - aINV*bb2*hm2**2*qm**2 + aINV*bb2*hm2**4 - aINV
     &    *bb1*hm2**2*qm**2 + aINV*bb1*hm2**4 - 30.D0*aINV**2 + 12.D0*
     &    aINV**2*bb2*qm**2 - 31.D0*aINV**2*bb2*hm2**2 + 4.D0*aINV**2*
     &    bb2**2*hm2**2*qm**2 - 6.D0*aINV**2*bb2**2*hm2**4 + 12.D0*
     &    aINV**2*bb1*qm**2 - 31.D0*aINV**2*bb1*hm2**2 + 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - 12.D0*aINV**2*bb1*bb2*hm2**4 + 4.D0*
     &    aINV**2*bb1**2*hm2**2*qm**2 - 6.D0*aINV**2*bb1**2*hm2**4 + 48.
     &    D0*aINV**3*bb2 + 58.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*
     &    bb2**3*hm2**2*qm**2 + 13.D0*aINV**3*bb2**3*hm2**4 + 48.D0*
     &    aINV**3*bb1 + 116.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*
     &    bb1*bb2**2*hm2**2*qm**2 + 39.D0*aINV**3*bb1*bb2**2*hm2**4 + 
     &    58.D0*aINV**3*bb1**2*hm2**2 - 12.D0*aINV**3*bb1**2*bb2*hm2**2
     &    *qm**2 + 39.D0*aINV**3*bb1**2*bb2*hm2**4 - 4.D0*aINV**3*
     &    bb1**3*hm2**2*qm**2 + 13.D0*aINV**3*bb1**3*hm2**4 - 32.D0*
     &    aINV**4*bb2**3*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q**(-1) * (  - 12.D0*aINV**4*bb2**4*
     &    hm2**4 - 96.D0*aINV**4*bb1*bb2**2*hm2**2 - 48.D0*aINV**4*bb1*
     &    bb2**3*hm2**4 - 96.D0*aINV**4*bb1**2*bb2*hm2**2 - 72.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4 - 32.D0*aINV**4*bb1**3*hm2**2 - 
     &    48.D0*aINV**4*bb1**3*bb2*hm2**4 - 12.D0*aINV**4*bb1**4*hm2**4
     &     + 4.D0*aINV**5*bb2**5*hm2**4 + 20.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 40.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 40.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4 + 20.D0*aINV**5*bb1**4*bb2*hm2**4 + 4.D0
     &    *aINV**5*bb1**5*hm2**4 )
      W5loop = W5loop + ss1*CC1 * ( 8.D0*aINV - 2.D0*aINV*bb2*qm**2 + 3.
     &    D0*aINV*bb2*hm2**2 - 2.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*
     &    hm2**2 - 34.D0*aINV**2*bb2 + 4.D0*aINV**2*bb2**2*qm**2 - 13.D0
     &    *aINV**2*bb2**2*hm2**2 - 58.D0*aINV**2*bb1 + 12.D0*aINV**2*
     &    bb1*bb2*qm**2 - 36.D0*aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*
     &    bb1**2*qm**2 - 23.D0*aINV**2*bb1**2*hm2**2 + 32.D0*aINV**3*
     &    bb2**2 + 18.D0*aINV**3*bb2**3*hm2**2 + 132.D0*aINV**3*bb1*bb2
     &     - 8.D0*aINV**3*bb1*bb2**2*qm**2 + 84.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 100.D0*aINV**3*bb1**2 - 16.D0*aINV**3*bb1**2*bb2*
     &    qm**2 + 114.D0*aINV**3*bb1**2*bb2*hm2**2 - 8.D0*aINV**3*
     &    bb1**3*qm**2 + 48.D0*aINV**3*bb1**3*hm2**2 - 8.D0*aINV**4*
     &    bb2**4*hm2**2 - 64.D0*aINV**4*bb1*bb2**2 - 68.D0*aINV**4*bb1*
     &    bb2**3*hm2**2 - 128.D0*aINV**4*bb1**2*bb2 - 156.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2 - 64.D0*aINV**4*bb1**3 - 140.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 44.D0*aINV**4*bb1**4*hm2**2 + 16.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 )
      W5loop = W5loop + ss1*CC1 * ( 64.D0*aINV**5*bb1**2*bb2**3*hm2**2
     &     + 96.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    bb2*hm2**2 + 16.D0*aINV**5*bb1**5*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q * ( 2.D0*aINV*bb2 + 4.D0*aINV*bb1
     &     - 6.D0*aINV**2*bb2**2 - 24.D0*aINV**2*bb1*bb2 - 22.D0*
     &    aINV**2*bb1**2 + 4.D0*aINV**3*bb2**3 + 36.D0*aINV**3*bb1*
     &    bb2**2 + 76.D0*aINV**3*bb1**2*bb2 + 44.D0*aINV**3*bb1**3 - 16.
     &    D0*aINV**4*bb1*bb2**3 - 72.D0*aINV**4*bb1**2*bb2**2 - 96.D0*
     &    aINV**4*bb1**3*bb2 - 40.D0*aINV**4*bb1**4 + 16.D0*aINV**5*
     &    bb1**2*bb2**3 + 48.D0*aINV**5*bb1**3*bb2**2 + 48.D0*aINV**5*
     &    bb1**4*bb2 + 16.D0*aINV**5*bb1**5 )
      W5loop = W5loop + 4.D0*aINV*bb2 + 8.D0*aINV*bb1 - 4.D0*aINV**2*
     &    bb2**2 - 16.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2 + 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*
     &    bb1**3


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW4_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W4loop

        return
        end

C------------  W4-bub1 ------------------------------

        double precision function Fbub1W4_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1W4_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub1W4_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1W4_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1W4_psi2schic1=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1W4_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1W4_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

         p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      W1bub1 = 0.d0

      W2bub1 = 0.d0

      W3bub1 = 0.d0

      W4bub1 =
     &  + ss1 * ( 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2 )
      W4bub1 = W4bub1 + ss1*CC1 * ( 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2
     &    *bb1**2 )
      W4bub1 = W4bub1 + ss1**2*CC1 * ( 2.D0*aINV**2*bb2*tau + 2.D0*
     &    aINV**2*bb1*tau - 16.D0*aINV**3*bb1*bb2 - 16.D0*aINV**3*
     &    bb1**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2 + 12.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0
     &    *aINV**4*bb1**4*hm2**2 )
      W4bub1 = W4bub1 + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2**2*
     &    tau - 8.D0*aINV**3*bb1**2*bb2*tau - 4.D0*aINV**3*bb1**3*tau
     &     + 8.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*bb2 + 8.D
     &    0*aINV**4*bb1**4 )

      W5bub1 =
     &  + ss1*p2q**(-1) * (  - 2.D0*aINV )
      W5bub1 = W5bub1 + ss1*CC1*p2q**(-1) * (  - 2.D0*aINV )
      W5bub1 = W5bub1 + ss1**2*CC1*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W5bub1 = W5bub1 + ss1**2*CC1 * ( 2.D0*aINV**2*bb2*tau + 2.D0*
     &    aINV**2*bb1*tau - 4.D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1**2
     &     )


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1W4_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W4bub1

        return
        end

C--------------- W4-bub2-------------------------------------

        double precision function Fbub2W4_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W4_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub2W4_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W4_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W4_psi2schic1=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W4_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W4_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

         p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )


      W1bub2 =
     &  + ss2*p2q**(-1) * (  - 2.D0*aINV )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 4.D0*aINV**3*bb1*bb2 - 4.D0*
     &    aINV**3*bb1**2 )

      W2bub2 = 0.d0

      W3bub2 = 0.d0

      W4bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb2**2 - 4.D0*aINV**2*bb1*bb2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb2**2 + 16.D0*
     &    aINV**3*bb1*bb2 - 4.D0*aINV**4*bb2**4*hm2**2 - 12.D0*aINV**4*
     &    bb1*bb2**3*hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1**3*bb2*hm2**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1*bb2**3
     &     - 16.D0*aINV**4*bb1**2*bb2**2 - 8.D0*aINV**4*bb1**3*bb2 )

      W5bub2 =
     &  + ss2*p2q**(-1) * (  - 2.D0*aINV )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 4.D0*aINV**3*bb1*bb2 - 4.D0*
     &    aINV**3*bb1**2 )


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W4_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W4bub2

        return
        end

C     W5

C------------ W5-loop  ----------------------------------

        double precision function FloopW5_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFloopW5_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps

        external FFloopW5_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW5_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        FloopW5_psi2schic1=finval

        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW5_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFloopW5_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
C

        x1=x(1)
        x2=x(2)

        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1
      
      aINV = 1.d0/aa 

      bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )


      W1loop =
     &  + p2q**(-1) * (  - 4.D0*qm**2 + 4.D0*aINV - 4.D0*aINV*bb1*qm**2
     &     - 12.D0*aINV**2*bb1 - 8.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*
     &    aINV**2*bb1**2*hm2**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D0
     &    *aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*bb1**3*hm2**2 )
      W1loop = W1loop + ss1*CC1*p2q**(-1) * (  - hm2**2*qm**2 + 6.D0*
     &    aINV*qm**2 + aINV*hm2**2 + 4.D0*aINV*bb2*hm2**2*qm**2 + 3.D0*
     &    aINV*bb1*hm2**2*qm**2 - 18.D0*aINV**2 - 8.D0*aINV**2*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb2**2*hm2**2*qm**2 + 12.D0*aINV**2*bb1
     &    *qm**2 - 15.D0*aINV**2*bb1*hm2**2 - 4.D0*aINV**2*bb1*bb2*
     &    hm2**2*qm**2 - 2.D0*aINV**2*bb1*bb2*hm2**4 - 2.D0*aINV**2*
     &    bb1**2*hm2**4 + 6.D0*aINV**3*bb2**2*hm2**2 + 48.D0*aINV**3*
     &    bb1 + 60.D0*aINV**3*bb1*bb2*hm2**2 - 4.D0*aINV**3*bb1*bb2**2*
     &    hm2**2*qm**2 + 9.D0*aINV**3*bb1*bb2**2*hm2**4 + 54.D0*aINV**3
     &    *bb1**2*hm2**2 - 8.D0*aINV**3*bb1**2*bb2*hm2**2*qm**2 + 18.D0
     &    *aINV**3*bb1**2*bb2*hm2**4 - 4.D0*aINV**3*bb1**3*hm2**2*qm**2
     &     + 9.D0*aINV**3*bb1**3*hm2**4 - 32.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 12.D0*aINV**4*bb1*bb2**3*hm2**4 - 64.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 - 36.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 32.D0
     &    *aINV**4*bb1**3*hm2**2 - 36.D0*aINV**4*bb1**3*bb2*hm2**4 - 12.
     &    D0*aINV**4*bb1**4*hm2**4 )
      W1loop = W1loop + ss1*CC1*p2q**(-1) * ( 4.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 16.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 24.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4 + 16.D0*aINV**5*bb1**4*bb2*hm2**4 + 4.D0
     &    *aINV**5*bb1**5*hm2**4 )
      W1loop = W1loop + ss1*CC1 * (  - 2.D0*qm**2 + 2.D0*aINV + 4.D0*
     &    aINV*bb2*qm**2 + 6.D0*aINV*bb1*qm**2 - 6.D0*aINV**2*bb2 - 26.D
     &    0*aINV**2*bb1 - 4.D0*aINV**2*bb1*bb2*qm**2 - 5.D0*aINV**2*bb1
     &    *bb2*hm2**2 - 7.D0*aINV**2*bb1**2*hm2**2 + 44.D0*aINV**3*bb1*
     &    bb2 + 14.D0*aINV**3*bb1*bb2**2*hm2**2 + 92.D0*aINV**3*bb1**2
     &     - 8.D0*aINV**3*bb1**2*bb2*qm**2 + 46.D0*aINV**3*bb1**2*bb2*
     &    hm2**2 - 8.D0*aINV**3*bb1**3*qm**2 + 32.D0*aINV**3*bb1**3*
     &    hm2**2 - 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 64.D0*aINV**4*
     &    bb1**2*bb2 - 60.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 64.D0*
     &    aINV**4*bb1**3 - 96.D0*aINV**4*bb1**3*bb2*hm2**2 - 44.D0*
     &    aINV**4*bb1**4*hm2**2 + 16.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    48.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 48.D0*aINV**5*bb1**4*bb2
     &    *hm2**2 + 16.D0*aINV**5*bb1**5*hm2**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 2.D0*aINV**2*bb1*bb2 - 6.D0*
     &    aINV**2*bb1**2 + 4.D0*aINV**3*bb1*bb2**2 + 24.D0*aINV**3*
     &    bb1**2*bb2 + 28.D0*aINV**3*bb1**3 - 16.D0*aINV**4*bb1**2*
     &    bb2**2 - 56.D0*aINV**4*bb1**3*bb2 - 40.D0*aINV**4*bb1**4 + 16.
     &    D0*aINV**5*bb1**3*bb2**2 + 32.D0*aINV**5*bb1**4*bb2 + 16.D0*
     &    aINV**5*bb1**5 )
      W1loop = W1loop - 4.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.
     &    D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*bb1**3

      W2loop =
     &  + ss1*CC1 * (  - aINV*bb2*hm2**2 + 14.D0*aINV**2*bb2 + 5.D0*
     &    aINV**2*bb2**2*hm2**2 + 5.D0*aINV**2*bb1*bb2*hm2**2 - 16.D0*
     &    aINV**3*bb2**2 - 8.D0*aINV**3*bb2**3*hm2**2 - 16.D0*aINV**3*
     &    bb1*bb2 - 16.D0*aINV**3*bb1*bb2**2*hm2**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2 + 4.D0*aINV**4*bb2**4*hm2**2 + 12.D0*
     &    aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm2**2 )
      W2loop = W2loop + ss1*CC1*p2q * (  - 2.D0*aINV*bb2 + 6.D0*aINV**2
     &    *bb2**2 + 10.D0*aINV**2*bb1*bb2 - 4.D0*aINV**3*bb2**3 - 20.D0
     &    *aINV**3*bb1*bb2**2 - 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**4
     &    *bb1*bb2**3 + 16.D0*aINV**4*bb1**2*bb2**2 + 8.D0*aINV**4*
     &    bb1**3*bb2 )
      W2loop = W2loop - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 + 4.D0*
     &    aINV**2*bb1*bb2

      W3loop =
     &  + ss1*CC1 * ( 2.D0*aINV**2*bb2 + 4.D0*aINV**2*bb1 + aINV**2*bb1
     &    *bb2*hm2**2 + aINV**2*bb1**2*hm2**2 - 16.D0*aINV**3*bb1*bb2
     &     - 4.D0*aINV**3*bb1*bb2**2*hm2**2 - 16.D0*aINV**3*bb1**2 - 8.D
     &    0*aINV**3*bb1**2*bb2*hm2**2 - 4.D0*aINV**3*bb1**3*hm2**2 + 4.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 12.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*
     &    bb1**4*hm2**2 )
      W3loop = W3loop + ss1*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2 + 2.D0*
     &    aINV**2*bb1**2 - 4.D0*aINV**3*bb1*bb2**2 - 12.D0*aINV**3*
     &    bb1**2*bb2 - 8.D0*aINV**3*bb1**3 + 8.D0*aINV**4*bb1**2*bb2**2
     &     + 16.D0*aINV**4*bb1**3*bb2 + 8.D0*aINV**4*bb1**4 )
      W3loop = W3loop + 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2

      W4loop =
     &  + ss1*CC1 * (  - aINV*bb2*hm2**2 + 12.D0*aINV**2*bb2 + 5.D0*
     &    aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1 + 4.D0*aINV**2*bb1*
     &    bb2*hm2**2 - aINV**2*bb1**2*hm2**2 - 16.D0*aINV**3*bb2**2 - 8.
     &    D0*aINV**3*bb2**3*hm2**2 - 12.D0*aINV**3*bb1*bb2**2*hm2**2 + 
     &    16.D0*aINV**3*bb1**2 + 4.D0*aINV**3*bb1**3*hm2**2 + 4.D0*
     &    aINV**4*bb2**4*hm2**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2 - 8.D0
     &    *aINV**4*bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**4*hm2**2 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 2.D0*aINV*bb2 + 6.D0*aINV**2
     &    *bb2**2 + 8.D0*aINV**2*bb1*bb2 - 2.D0*aINV**2*bb1**2 - 4.D0*
     &    aINV**3*bb2**3 - 16.D0*aINV**3*bb1*bb2**2 - 4.D0*aINV**3*
     &    bb1**2*bb2 + 8.D0*aINV**3*bb1**3 + 8.D0*aINV**4*bb1*bb2**3 + 
     &    8.D0*aINV**4*bb1**2*bb2**2 - 8.D0*aINV**4*bb1**3*bb2 - 8.D0*
     &    aINV**4*bb1**4 )
      W4loop = W4loop - 4.D0*aINV*bb2 + 4.D0*aINV**2*bb2**2 - 4.D0*
     &    aINV**2*bb1**2

      W5loop =
     &  + p2q**(-1) * ( 8.D0*aINV - 4.D0*aINV*bb2*qm**2 + 4.D0*aINV*bb2
     &    *hm2**2 - 4.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*hm2**2 - 12.D0*
     &    aINV**2*bb2 - 8.D0*aINV**2*bb2**2*hm2**2 - 12.D0*aINV**2*bb1
     &     - 16.D0*aINV**2*bb1*bb2*hm2**2 - 8.D0*aINV**2*bb1**2*hm2**2
     &     + 4.D0*aINV**3*bb2**3*hm2**2 + 12.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 12.D0*aINV**3*bb1**2*bb2*hm2**2 + 4.D0*aINV**3*
     &    bb1**3*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q**(-1) * (  - 2.D0*aINV*qm**2 + 4.D0
     &    *aINV*hm2**2 - aINV*bb2*hm2**2*qm**2 + aINV*bb2*hm2**4 - aINV
     &    *bb1*hm2**2*qm**2 + aINV*bb1*hm2**4 - 30.D0*aINV**2 + 12.D0*
     &    aINV**2*bb2*qm**2 - 31.D0*aINV**2*bb2*hm2**2 + 4.D0*aINV**2*
     &    bb2**2*hm2**2*qm**2 - 6.D0*aINV**2*bb2**2*hm2**4 + 12.D0*
     &    aINV**2*bb1*qm**2 - 31.D0*aINV**2*bb1*hm2**2 + 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - 12.D0*aINV**2*bb1*bb2*hm2**4 + 4.D0*
     &    aINV**2*bb1**2*hm2**2*qm**2 - 6.D0*aINV**2*bb1**2*hm2**4 + 48.
     &    D0*aINV**3*bb2 + 58.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*
     &    bb2**3*hm2**2*qm**2 + 13.D0*aINV**3*bb2**3*hm2**4 + 48.D0*
     &    aINV**3*bb1 + 116.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*
     &    bb1*bb2**2*hm2**2*qm**2 + 39.D0*aINV**3*bb1*bb2**2*hm2**4 + 
     &    58.D0*aINV**3*bb1**2*hm2**2 - 12.D0*aINV**3*bb1**2*bb2*hm2**2
     &    *qm**2 + 39.D0*aINV**3*bb1**2*bb2*hm2**4 - 4.D0*aINV**3*
     &    bb1**3*hm2**2*qm**2 + 13.D0*aINV**3*bb1**3*hm2**4 - 32.D0*
     &    aINV**4*bb2**3*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q**(-1) * (  - 12.D0*aINV**4*bb2**4*
     &    hm2**4 - 96.D0*aINV**4*bb1*bb2**2*hm2**2 - 48.D0*aINV**4*bb1*
     &    bb2**3*hm2**4 - 96.D0*aINV**4*bb1**2*bb2*hm2**2 - 72.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4 - 32.D0*aINV**4*bb1**3*hm2**2 - 
     &    48.D0*aINV**4*bb1**3*bb2*hm2**4 - 12.D0*aINV**4*bb1**4*hm2**4
     &     + 4.D0*aINV**5*bb2**5*hm2**4 + 20.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 40.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 40.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4 + 20.D0*aINV**5*bb1**4*bb2*hm2**4 + 4.D0
     &    *aINV**5*bb1**5*hm2**4 )
      W5loop = W5loop + ss1*CC1 * ( 8.D0*aINV - 2.D0*aINV*bb2*qm**2 + 3.
     &    D0*aINV*bb2*hm2**2 - 2.D0*aINV*bb1*qm**2 + 4.D0*aINV*bb1*
     &    hm2**2 - 34.D0*aINV**2*bb2 + 4.D0*aINV**2*bb2**2*qm**2 - 13.D0
     &    *aINV**2*bb2**2*hm2**2 - 58.D0*aINV**2*bb1 + 12.D0*aINV**2*
     &    bb1*bb2*qm**2 - 36.D0*aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*
     &    bb1**2*qm**2 - 23.D0*aINV**2*bb1**2*hm2**2 + 32.D0*aINV**3*
     &    bb2**2 + 18.D0*aINV**3*bb2**3*hm2**2 + 132.D0*aINV**3*bb1*bb2
     &     - 8.D0*aINV**3*bb1*bb2**2*qm**2 + 84.D0*aINV**3*bb1*bb2**2*
     &    hm2**2 + 100.D0*aINV**3*bb1**2 - 16.D0*aINV**3*bb1**2*bb2*
     &    qm**2 + 114.D0*aINV**3*bb1**2*bb2*hm2**2 - 8.D0*aINV**3*
     &    bb1**3*qm**2 + 48.D0*aINV**3*bb1**3*hm2**2 - 8.D0*aINV**4*
     &    bb2**4*hm2**2 - 64.D0*aINV**4*bb1*bb2**2 - 68.D0*aINV**4*bb1*
     &    bb2**3*hm2**2 - 128.D0*aINV**4*bb1**2*bb2 - 156.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2 - 64.D0*aINV**4*bb1**3 - 140.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 44.D0*aINV**4*bb1**4*hm2**2 + 16.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 )
      W5loop = W5loop + ss1*CC1 * ( 64.D0*aINV**5*bb1**2*bb2**3*hm2**2
     &     + 96.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    bb2*hm2**2 + 16.D0*aINV**5*bb1**5*hm2**2 )
      W5loop = W5loop + ss1*CC1*p2q * ( 2.D0*aINV*bb2 + 4.D0*aINV*bb1
     &     - 6.D0*aINV**2*bb2**2 - 24.D0*aINV**2*bb1*bb2 - 22.D0*
     &    aINV**2*bb1**2 + 4.D0*aINV**3*bb2**3 + 36.D0*aINV**3*bb1*
     &    bb2**2 + 76.D0*aINV**3*bb1**2*bb2 + 44.D0*aINV**3*bb1**3 - 16.
     &    D0*aINV**4*bb1*bb2**3 - 72.D0*aINV**4*bb1**2*bb2**2 - 96.D0*
     &    aINV**4*bb1**3*bb2 - 40.D0*aINV**4*bb1**4 + 16.D0*aINV**5*
     &    bb1**2*bb2**3 + 48.D0*aINV**5*bb1**3*bb2**2 + 48.D0*aINV**5*
     &    bb1**4*bb2 + 16.D0*aINV**5*bb1**5 )
      W5loop = W5loop + 4.D0*aINV*bb2 + 8.D0*aINV*bb1 - 4.D0*aINV**2*
     &    bb2**2 - 16.D0*aINV**2*bb1*bb2 - 12.D0*aINV**2*bb1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2 + 16.D0*aINV**3*bb1**2*bb2 + 8.D0*aINV**3*
     &    bb1**3


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW5_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W5loop

        return
        end

C------------  W5-bub1 ------------------------------

        double precision function Fbub1W5_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub1W5_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub1W5_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1W5_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub1W5_psi2schic1=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1W5_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub1W5_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

         p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )


      W1bub1 = 0.d0

      W2bub1 = 0.d0

      W3bub1 = 0.d0

      W4bub1 =
     &  + ss1 * ( 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2*bb1**2 )
      W4bub1 = W4bub1 + ss1*CC1 * ( 4.D0*aINV**2*bb1*bb2 + 4.D0*aINV**2
     &    *bb1**2 )
      W4bub1 = W4bub1 + ss1**2*CC1 * ( 2.D0*aINV**2*bb2*tau + 2.D0*
     &    aINV**2*bb1*tau - 16.D0*aINV**3*bb1*bb2 - 16.D0*aINV**3*
     &    bb1**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2 + 12.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0
     &    *aINV**4*bb1**4*hm2**2 )
      W4bub1 = W4bub1 + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2**2*
     &    tau - 8.D0*aINV**3*bb1**2*bb2*tau - 4.D0*aINV**3*bb1**3*tau
     &     + 8.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*bb2 + 8.D
     &    0*aINV**4*bb1**4 )

      W5bub1 =
     &  + ss1*p2q**(-1) * (  - 2.D0*aINV )
      W5bub1 = W5bub1 + ss1*CC1*p2q**(-1) * (  - 2.D0*aINV )
      W5bub1 = W5bub1 + ss1**2*CC1*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W5bub1 = W5bub1 + ss1**2*CC1 * ( 2.D0*aINV**2*bb2*tau + 2.D0*
     &    aINV**2*bb1*tau - 4.D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1**2
     &     )


       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub1W5_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W5bub1

        return
        end

C--------------- W5-bub2-------------------------------------

        double precision function Fbub2W5_psi2schic1(hm1,ss1,hm2,ss2,
     & qm,CC1)

        implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/CFbub2W5_psi2schic1/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
C
        external FFbub2W5_psi2schic1

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1

        hhm2=hm2
        sss2=ss2

        qqm=qm
        CCC1=CC1

        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W5_psi2schic1,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

        Fbub2W5_psi2schic1=finval

       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W5_psi2schic1(ndim,x)
        implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

        common/CFbub2W5_psi2schic1/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

         tau=x(3)

         p2q = (hm1**2-hm2**2)/2.d0


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )


      W1bub2 =
     &  + ss2*p2q**(-1) * (  - 2.D0*aINV )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 4.D0*aINV**3*bb1*bb2 - 4.D0*
     &    aINV**3*bb1**2 )

      W2bub2 = 0.d0

      W3bub2 = 0.d0

      W4bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb2**2 - 4.D0*aINV**2*bb1*bb2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb2**2 + 16.D0*
     &    aINV**3*bb1*bb2 - 4.D0*aINV**4*bb2**4*hm2**2 - 12.D0*aINV**4*
     &    bb1*bb2**3*hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1**3*bb2*hm2**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1*bb2**3
     &     - 16.D0*aINV**4*bb1**2*bb2**2 - 8.D0*aINV**4*bb1**3*bb2 )

      W5bub2 =
     &  + ss2*p2q**(-1) * (  - 2.D0*aINV )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**(-1) * ( 6.D0*aINV**2 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*hm2**2 - 2.D0*
     &    aINV**3*bb1**2*hm2**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 4.D0*aINV**3*bb1*bb2 - 4.D0*
     &    aINV**3*bb1**2 )

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFbub2W5_psi2schic1 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W5bub2

        return
        end




















































































******************************************************
C             Normalization      
*****************************************************
      
C--------  PP-Normalization  ------------------
      
	double precision function FPP_psi2schic2(hm,ss,qm1,qm2)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
	common/CFPP_psi2schic2/hhm,sss,qqm1,qqm2
C
        external FFPP_psi2schic2
       
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFPP_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FPP_psi2schic2=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFPP_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFPP_psi2schic2/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1
     
        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


      
C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFPP_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *PP

        return
        end

C------------  VV-normalization  ----------------------------------
      
	double precision function FVV_psi2schic2(hm,ss,qm1,qm2)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
	common/CFVV_psi2schic2/hhm,sss,qqm1,qqm2
C
        external FFVV_psi2schic2
       
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFVV_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FVV_psi2schic2=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFVV_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFVV_psi2schic2/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1
     
        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


      
C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFVV_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *VV

        return
        end

C------------  SS-normalization  ----------------------------------
      
	double precision function FSS_psi2schic2(hm,ss,qm1,qm2)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
	common/CFSS_psi2schic2/hhm,sss,qqm1,qqm2
C
        external FFSS_psi2schic2
       
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFSS_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FSS_psi2schic2=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFSS_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFSS_psi2schic2/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1
     
        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


      
C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFSS_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Scalar

        return
        end
      
C------------AA-normalization  ----------------------------------
      
	double precision function FAA_psi2schic2(hm,ss,qm1,qm2)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
	common/CFAA_psi2schic2/hhm,sss,qqm1,qqm2
C
        external FFAA_psi2schic2
       
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFAA_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FAA_psi2schic2=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFAA_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFAA_psi2schic2/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1
     
        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


      
C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFAA_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Axial

        return
        end

C------------ TT-normalization  ----------------------------------
      
	double precision function FTT_psi2schic2(hm,ss,qm1,qm2)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
	common/CFTT_psi2schic2/hhm,sss,qqm1,qqm2
C
        external FFTT_psi2schic2
       
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFTT_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FTT_psi2schic2=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFTT_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFTT_psi2schic2/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1
     
        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFTT_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Tensor

        return
        end

C--psi(2S) normalization from file charm_12.f at /Ytt/HQL/ort/ ----
      
C-------------------norm: V1V1  --------------------------

	double precision function FV1V1_psi2schic2(hm,ss,qm,CC1)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps         
	common/CFV1V1_psi2schic2/hhm,sss,qqm,CCC1
C
        external FFV1V1_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFV1V1_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
	FV1V1_psi2schic2=finval
C
        
       return
      deallocate(wrkstr)
        end
C-----------------------------------------------------------

        double precision function FFV1V1_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFV1V1_psi2schic2/hm,ss,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
        alp2=x1

C-----------   exponential  -----      


      aa =
     &  + t * ( 1.D0 )
      aa = aa + 2.D0*ss
    
      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )
      
C------numerator --------------

      V1V1 =
     &  + CC1 * (  - 12.D0*aINV*qm**2*alp2*t*ss - aINV*hm**2*alp2*t*ss
     &     - 18.D0*aINV**2*alp2*t*ss + 12.D0*aINV**2*bb*qm**2*alp2*t*ss
     &     + 3.D0*aINV**2*bb*hm**2*alp2*t*ss + 6.D0*aINV**2*bb**2*hm**2
     &    *qm**2*alp2*t*ss + 1.D0/2.D0*aINV**2*bb**2*hm**4*alp2*t*ss + 
     &    16.D0*aINV**3*bb*alp2*t*ss + 14.D0*aINV**3*bb**2*hm**2*alp2*t
     &    *ss - 4.D0*aINV**3*bb**3*hm**2*qm**2*alp2*t*ss - aINV**3*
     &    bb**3*hm**4*alp2*t*ss - 24.D0*aINV**4*bb**3*hm**2*alp2*t*ss
     &     - 2.D0*aINV**4*bb**4*hm**4*alp2*t*ss + 4.D0*aINV**5*bb**5*
     &    hm**4*alp2*t*ss )
      V1V1 = V1V1 + CC1**2 * ( 18.D0*aINV**2*qm**2*alp2*t*ss**2 + 3.D0/
     &    2.D0*aINV**2*hm**2*alp2*t*ss**2 + 36.D0*aINV**3*alp2*t*ss**2
     &     - 24.D0*aINV**3*bb*qm**2*alp2*t*ss**2 - 6.D0*aINV**3*bb*
     &    hm**2*alp2*t*ss**2 - 18.D0*aINV**3*bb**2*hm**2*qm**2*alp2*t*
     &    ss**2 - 3.D0/2.D0*aINV**3*bb**2*hm**4*alp2*t*ss**2 - 40.D0*
     &    aINV**4*bb*alp2*t*ss**2 - 44.D0*aINV**4*bb**2*hm**2*alp2*t*
     &    ss**2 + 16.D0*aINV**4*bb**3*hm**2*qm**2*alp2*t*ss**2 + 4.D0*
     &    aINV**4*bb**3*hm**4*alp2*t*ss**2 + 3.D0*aINV**4*bb**4*hm**4*
     &    qm**2*alp2*t*ss**2 + 1.D0/4.D0*aINV**4*bb**4*hm**6*alp2*t*
     &    ss**2 + 80.D0*aINV**5*bb**3*hm**2*alp2*t*ss**2 + 13.D0*
     &    aINV**5*bb**4*hm**4*alp2*t*ss**2 - 2.D0*aINV**5*bb**5*hm**4*
     &    qm**2*alp2*t*ss**2 - 1.D0/2.D0*aINV**5*bb**5*hm**6*alp2*t*
     &    ss**2 - 26.D0*aINV**6*bb**5*hm**4*alp2*t*ss**2 - aINV**6*
     &    bb**6*hm**6*alp2*t*ss**2 + 2.D0*aINV**7*bb**7*hm**6*alp2*t*
     &    ss**2 )
      V1V1 = V1V1 + 3.D0*qm**2*alp2*t + 1.D0/4.D0*hm**2*alp2*t + 3.D0*
     &    aINV*alp2*t - 2.D0*aINV*bb*qm**2*alp2*t - 1.D0/2.D0*aINV*bb*
     &    hm**2*alp2*t - 2.D0*aINV**2*bb*alp2*t - aINV**2*bb**2*hm**2*
     &    alp2*t + 2.D0*aINV**3*bb**3*hm**2*alp2*t

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFV1V1_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *V1V1   

         return
         end
      
C------------  VtoV  ----------------------------------

	double precision function FVtoV_psi2schic2(hm,ssum,qm)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps         
	common/CFVtoV_psi2schic2/hhm,sss,qqm
C
        external FFVtoV_psi2schic2
C
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ssum
        qqm=qm

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFVtoV_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
	FVtoV_psi2schic2=finval
C
        
       return
      deallocate(wrkstr)
        end
C
C-------------------------------------------------------
C
        double precision function FFVtoV_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFVtoV_psi2schic2/hm,ssum,qm
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
C        alp1=1.d0-x1
        alp2=x1
C     
        w=1.d0/2.d0

C-----------   exponential  -----      

      aa =
     &  + t * ( 1.D0 )
      aa = aa + ssum

      aINV = 1.d0/aa
  
      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )
    
C------numerator --------------

      VtoV =
     &  + hm**2 * ( 1.D0 )
      VtoV = VtoV + aINV * ( 4.D0 )
      VtoV = VtoV + aINV**2*hm**2 * (  - 4.D0*bb**2 )
      VtoV = VtoV + 4.D0*qm**2

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFVtoV_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *VtoV  

        return
        end

C------------  VtoVk2  ----------------------------------

	double precision function FVtoVk2_psi2schic2(hm,ssum,qm)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps         
	common/CFVtoVk2_psi2schic2/hhm,sss,qqm
C
        external FFVtoVk2_psi2schic2
C
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ssum
        qqm=qm

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFVtoVk2_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
	FVtoVk2_psi2schic2=finval
C
        
       return
      deallocate(wrkstr)
        end
C
C-------------------------------------------------------
C
        double precision function FFVtoVk2_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFVtoVk2_psi2schic2/hm,ssum,qm
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
C        alp1=1.d0-x1
        alp2=x1
C     
        w=1.d0/2.d0

C-----------   exponential  -----      
      aa =
     &  + t * ( 1.D0 )
      aa = aa + ssum

      aINV = 1.d0/aa
  
      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )
    
C------numerator --------------

      VtoVk2 =
     &  + aINV * (  - 8.D0*qm**2 )
      VtoVk2 = VtoVk2 + aINV*hm**2 * (  - 2.D0 )
      VtoVk2 = VtoVk2 + aINV**2 * (  - 12.D0 )
      VtoVk2 = VtoVk2 + aINV**2*hm**2 * ( 4.D0*bb**2*qm**2 )
      VtoVk2 = VtoVk2 + aINV**2*hm**4 * ( bb**2 )
      VtoVk2 = VtoVk2 + aINV**3*hm**2 * ( 20.D0*bb**2 )
      VtoVk2 = VtoVk2 + aINV**4*hm**4 * (  - 4.D0*bb**4 )

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFVtoVk2_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *VtoVk2  

        return
        end
      
C------------ psi2-chiC2: matrix element loop W1  -------------------------
      
	double precision function FloopW1_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1) 

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFloopW1_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFloopW1_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW1_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FloopW1_psi2schic2=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW1_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFloopW1_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        x1=x(1)
        x2=x(2)
 
        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

         endif
        
           p2q = (hm1**2-hm2**2)/2.d0        

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

       bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )



      W1loop =
     &  + ss1*CC1 * ( 32.D0*aINV**3*bb1*bb2 + 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2 - 32.D0*aINV**4*bb1*bb2**2 - 208.D0*aINV**4*bb1**2*bb2
     &     - 32.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*hm1**2 - 40.D0*aINV**4*bb1**3*bb2*hm1**2 + 192.D0*
     &    aINV**5*bb1**2*bb2**2 + 64.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    192.D0*aINV**5*bb1**3*bb2 + 96.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2 + 32.D0*aINV**5*bb1**3*bb2**2*hm1**2 + 64.D0*aINV**5*
     &    bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**2*bb2**4*hm2**2 - 96.D0
     &    *aINV**6*bb1**3*bb2**3*hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm1**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 32.D0*aINV**4*bb1**2*bb2**2
     &     + 32.D0*aINV**5*bb1**2*bb2**3 + 96.D0*aINV**5*bb1**3*bb2**2
     &     - 64.D0*aINV**6*bb1**3*bb2**3 - 64.D0*aINV**6*bb1**4*bb2**2
     &     )
      W1loop = W1loop + 32.D0*aINV**3*bb1**2*bb2 - 32.D0*aINV**4*bb1**2
     &    *bb2**2 - 32.D0*aINV**4*bb1**3*bb2

      W2loop =
     &  + p2q * ( 16.D0*aINV**3*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2
     &     - 8.D0*aINV**4*bb1**3*bb2 )
      W2loop = W2loop + ss1*CC1 * (  - 4.D0*aINV*qm**2 - 2.D0*aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 + 2.D0*aINV**2*bb2*qm**2 - 2.D0*
     &    aINV**2*bb2*hm2**2 + 28.D0*aINV**2*bb1*qm**2 - 6.D0*aINV**2*
     &    bb1*hm1**2 + 8.D0*aINV**2*bb1*bb2*hm2**2*qm**2 + aINV**2*bb1*
     &    bb2*hm1**2*qm**2 - aINV**2*bb1*bb2*hm1**2*hm2**2 + 9.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 - 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 40.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*bb1
     &    *bb2**2*hm2**2*qm**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**4 + 2.D0*
     &    aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 16.D0*aINV**3*bb1**2*qm**2
     &     + 36.D0*aINV**3*bb1**2*hm1**2 - 20.D0*aINV**3*bb1**2*bb2*
     &    hm2**2*qm**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2 + 12.D0*
     &    aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 12.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2 + 6.D0*aINV**3*bb1**3*hm1**4 - 2.D0*aINV**4*
     &    bb2**3*hm2**2 - 60.D0*aINV**4*bb1*bb2**2*hm2**2 + 4.D0*
     &    aINV**4*bb1*bb2**3*hm2**2*qm**2 )
      W2loop = W2loop + ss1*CC1 * (  - 12.D0*aINV**4*bb1*bb2**3*hm2**4
     &     - aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 108.D0*aINV**4*bb1**2*
     &    bb2*hm2**2 - 6.D0*aINV**4*bb1**2*bb2*hm1**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*qm**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**4 - 15.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 56.D0*
     &    aINV**4*bb1**3*hm1**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2*qm**2
     &     + 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 38.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - aINV**4*bb1**3*bb2*hm1**4 + 4.D0*
     &    aINV**4*bb1**4*hm1**2*qm**2 - 13.D0*aINV**4*bb1**4*hm1**4 + 
     &    24.D0*aINV**5*bb1*bb2**3*hm2**2 + 12.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 72.D0*aINV**5*bb1**2*bb2**2*hm2**2 + 44.D0*aINV**5*
     &    bb1**2*bb2**3*hm2**4 + 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*
     &    hm2**2 + 48.D0*aINV**5*bb1**3*bb2*hm2**2 + 24.D0*aINV**5*
     &    bb1**3*bb2*hm1**2 + 40.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 32.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 24.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W2loop = W2loop + ss1*CC1 * ( 44.D0*aINV**5*bb1**4*bb2*hm1**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**4*bb2*hm1**4 + 12.D0*aINV**5*
     &    bb1**5*hm1**4 - 4.D0*aINV**6*bb1*bb2**5*hm2**4 - 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 - 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 - 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 - 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 - 4.D0*aINV**6*bb1**6*hm1**4 )
      W2loop = W2loop + ss1*CC1*p2q * ( 8.D0*aINV**2*bb1*bb2*qm**2 + 24.
     &    D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1*bb2**2*qm**2 + 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 - 20.D0*aINV**3*bb1**2*bb2*qm**2 + 
     &    8.D0*aINV**3*bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb1*bb2**2 - 8.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 - 108.D0*aINV**4*bb1**2*bb2 + 8.D0
     &    *aINV**4*bb1**2*bb2**2*qm**2 - 40.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 8.D0*aINV**4*
     &    bb1**3*bb2*qm**2 - 34.D0*aINV**4*bb1**3*bb2*hm1**2 + 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 + 48.D0*aINV**5*bb1**2*bb2**2 + 52.D
     &    0*aINV**5*bb1**2*bb2**3*hm2**2 + 48.D0*aINV**5*bb1**3*bb2 + 
     &    80.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm1**2 + 44.D0*aINV**5*bb1**4*bb2*hm1**2 - 16.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**2 - 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2loop = W2loop + ss1*CC1*p2q**2 * (  - 16.D0*aINV**4*bb1**2*
     &    bb2**2 + 8.D0*aINV**5*bb1**2*bb2**3 + 40.D0*aINV**5*bb1**3*
     &    bb2**2 - 16.D0*aINV**6*bb1**3*bb2**3 - 16.D0*aINV**6*bb1**4*
     &    bb2**2 )
      W2loop = W2loop - 8.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 + 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 + 4.D0*
     &    aINV**2*bb1**2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2*bb2*hm2**2
     &     + 8.D0*aINV**3*bb1**3*hm1**2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2 - 4.D0*
     &    aINV**4*bb1**4*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop + ss1*CC1 * (  - 2.D0*aINV*qm**2 - aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 - 2.D0*aINV**2*bb2*qm**2 + 12.D0*
     &    aINV**2*bb1*qm**2 - 6.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - aINV**2*bb1*bb2*hm1**2*qm**2 + 4.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 + 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 - aINV**3*bb1*bb2**2
     &    *hm1**2*hm2**2 + 30.D0*aINV**3*bb1**2*hm1**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 4.D0*aINV**3*
     &    bb1**3*hm1**2*qm**2 + 5.D0*aINV**3*bb1**3*hm1**4 + 2.D0*
     &    aINV**4*bb2**3*hm2**2 + 20.D0*aINV**4*bb1*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2*qm**2 + 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**4 + aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 16.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 + 6.D0*aINV**4*bb1**2*bb2*hm1**2 - 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 )
      W3loop = W3loop + ss1*CC1 * ( 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 28.D0*aINV**4*bb1**3*hm1**2 - 4.D0*aINV**4*bb1**3*
     &    bb2*hm1**2*qm**2 - 12.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 
     &    aINV**4*bb1**3*bb2*hm1**4 - 8.D0*aINV**4*bb1**4*hm1**4 - 24.D0
     &    *aINV**5*bb1*bb2**3*hm2**2 - 8.D0*aINV**5*bb1*bb2**4*hm2**4
     &     - 48.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 16.D0*aINV**5*bb1**2*
     &    bb2**3*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*hm2**2 - 24.
     &    D0*aINV**5*bb1**3*bb2*hm1**2 - 12.D0*aINV**5*bb1**3*bb2**2*
     &    hm1**2*hm2**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**5*bb1**4*bb2*hm1**4 + 4.D0*aINV**5*bb1**5*hm1**4 + 4.D0
     &    *aINV**6*bb1*bb2**5*hm2**4 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 16.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*hm1**4 )
      W3loop = W3loop + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 8.D
     &    0*aINV**3*bb1*bb2 + 4.D0*aINV**3*bb1*bb2**2*qm**2 - 8.D0*
     &    aINV**3*bb1**2*bb2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 8.
     &    D0*aINV**4*bb1*bb2**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2*qm**2 + 2.D0
     &    *aINV**4*bb1**2*bb2**2*hm1**2 - 12.D0*aINV**4*bb1**3*bb2*
     &    hm1**2 - 4.D0*aINV**5*bb1*bb2**4*hm2**2 - 48.D0*aINV**5*
     &    bb1**2*bb2**2 - 24.D0*aINV**5*bb1**2*bb2**3*hm2**2 - 12.D0*
     &    aINV**5*bb1**3*bb2**2*hm1**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2
     &     + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 32.D0*aINV**6*bb1**3*
     &    bb2**3*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 )
      W3loop = W3loop + ss1*CC1*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**3 + 16.D0*aINV**6*bb1**3*bb2**3 )
      W3loop = W3loop - 4.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 - 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 4.D0*aINV**3*bb1**3*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1**3*bb2 )
      W4loop = W4loop + ss1*CC1 * ( 4.D0*aINV*qm**2 + 2.D0*aINV*bb1*
     &    hm1**2*qm**2 + 4.D0*aINV**2 + 4.D0*aINV**2*bb2*hm2**2 - 16.D0
     &    *aINV**2*bb1*qm**2 + 2.D0*aINV**2*bb1*hm1**2 - 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 + 2.D0*aINV**2*bb1*bb2*hm1**2*hm2**2 - 6.
     &    D0*aINV**2*bb1**2*hm1**2*qm**2 - 4.D0*aINV**3*bb2**2*hm2**2
     &     - 16.D0*aINV**3*bb1 - 40.D0*aINV**3*bb1*bb2*hm2**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2*qm**2 - 8.D0*aINV**3*bb1*bb2**2*
     &    hm2**4 - 2.D0*aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 32.D0*
     &    aINV**3*bb1**2*qm**2 + 8.D0*aINV**3*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1**2*bb2*hm2**2*qm**2 - 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2*hm2**2 + 2.D0*aINV**3*bb1**3*hm1**4 + 40.D0*aINV**4*
     &    bb1*bb2**2*hm2**2 + 16.D0*aINV**4*bb1*bb2**3*hm2**4 - 80.D0*
     &    aINV**4*bb1**2 - 24.D0*aINV**4*bb1**2*bb2*hm2**2 + 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 + 16.D0*aINV**4*bb1**2*
     &    bb2**2*hm2**4 + 6.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 64.
     &    D0*aINV**4*bb1**3*hm1**2 )
      W4loop = W4loop + ss1*CC1 * ( 16.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 8.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - 10.D0*aINV**4*bb1**4*hm1**4 - 8.D0*
     &    aINV**5*bb1*bb2**4*hm2**4 + 64.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 128.D0*aINV**5*
     &    bb1**3*bb2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 8.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    hm1**2 + 40.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 + 16.D0*
     &    aINV**5*bb1**5*hm1**4 - 8.D0*aINV**6*bb1**2*bb2**4*hm2**4 - 
     &    32.D0*aINV**6*bb1**3*bb2**3*hm2**4 - 32.D0*aINV**6*bb1**4*
     &    bb2**2*hm2**4 - 16.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 - 
     &    32.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 8.D0*aINV**6*bb1**6*
     &    hm1**4 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 8.D0*aINV**2*bb1*bb2*qm**2
     &     - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D
     &    0*aINV**3*bb1**2*bb2*qm**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2
     &     - 24.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**4*bb1**3*bb2*qm**2 - 12.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 128.D0
     &    *aINV**5*bb1**3*bb2 + 32.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 40.
     &    D0*aINV**5*bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W4loop = W4loop + ss1*CC1*p2q**2 * ( 16.D0*aINV**5*bb1**3*bb2**2
     &     - 32.D0*aINV**6*bb1**4*bb2**2 )
      W4loop = W4loop + 8.D0*aINV*bb1*qm**2 + 8.D0*aINV**2*bb1 + 8.D0*
     &    aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*bb1**2*qm**2 - 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2 + 8.D0*
     &    aINV**3*bb1**3*hm1**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 
     &    16.D0*aINV**4*bb1**3*bb2*hm2**2 - 8.D0*aINV**4*bb1**4*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb1 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop + ss1*CC1 * (  - aINV*hm1**2*qm**2 + 12.D0*
     &    aINV**2*qm**2 - 2.D0*aINV**2*hm2**2 - aINV**2*hm1**2 + 4.D0*
     &    aINV**2*bb2*hm2**2*qm**2 - aINV**2*bb2*hm1**2*hm2**2 + 4.D0*
     &    aINV**2*bb1*hm1**2*qm**2 - aINV**2*bb1*hm1**2*hm2**2 + 16.D0*
     &    aINV**3 + 24.D0*aINV**3*bb2*hm2**2 - 4.D0*aINV**3*bb2**2*
     &    hm2**2*qm**2 + 4.D0*aINV**3*bb2**2*hm2**4 + aINV**3*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**3*bb1*hm2**2 + 8.D0*aINV**3*bb1*
     &    hm1**2 - 8.D0*aINV**3*bb1*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1
     &    *bb2*hm2**4 + 6.D0*aINV**3*bb1*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 4.D0*aINV**3*bb1**2*hm1**2*
     &    hm2**2 + aINV**3*bb1**2*hm1**4 - 24.D0*aINV**4*bb2**2*hm2**2
     &     - 8.D0*aINV**4*bb2**3*hm2**4 - 48.D0*aINV**4*bb1*bb2*hm2**2
     &     - 20.D0*aINV**4*bb1*bb2**2*hm2**4 - 4.D0*aINV**4*bb1*bb2**2*
     &    hm1**2*hm2**2 - 24.D0*aINV**4*bb1**2*hm1**2 - 8.D0*aINV**4*
     &    bb1**2*bb2*hm2**4 - 16.D0*aINV**4*bb1**2*bb2*hm1**2*hm2**2 - 
     &    4.D0*aINV**4*bb1**3*hm1**2*hm2**2 )
      W5loop = W5loop + ss1*CC1 * (  - 4.D0*aINV**4*bb1**3*hm1**4 + 4.D0
     &    *aINV**5*bb2**4*hm2**4 + 16.D0*aINV**5*bb1*bb2**3*hm2**4 + 16.
     &    D0*aINV**5*bb1**2*bb2**2*hm2**4 + 8.D0*aINV**5*bb1**2*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**5*bb1**4*hm1**4 )
      W5loop = W5loop + ss1*CC1*p2q * (  - 2.D0*aINV**2 + 4.D0*aINV**2*
     &    bb2*qm**2 - aINV**2*bb1*hm1**2 + 8.D0*aINV**3*bb2 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 16.D0*aINV**3*bb1 - 8.D0*aINV**3*bb1*
     &    bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*
     &    bb2*hm1**2 + 4.D0*aINV**3*bb1**2*hm1**2 - 4.D0*aINV**4*bb2**3
     &    *hm2**2 - 48.D0*aINV**4*bb1*bb2 - 28.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 16.D0*aINV**4*bb1**2*bb2*hm2**2 - 12.D0*aINV**4*
     &    bb1**2*bb2*hm1**2 - 4.D0*aINV**4*bb1**3*hm1**2 + 16.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 + 32.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5loop = W5loop + ss1*CC1*p2q**2 * ( 4.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb1*bb2**2 - 8.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**5*
     &    bb1**2*bb2**2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm2**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1
 
       FFloopW1_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W1loop

        return
        end

C------------ chiC2: matrix element loop W2  -------------------------
      
	double precision function FloopW2_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1) 

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFloopW2_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFloopW2_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW2_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FloopW2_psi2schic2=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW2_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFloopW2_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        x1=x(1)
        x2=x(2)
 
        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

            endif
                   p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

       bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )



      W1loop =
     &  + ss1*CC1 * ( 32.D0*aINV**3*bb1*bb2 + 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2 - 32.D0*aINV**4*bb1*bb2**2 - 208.D0*aINV**4*bb1**2*bb2
     &     - 32.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*hm1**2 - 40.D0*aINV**4*bb1**3*bb2*hm1**2 + 192.D0*
     &    aINV**5*bb1**2*bb2**2 + 64.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    192.D0*aINV**5*bb1**3*bb2 + 96.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2 + 32.D0*aINV**5*bb1**3*bb2**2*hm1**2 + 64.D0*aINV**5*
     &    bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**2*bb2**4*hm2**2 - 96.D0
     &    *aINV**6*bb1**3*bb2**3*hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm1**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 32.D0*aINV**4*bb1**2*bb2**2
     &     + 32.D0*aINV**5*bb1**2*bb2**3 + 96.D0*aINV**5*bb1**3*bb2**2
     &     - 64.D0*aINV**6*bb1**3*bb2**3 - 64.D0*aINV**6*bb1**4*bb2**2
     &     )
      W1loop = W1loop + 32.D0*aINV**3*bb1**2*bb2 - 32.D0*aINV**4*bb1**2
     &    *bb2**2 - 32.D0*aINV**4*bb1**3*bb2

      W2loop =
     &  + p2q * ( 16.D0*aINV**3*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2
     &     - 8.D0*aINV**4*bb1**3*bb2 )
      W2loop = W2loop + ss1*CC1 * (  - 4.D0*aINV*qm**2 - 2.D0*aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 + 2.D0*aINV**2*bb2*qm**2 - 2.D0*
     &    aINV**2*bb2*hm2**2 + 28.D0*aINV**2*bb1*qm**2 - 6.D0*aINV**2*
     &    bb1*hm1**2 + 8.D0*aINV**2*bb1*bb2*hm2**2*qm**2 + aINV**2*bb1*
     &    bb2*hm1**2*qm**2 - aINV**2*bb1*bb2*hm1**2*hm2**2 + 9.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 - 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 40.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*bb1
     &    *bb2**2*hm2**2*qm**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**4 + 2.D0*
     &    aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 16.D0*aINV**3*bb1**2*qm**2
     &     + 36.D0*aINV**3*bb1**2*hm1**2 - 20.D0*aINV**3*bb1**2*bb2*
     &    hm2**2*qm**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2 + 12.D0*
     &    aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 12.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2 + 6.D0*aINV**3*bb1**3*hm1**4 - 2.D0*aINV**4*
     &    bb2**3*hm2**2 - 60.D0*aINV**4*bb1*bb2**2*hm2**2 + 4.D0*
     &    aINV**4*bb1*bb2**3*hm2**2*qm**2 )
      W2loop = W2loop + ss1*CC1 * (  - 12.D0*aINV**4*bb1*bb2**3*hm2**4
     &     - aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 108.D0*aINV**4*bb1**2*
     &    bb2*hm2**2 - 6.D0*aINV**4*bb1**2*bb2*hm1**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*qm**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**4 - 15.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 56.D0*
     &    aINV**4*bb1**3*hm1**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2*qm**2
     &     + 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 38.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - aINV**4*bb1**3*bb2*hm1**4 + 4.D0*
     &    aINV**4*bb1**4*hm1**2*qm**2 - 13.D0*aINV**4*bb1**4*hm1**4 + 
     &    24.D0*aINV**5*bb1*bb2**3*hm2**2 + 12.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 72.D0*aINV**5*bb1**2*bb2**2*hm2**2 + 44.D0*aINV**5*
     &    bb1**2*bb2**3*hm2**4 + 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*
     &    hm2**2 + 48.D0*aINV**5*bb1**3*bb2*hm2**2 + 24.D0*aINV**5*
     &    bb1**3*bb2*hm1**2 + 40.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 32.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 24.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W2loop = W2loop + ss1*CC1 * ( 44.D0*aINV**5*bb1**4*bb2*hm1**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**4*bb2*hm1**4 + 12.D0*aINV**5*
     &    bb1**5*hm1**4 - 4.D0*aINV**6*bb1*bb2**5*hm2**4 - 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 - 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 - 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 - 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 - 4.D0*aINV**6*bb1**6*hm1**4 )
      W2loop = W2loop + ss1*CC1*p2q * ( 8.D0*aINV**2*bb1*bb2*qm**2 + 24.
     &    D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1*bb2**2*qm**2 + 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 - 20.D0*aINV**3*bb1**2*bb2*qm**2 + 
     &    8.D0*aINV**3*bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb1*bb2**2 - 8.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 - 108.D0*aINV**4*bb1**2*bb2 + 8.D0
     &    *aINV**4*bb1**2*bb2**2*qm**2 - 40.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 8.D0*aINV**4*
     &    bb1**3*bb2*qm**2 - 34.D0*aINV**4*bb1**3*bb2*hm1**2 + 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 + 48.D0*aINV**5*bb1**2*bb2**2 + 52.D
     &    0*aINV**5*bb1**2*bb2**3*hm2**2 + 48.D0*aINV**5*bb1**3*bb2 + 
     &    80.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm1**2 + 44.D0*aINV**5*bb1**4*bb2*hm1**2 - 16.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**2 - 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2loop = W2loop + ss1*CC1*p2q**2 * (  - 16.D0*aINV**4*bb1**2*
     &    bb2**2 + 8.D0*aINV**5*bb1**2*bb2**3 + 40.D0*aINV**5*bb1**3*
     &    bb2**2 - 16.D0*aINV**6*bb1**3*bb2**3 - 16.D0*aINV**6*bb1**4*
     &    bb2**2 )
      W2loop = W2loop - 8.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 + 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 + 4.D0*
     &    aINV**2*bb1**2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2*bb2*hm2**2
     &     + 8.D0*aINV**3*bb1**3*hm1**2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2 - 4.D0*
     &    aINV**4*bb1**4*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop + ss1*CC1 * (  - 2.D0*aINV*qm**2 - aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 - 2.D0*aINV**2*bb2*qm**2 + 12.D0*
     &    aINV**2*bb1*qm**2 - 6.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - aINV**2*bb1*bb2*hm1**2*qm**2 + 4.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 + 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 - aINV**3*bb1*bb2**2
     &    *hm1**2*hm2**2 + 30.D0*aINV**3*bb1**2*hm1**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 4.D0*aINV**3*
     &    bb1**3*hm1**2*qm**2 + 5.D0*aINV**3*bb1**3*hm1**4 + 2.D0*
     &    aINV**4*bb2**3*hm2**2 + 20.D0*aINV**4*bb1*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2*qm**2 + 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**4 + aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 16.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 + 6.D0*aINV**4*bb1**2*bb2*hm1**2 - 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 )
      W3loop = W3loop + ss1*CC1 * ( 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 28.D0*aINV**4*bb1**3*hm1**2 - 4.D0*aINV**4*bb1**3*
     &    bb2*hm1**2*qm**2 - 12.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 
     &    aINV**4*bb1**3*bb2*hm1**4 - 8.D0*aINV**4*bb1**4*hm1**4 - 24.D0
     &    *aINV**5*bb1*bb2**3*hm2**2 - 8.D0*aINV**5*bb1*bb2**4*hm2**4
     &     - 48.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 16.D0*aINV**5*bb1**2*
     &    bb2**3*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*hm2**2 - 24.
     &    D0*aINV**5*bb1**3*bb2*hm1**2 - 12.D0*aINV**5*bb1**3*bb2**2*
     &    hm1**2*hm2**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**5*bb1**4*bb2*hm1**4 + 4.D0*aINV**5*bb1**5*hm1**4 + 4.D0
     &    *aINV**6*bb1*bb2**5*hm2**4 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 16.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*hm1**4 )
      W3loop = W3loop + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 8.D
     &    0*aINV**3*bb1*bb2 + 4.D0*aINV**3*bb1*bb2**2*qm**2 - 8.D0*
     &    aINV**3*bb1**2*bb2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 8.
     &    D0*aINV**4*bb1*bb2**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2*qm**2 + 2.D0
     &    *aINV**4*bb1**2*bb2**2*hm1**2 - 12.D0*aINV**4*bb1**3*bb2*
     &    hm1**2 - 4.D0*aINV**5*bb1*bb2**4*hm2**2 - 48.D0*aINV**5*
     &    bb1**2*bb2**2 - 24.D0*aINV**5*bb1**2*bb2**3*hm2**2 - 12.D0*
     &    aINV**5*bb1**3*bb2**2*hm1**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2
     &     + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 32.D0*aINV**6*bb1**3*
     &    bb2**3*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 )
      W3loop = W3loop + ss1*CC1*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**3 + 16.D0*aINV**6*bb1**3*bb2**3 )
      W3loop = W3loop - 4.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 - 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 4.D0*aINV**3*bb1**3*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1**3*bb2 )
      W4loop = W4loop + ss1*CC1 * ( 4.D0*aINV*qm**2 + 2.D0*aINV*bb1*
     &    hm1**2*qm**2 + 4.D0*aINV**2 + 4.D0*aINV**2*bb2*hm2**2 - 16.D0
     &    *aINV**2*bb1*qm**2 + 2.D0*aINV**2*bb1*hm1**2 - 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 + 2.D0*aINV**2*bb1*bb2*hm1**2*hm2**2 - 6.
     &    D0*aINV**2*bb1**2*hm1**2*qm**2 - 4.D0*aINV**3*bb2**2*hm2**2
     &     - 16.D0*aINV**3*bb1 - 40.D0*aINV**3*bb1*bb2*hm2**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2*qm**2 - 8.D0*aINV**3*bb1*bb2**2*
     &    hm2**4 - 2.D0*aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 32.D0*
     &    aINV**3*bb1**2*qm**2 + 8.D0*aINV**3*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1**2*bb2*hm2**2*qm**2 - 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2*hm2**2 + 2.D0*aINV**3*bb1**3*hm1**4 + 40.D0*aINV**4*
     &    bb1*bb2**2*hm2**2 + 16.D0*aINV**4*bb1*bb2**3*hm2**4 - 80.D0*
     &    aINV**4*bb1**2 - 24.D0*aINV**4*bb1**2*bb2*hm2**2 + 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 + 16.D0*aINV**4*bb1**2*
     &    bb2**2*hm2**4 + 6.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 64.
     &    D0*aINV**4*bb1**3*hm1**2 )
      W4loop = W4loop + ss1*CC1 * ( 16.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 8.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - 10.D0*aINV**4*bb1**4*hm1**4 - 8.D0*
     &    aINV**5*bb1*bb2**4*hm2**4 + 64.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 128.D0*aINV**5*
     &    bb1**3*bb2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 8.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    hm1**2 + 40.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 + 16.D0*
     &    aINV**5*bb1**5*hm1**4 - 8.D0*aINV**6*bb1**2*bb2**4*hm2**4 - 
     &    32.D0*aINV**6*bb1**3*bb2**3*hm2**4 - 32.D0*aINV**6*bb1**4*
     &    bb2**2*hm2**4 - 16.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 - 
     &    32.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 8.D0*aINV**6*bb1**6*
     &    hm1**4 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 8.D0*aINV**2*bb1*bb2*qm**2
     &     - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D
     &    0*aINV**3*bb1**2*bb2*qm**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2
     &     - 24.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**4*bb1**3*bb2*qm**2 - 12.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 128.D0
     &    *aINV**5*bb1**3*bb2 + 32.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 40.
     &    D0*aINV**5*bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W4loop = W4loop + ss1*CC1*p2q**2 * ( 16.D0*aINV**5*bb1**3*bb2**2
     &     - 32.D0*aINV**6*bb1**4*bb2**2 )
      W4loop = W4loop + 8.D0*aINV*bb1*qm**2 + 8.D0*aINV**2*bb1 + 8.D0*
     &    aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*bb1**2*qm**2 - 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2 + 8.D0*
     &    aINV**3*bb1**3*hm1**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 
     &    16.D0*aINV**4*bb1**3*bb2*hm2**2 - 8.D0*aINV**4*bb1**4*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb1 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop + ss1*CC1 * (  - aINV*hm1**2*qm**2 + 12.D0*
     &    aINV**2*qm**2 - 2.D0*aINV**2*hm2**2 - aINV**2*hm1**2 + 4.D0*
     &    aINV**2*bb2*hm2**2*qm**2 - aINV**2*bb2*hm1**2*hm2**2 + 4.D0*
     &    aINV**2*bb1*hm1**2*qm**2 - aINV**2*bb1*hm1**2*hm2**2 + 16.D0*
     &    aINV**3 + 24.D0*aINV**3*bb2*hm2**2 - 4.D0*aINV**3*bb2**2*
     &    hm2**2*qm**2 + 4.D0*aINV**3*bb2**2*hm2**4 + aINV**3*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**3*bb1*hm2**2 + 8.D0*aINV**3*bb1*
     &    hm1**2 - 8.D0*aINV**3*bb1*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1
     &    *bb2*hm2**4 + 6.D0*aINV**3*bb1*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 4.D0*aINV**3*bb1**2*hm1**2*
     &    hm2**2 + aINV**3*bb1**2*hm1**4 - 24.D0*aINV**4*bb2**2*hm2**2
     &     - 8.D0*aINV**4*bb2**3*hm2**4 - 48.D0*aINV**4*bb1*bb2*hm2**2
     &     - 20.D0*aINV**4*bb1*bb2**2*hm2**4 - 4.D0*aINV**4*bb1*bb2**2*
     &    hm1**2*hm2**2 - 24.D0*aINV**4*bb1**2*hm1**2 - 8.D0*aINV**4*
     &    bb1**2*bb2*hm2**4 - 16.D0*aINV**4*bb1**2*bb2*hm1**2*hm2**2 - 
     &    4.D0*aINV**4*bb1**3*hm1**2*hm2**2 )
      W5loop = W5loop + ss1*CC1 * (  - 4.D0*aINV**4*bb1**3*hm1**4 + 4.D0
     &    *aINV**5*bb2**4*hm2**4 + 16.D0*aINV**5*bb1*bb2**3*hm2**4 + 16.
     &    D0*aINV**5*bb1**2*bb2**2*hm2**4 + 8.D0*aINV**5*bb1**2*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**5*bb1**4*hm1**4 )
      W5loop = W5loop + ss1*CC1*p2q * (  - 2.D0*aINV**2 + 4.D0*aINV**2*
     &    bb2*qm**2 - aINV**2*bb1*hm1**2 + 8.D0*aINV**3*bb2 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 16.D0*aINV**3*bb1 - 8.D0*aINV**3*bb1*
     &    bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*
     &    bb2*hm1**2 + 4.D0*aINV**3*bb1**2*hm1**2 - 4.D0*aINV**4*bb2**3
     &    *hm2**2 - 48.D0*aINV**4*bb1*bb2 - 28.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 16.D0*aINV**4*bb1**2*bb2*hm2**2 - 12.D0*aINV**4*
     &    bb1**2*bb2*hm1**2 - 4.D0*aINV**4*bb1**3*hm1**2 + 16.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 + 32.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5loop = W5loop + ss1*CC1*p2q**2 * ( 4.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb1*bb2**2 - 8.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**5*
     &    bb1**2*bb2**2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm2**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW2_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W2loop

        return
        end

C------------ chiC2: matrix element loop W3  -------------------------
      
	double precision function FloopW3_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1) 

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFloopW3_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFloopW3_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW3_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FloopW3_psi2schic2=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW3_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFloopW3_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        x1=x(1)
        x2=x(2)
 
        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

            endif
                   p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

       bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )



      W1loop =
     &  + ss1*CC1 * ( 32.D0*aINV**3*bb1*bb2 + 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2 - 32.D0*aINV**4*bb1*bb2**2 - 208.D0*aINV**4*bb1**2*bb2
     &     - 32.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*hm1**2 - 40.D0*aINV**4*bb1**3*bb2*hm1**2 + 192.D0*
     &    aINV**5*bb1**2*bb2**2 + 64.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    192.D0*aINV**5*bb1**3*bb2 + 96.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2 + 32.D0*aINV**5*bb1**3*bb2**2*hm1**2 + 64.D0*aINV**5*
     &    bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**2*bb2**4*hm2**2 - 96.D0
     &    *aINV**6*bb1**3*bb2**3*hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm1**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 32.D0*aINV**4*bb1**2*bb2**2
     &     + 32.D0*aINV**5*bb1**2*bb2**3 + 96.D0*aINV**5*bb1**3*bb2**2
     &     - 64.D0*aINV**6*bb1**3*bb2**3 - 64.D0*aINV**6*bb1**4*bb2**2
     &     )
      W1loop = W1loop + 32.D0*aINV**3*bb1**2*bb2 - 32.D0*aINV**4*bb1**2
     &    *bb2**2 - 32.D0*aINV**4*bb1**3*bb2

      W2loop =
     &  + p2q * ( 16.D0*aINV**3*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2
     &     - 8.D0*aINV**4*bb1**3*bb2 )
      W2loop = W2loop + ss1*CC1 * (  - 4.D0*aINV*qm**2 - 2.D0*aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 + 2.D0*aINV**2*bb2*qm**2 - 2.D0*
     &    aINV**2*bb2*hm2**2 + 28.D0*aINV**2*bb1*qm**2 - 6.D0*aINV**2*
     &    bb1*hm1**2 + 8.D0*aINV**2*bb1*bb2*hm2**2*qm**2 + aINV**2*bb1*
     &    bb2*hm1**2*qm**2 - aINV**2*bb1*bb2*hm1**2*hm2**2 + 9.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 - 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 40.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*bb1
     &    *bb2**2*hm2**2*qm**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**4 + 2.D0*
     &    aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 16.D0*aINV**3*bb1**2*qm**2
     &     + 36.D0*aINV**3*bb1**2*hm1**2 - 20.D0*aINV**3*bb1**2*bb2*
     &    hm2**2*qm**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2 + 12.D0*
     &    aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 12.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2 + 6.D0*aINV**3*bb1**3*hm1**4 - 2.D0*aINV**4*
     &    bb2**3*hm2**2 - 60.D0*aINV**4*bb1*bb2**2*hm2**2 + 4.D0*
     &    aINV**4*bb1*bb2**3*hm2**2*qm**2 )
      W2loop = W2loop + ss1*CC1 * (  - 12.D0*aINV**4*bb1*bb2**3*hm2**4
     &     - aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 108.D0*aINV**4*bb1**2*
     &    bb2*hm2**2 - 6.D0*aINV**4*bb1**2*bb2*hm1**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*qm**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**4 - 15.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 56.D0*
     &    aINV**4*bb1**3*hm1**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2*qm**2
     &     + 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 38.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - aINV**4*bb1**3*bb2*hm1**4 + 4.D0*
     &    aINV**4*bb1**4*hm1**2*qm**2 - 13.D0*aINV**4*bb1**4*hm1**4 + 
     &    24.D0*aINV**5*bb1*bb2**3*hm2**2 + 12.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 72.D0*aINV**5*bb1**2*bb2**2*hm2**2 + 44.D0*aINV**5*
     &    bb1**2*bb2**3*hm2**4 + 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*
     &    hm2**2 + 48.D0*aINV**5*bb1**3*bb2*hm2**2 + 24.D0*aINV**5*
     &    bb1**3*bb2*hm1**2 + 40.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 32.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 24.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W2loop = W2loop + ss1*CC1 * ( 44.D0*aINV**5*bb1**4*bb2*hm1**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**4*bb2*hm1**4 + 12.D0*aINV**5*
     &    bb1**5*hm1**4 - 4.D0*aINV**6*bb1*bb2**5*hm2**4 - 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 - 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 - 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 - 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 - 4.D0*aINV**6*bb1**6*hm1**4 )
      W2loop = W2loop + ss1*CC1*p2q * ( 8.D0*aINV**2*bb1*bb2*qm**2 + 24.
     &    D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1*bb2**2*qm**2 + 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 - 20.D0*aINV**3*bb1**2*bb2*qm**2 + 
     &    8.D0*aINV**3*bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb1*bb2**2 - 8.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 - 108.D0*aINV**4*bb1**2*bb2 + 8.D0
     &    *aINV**4*bb1**2*bb2**2*qm**2 - 40.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 8.D0*aINV**4*
     &    bb1**3*bb2*qm**2 - 34.D0*aINV**4*bb1**3*bb2*hm1**2 + 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 + 48.D0*aINV**5*bb1**2*bb2**2 + 52.D
     &    0*aINV**5*bb1**2*bb2**3*hm2**2 + 48.D0*aINV**5*bb1**3*bb2 + 
     &    80.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm1**2 + 44.D0*aINV**5*bb1**4*bb2*hm1**2 - 16.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**2 - 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2loop = W2loop + ss1*CC1*p2q**2 * (  - 16.D0*aINV**4*bb1**2*
     &    bb2**2 + 8.D0*aINV**5*bb1**2*bb2**3 + 40.D0*aINV**5*bb1**3*
     &    bb2**2 - 16.D0*aINV**6*bb1**3*bb2**3 - 16.D0*aINV**6*bb1**4*
     &    bb2**2 )
      W2loop = W2loop - 8.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 + 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 + 4.D0*
     &    aINV**2*bb1**2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2*bb2*hm2**2
     &     + 8.D0*aINV**3*bb1**3*hm1**2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2 - 4.D0*
     &    aINV**4*bb1**4*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop + ss1*CC1 * (  - 2.D0*aINV*qm**2 - aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 - 2.D0*aINV**2*bb2*qm**2 + 12.D0*
     &    aINV**2*bb1*qm**2 - 6.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - aINV**2*bb1*bb2*hm1**2*qm**2 + 4.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 + 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 - aINV**3*bb1*bb2**2
     &    *hm1**2*hm2**2 + 30.D0*aINV**3*bb1**2*hm1**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 4.D0*aINV**3*
     &    bb1**3*hm1**2*qm**2 + 5.D0*aINV**3*bb1**3*hm1**4 + 2.D0*
     &    aINV**4*bb2**3*hm2**2 + 20.D0*aINV**4*bb1*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2*qm**2 + 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**4 + aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 16.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 + 6.D0*aINV**4*bb1**2*bb2*hm1**2 - 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 )
      W3loop = W3loop + ss1*CC1 * ( 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 28.D0*aINV**4*bb1**3*hm1**2 - 4.D0*aINV**4*bb1**3*
     &    bb2*hm1**2*qm**2 - 12.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 
     &    aINV**4*bb1**3*bb2*hm1**4 - 8.D0*aINV**4*bb1**4*hm1**4 - 24.D0
     &    *aINV**5*bb1*bb2**3*hm2**2 - 8.D0*aINV**5*bb1*bb2**4*hm2**4
     &     - 48.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 16.D0*aINV**5*bb1**2*
     &    bb2**3*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*hm2**2 - 24.
     &    D0*aINV**5*bb1**3*bb2*hm1**2 - 12.D0*aINV**5*bb1**3*bb2**2*
     &    hm1**2*hm2**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**5*bb1**4*bb2*hm1**4 + 4.D0*aINV**5*bb1**5*hm1**4 + 4.D0
     &    *aINV**6*bb1*bb2**5*hm2**4 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 16.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*hm1**4 )
      W3loop = W3loop + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 8.D
     &    0*aINV**3*bb1*bb2 + 4.D0*aINV**3*bb1*bb2**2*qm**2 - 8.D0*
     &    aINV**3*bb1**2*bb2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 8.
     &    D0*aINV**4*bb1*bb2**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2*qm**2 + 2.D0
     &    *aINV**4*bb1**2*bb2**2*hm1**2 - 12.D0*aINV**4*bb1**3*bb2*
     &    hm1**2 - 4.D0*aINV**5*bb1*bb2**4*hm2**2 - 48.D0*aINV**5*
     &    bb1**2*bb2**2 - 24.D0*aINV**5*bb1**2*bb2**3*hm2**2 - 12.D0*
     &    aINV**5*bb1**3*bb2**2*hm1**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2
     &     + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 32.D0*aINV**6*bb1**3*
     &    bb2**3*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 )
      W3loop = W3loop + ss1*CC1*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**3 + 16.D0*aINV**6*bb1**3*bb2**3 )
      W3loop = W3loop - 4.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 - 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 4.D0*aINV**3*bb1**3*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1**3*bb2 )
      W4loop = W4loop + ss1*CC1 * ( 4.D0*aINV*qm**2 + 2.D0*aINV*bb1*
     &    hm1**2*qm**2 + 4.D0*aINV**2 + 4.D0*aINV**2*bb2*hm2**2 - 16.D0
     &    *aINV**2*bb1*qm**2 + 2.D0*aINV**2*bb1*hm1**2 - 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 + 2.D0*aINV**2*bb1*bb2*hm1**2*hm2**2 - 6.
     &    D0*aINV**2*bb1**2*hm1**2*qm**2 - 4.D0*aINV**3*bb2**2*hm2**2
     &     - 16.D0*aINV**3*bb1 - 40.D0*aINV**3*bb1*bb2*hm2**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2*qm**2 - 8.D0*aINV**3*bb1*bb2**2*
     &    hm2**4 - 2.D0*aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 32.D0*
     &    aINV**3*bb1**2*qm**2 + 8.D0*aINV**3*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1**2*bb2*hm2**2*qm**2 - 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2*hm2**2 + 2.D0*aINV**3*bb1**3*hm1**4 + 40.D0*aINV**4*
     &    bb1*bb2**2*hm2**2 + 16.D0*aINV**4*bb1*bb2**3*hm2**4 - 80.D0*
     &    aINV**4*bb1**2 - 24.D0*aINV**4*bb1**2*bb2*hm2**2 + 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 + 16.D0*aINV**4*bb1**2*
     &    bb2**2*hm2**4 + 6.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 64.
     &    D0*aINV**4*bb1**3*hm1**2 )
      W4loop = W4loop + ss1*CC1 * ( 16.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 8.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - 10.D0*aINV**4*bb1**4*hm1**4 - 8.D0*
     &    aINV**5*bb1*bb2**4*hm2**4 + 64.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 128.D0*aINV**5*
     &    bb1**3*bb2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 8.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    hm1**2 + 40.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 + 16.D0*
     &    aINV**5*bb1**5*hm1**4 - 8.D0*aINV**6*bb1**2*bb2**4*hm2**4 - 
     &    32.D0*aINV**6*bb1**3*bb2**3*hm2**4 - 32.D0*aINV**6*bb1**4*
     &    bb2**2*hm2**4 - 16.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 - 
     &    32.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 8.D0*aINV**6*bb1**6*
     &    hm1**4 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 8.D0*aINV**2*bb1*bb2*qm**2
     &     - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D
     &    0*aINV**3*bb1**2*bb2*qm**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2
     &     - 24.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**4*bb1**3*bb2*qm**2 - 12.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 128.D0
     &    *aINV**5*bb1**3*bb2 + 32.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 40.
     &    D0*aINV**5*bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W4loop = W4loop + ss1*CC1*p2q**2 * ( 16.D0*aINV**5*bb1**3*bb2**2
     &     - 32.D0*aINV**6*bb1**4*bb2**2 )
      W4loop = W4loop + 8.D0*aINV*bb1*qm**2 + 8.D0*aINV**2*bb1 + 8.D0*
     &    aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*bb1**2*qm**2 - 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2 + 8.D0*
     &    aINV**3*bb1**3*hm1**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 
     &    16.D0*aINV**4*bb1**3*bb2*hm2**2 - 8.D0*aINV**4*bb1**4*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb1 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop + ss1*CC1 * (  - aINV*hm1**2*qm**2 + 12.D0*
     &    aINV**2*qm**2 - 2.D0*aINV**2*hm2**2 - aINV**2*hm1**2 + 4.D0*
     &    aINV**2*bb2*hm2**2*qm**2 - aINV**2*bb2*hm1**2*hm2**2 + 4.D0*
     &    aINV**2*bb1*hm1**2*qm**2 - aINV**2*bb1*hm1**2*hm2**2 + 16.D0*
     &    aINV**3 + 24.D0*aINV**3*bb2*hm2**2 - 4.D0*aINV**3*bb2**2*
     &    hm2**2*qm**2 + 4.D0*aINV**3*bb2**2*hm2**4 + aINV**3*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**3*bb1*hm2**2 + 8.D0*aINV**3*bb1*
     &    hm1**2 - 8.D0*aINV**3*bb1*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1
     &    *bb2*hm2**4 + 6.D0*aINV**3*bb1*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 4.D0*aINV**3*bb1**2*hm1**2*
     &    hm2**2 + aINV**3*bb1**2*hm1**4 - 24.D0*aINV**4*bb2**2*hm2**2
     &     - 8.D0*aINV**4*bb2**3*hm2**4 - 48.D0*aINV**4*bb1*bb2*hm2**2
     &     - 20.D0*aINV**4*bb1*bb2**2*hm2**4 - 4.D0*aINV**4*bb1*bb2**2*
     &    hm1**2*hm2**2 - 24.D0*aINV**4*bb1**2*hm1**2 - 8.D0*aINV**4*
     &    bb1**2*bb2*hm2**4 - 16.D0*aINV**4*bb1**2*bb2*hm1**2*hm2**2 - 
     &    4.D0*aINV**4*bb1**3*hm1**2*hm2**2 )
      W5loop = W5loop + ss1*CC1 * (  - 4.D0*aINV**4*bb1**3*hm1**4 + 4.D0
     &    *aINV**5*bb2**4*hm2**4 + 16.D0*aINV**5*bb1*bb2**3*hm2**4 + 16.
     &    D0*aINV**5*bb1**2*bb2**2*hm2**4 + 8.D0*aINV**5*bb1**2*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**5*bb1**4*hm1**4 )
      W5loop = W5loop + ss1*CC1*p2q * (  - 2.D0*aINV**2 + 4.D0*aINV**2*
     &    bb2*qm**2 - aINV**2*bb1*hm1**2 + 8.D0*aINV**3*bb2 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 16.D0*aINV**3*bb1 - 8.D0*aINV**3*bb1*
     &    bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*
     &    bb2*hm1**2 + 4.D0*aINV**3*bb1**2*hm1**2 - 4.D0*aINV**4*bb2**3
     &    *hm2**2 - 48.D0*aINV**4*bb1*bb2 - 28.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 16.D0*aINV**4*bb1**2*bb2*hm2**2 - 12.D0*aINV**4*
     &    bb1**2*bb2*hm1**2 - 4.D0*aINV**4*bb1**3*hm1**2 + 16.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 + 32.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5loop = W5loop + ss1*CC1*p2q**2 * ( 4.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb1*bb2**2 - 8.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**5*
     &    bb1**2*bb2**2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm2**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2



           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1
 
       FFloopW3_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W3loop

        return
        end

C------------ chiC2: matrix element loop W4  -------------------------
      
	double precision function FloopW4_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1) 

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFloopW4_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFloopW4_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW4_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FloopW4_psi2schic2=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW4_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)
       

	common/CFloopW4_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        x1=x(1)
        x2=x(2)
 
        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

            endif
                   p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

       bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )



      W1loop =
     &  + ss1*CC1 * ( 32.D0*aINV**3*bb1*bb2 + 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2 - 32.D0*aINV**4*bb1*bb2**2 - 208.D0*aINV**4*bb1**2*bb2
     &     - 32.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*hm1**2 - 40.D0*aINV**4*bb1**3*bb2*hm1**2 + 192.D0*
     &    aINV**5*bb1**2*bb2**2 + 64.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    192.D0*aINV**5*bb1**3*bb2 + 96.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2 + 32.D0*aINV**5*bb1**3*bb2**2*hm1**2 + 64.D0*aINV**5*
     &    bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**2*bb2**4*hm2**2 - 96.D0
     &    *aINV**6*bb1**3*bb2**3*hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm1**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 32.D0*aINV**4*bb1**2*bb2**2
     &     + 32.D0*aINV**5*bb1**2*bb2**3 + 96.D0*aINV**5*bb1**3*bb2**2
     &     - 64.D0*aINV**6*bb1**3*bb2**3 - 64.D0*aINV**6*bb1**4*bb2**2
     &     )
      W1loop = W1loop + 32.D0*aINV**3*bb1**2*bb2 - 32.D0*aINV**4*bb1**2
     &    *bb2**2 - 32.D0*aINV**4*bb1**3*bb2

      W2loop =
     &  + p2q * ( 16.D0*aINV**3*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2
     &     - 8.D0*aINV**4*bb1**3*bb2 )
      W2loop = W2loop + ss1*CC1 * (  - 4.D0*aINV*qm**2 - 2.D0*aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 + 2.D0*aINV**2*bb2*qm**2 - 2.D0*
     &    aINV**2*bb2*hm2**2 + 28.D0*aINV**2*bb1*qm**2 - 6.D0*aINV**2*
     &    bb1*hm1**2 + 8.D0*aINV**2*bb1*bb2*hm2**2*qm**2 + aINV**2*bb1*
     &    bb2*hm1**2*qm**2 - aINV**2*bb1*bb2*hm1**2*hm2**2 + 9.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 - 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 40.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*bb1
     &    *bb2**2*hm2**2*qm**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**4 + 2.D0*
     &    aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 16.D0*aINV**3*bb1**2*qm**2
     &     + 36.D0*aINV**3*bb1**2*hm1**2 - 20.D0*aINV**3*bb1**2*bb2*
     &    hm2**2*qm**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2 + 12.D0*
     &    aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 12.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2 + 6.D0*aINV**3*bb1**3*hm1**4 - 2.D0*aINV**4*
     &    bb2**3*hm2**2 - 60.D0*aINV**4*bb1*bb2**2*hm2**2 + 4.D0*
     &    aINV**4*bb1*bb2**3*hm2**2*qm**2 )
      W2loop = W2loop + ss1*CC1 * (  - 12.D0*aINV**4*bb1*bb2**3*hm2**4
     &     - aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 108.D0*aINV**4*bb1**2*
     &    bb2*hm2**2 - 6.D0*aINV**4*bb1**2*bb2*hm1**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*qm**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**4 - 15.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 56.D0*
     &    aINV**4*bb1**3*hm1**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2*qm**2
     &     + 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 38.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - aINV**4*bb1**3*bb2*hm1**4 + 4.D0*
     &    aINV**4*bb1**4*hm1**2*qm**2 - 13.D0*aINV**4*bb1**4*hm1**4 + 
     &    24.D0*aINV**5*bb1*bb2**3*hm2**2 + 12.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 72.D0*aINV**5*bb1**2*bb2**2*hm2**2 + 44.D0*aINV**5*
     &    bb1**2*bb2**3*hm2**4 + 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*
     &    hm2**2 + 48.D0*aINV**5*bb1**3*bb2*hm2**2 + 24.D0*aINV**5*
     &    bb1**3*bb2*hm1**2 + 40.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 32.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 24.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W2loop = W2loop + ss1*CC1 * ( 44.D0*aINV**5*bb1**4*bb2*hm1**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**4*bb2*hm1**4 + 12.D0*aINV**5*
     &    bb1**5*hm1**4 - 4.D0*aINV**6*bb1*bb2**5*hm2**4 - 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 - 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 - 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 - 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 - 4.D0*aINV**6*bb1**6*hm1**4 )
      W2loop = W2loop + ss1*CC1*p2q * ( 8.D0*aINV**2*bb1*bb2*qm**2 + 24.
     &    D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1*bb2**2*qm**2 + 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 - 20.D0*aINV**3*bb1**2*bb2*qm**2 + 
     &    8.D0*aINV**3*bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb1*bb2**2 - 8.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 - 108.D0*aINV**4*bb1**2*bb2 + 8.D0
     &    *aINV**4*bb1**2*bb2**2*qm**2 - 40.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 8.D0*aINV**4*
     &    bb1**3*bb2*qm**2 - 34.D0*aINV**4*bb1**3*bb2*hm1**2 + 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 + 48.D0*aINV**5*bb1**2*bb2**2 + 52.D
     &    0*aINV**5*bb1**2*bb2**3*hm2**2 + 48.D0*aINV**5*bb1**3*bb2 + 
     &    80.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm1**2 + 44.D0*aINV**5*bb1**4*bb2*hm1**2 - 16.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**2 - 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2loop = W2loop + ss1*CC1*p2q**2 * (  - 16.D0*aINV**4*bb1**2*
     &    bb2**2 + 8.D0*aINV**5*bb1**2*bb2**3 + 40.D0*aINV**5*bb1**3*
     &    bb2**2 - 16.D0*aINV**6*bb1**3*bb2**3 - 16.D0*aINV**6*bb1**4*
     &    bb2**2 )
      W2loop = W2loop - 8.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 + 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 + 4.D0*
     &    aINV**2*bb1**2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2*bb2*hm2**2
     &     + 8.D0*aINV**3*bb1**3*hm1**2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2 - 4.D0*
     &    aINV**4*bb1**4*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop + ss1*CC1 * (  - 2.D0*aINV*qm**2 - aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 - 2.D0*aINV**2*bb2*qm**2 + 12.D0*
     &    aINV**2*bb1*qm**2 - 6.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - aINV**2*bb1*bb2*hm1**2*qm**2 + 4.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 + 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 - aINV**3*bb1*bb2**2
     &    *hm1**2*hm2**2 + 30.D0*aINV**3*bb1**2*hm1**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 4.D0*aINV**3*
     &    bb1**3*hm1**2*qm**2 + 5.D0*aINV**3*bb1**3*hm1**4 + 2.D0*
     &    aINV**4*bb2**3*hm2**2 + 20.D0*aINV**4*bb1*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2*qm**2 + 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**4 + aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 16.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 + 6.D0*aINV**4*bb1**2*bb2*hm1**2 - 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 )
      W3loop = W3loop + ss1*CC1 * ( 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 28.D0*aINV**4*bb1**3*hm1**2 - 4.D0*aINV**4*bb1**3*
     &    bb2*hm1**2*qm**2 - 12.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 
     &    aINV**4*bb1**3*bb2*hm1**4 - 8.D0*aINV**4*bb1**4*hm1**4 - 24.D0
     &    *aINV**5*bb1*bb2**3*hm2**2 - 8.D0*aINV**5*bb1*bb2**4*hm2**4
     &     - 48.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 16.D0*aINV**5*bb1**2*
     &    bb2**3*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*hm2**2 - 24.
     &    D0*aINV**5*bb1**3*bb2*hm1**2 - 12.D0*aINV**5*bb1**3*bb2**2*
     &    hm1**2*hm2**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**5*bb1**4*bb2*hm1**4 + 4.D0*aINV**5*bb1**5*hm1**4 + 4.D0
     &    *aINV**6*bb1*bb2**5*hm2**4 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 16.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*hm1**4 )
      W3loop = W3loop + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 8.D
     &    0*aINV**3*bb1*bb2 + 4.D0*aINV**3*bb1*bb2**2*qm**2 - 8.D0*
     &    aINV**3*bb1**2*bb2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 8.
     &    D0*aINV**4*bb1*bb2**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2*qm**2 + 2.D0
     &    *aINV**4*bb1**2*bb2**2*hm1**2 - 12.D0*aINV**4*bb1**3*bb2*
     &    hm1**2 - 4.D0*aINV**5*bb1*bb2**4*hm2**2 - 48.D0*aINV**5*
     &    bb1**2*bb2**2 - 24.D0*aINV**5*bb1**2*bb2**3*hm2**2 - 12.D0*
     &    aINV**5*bb1**3*bb2**2*hm1**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2
     &     + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 32.D0*aINV**6*bb1**3*
     &    bb2**3*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 )
      W3loop = W3loop + ss1*CC1*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**3 + 16.D0*aINV**6*bb1**3*bb2**3 )
      W3loop = W3loop - 4.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 - 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 4.D0*aINV**3*bb1**3*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1**3*bb2 )
      W4loop = W4loop + ss1*CC1 * ( 4.D0*aINV*qm**2 + 2.D0*aINV*bb1*
     &    hm1**2*qm**2 + 4.D0*aINV**2 + 4.D0*aINV**2*bb2*hm2**2 - 16.D0
     &    *aINV**2*bb1*qm**2 + 2.D0*aINV**2*bb1*hm1**2 - 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 + 2.D0*aINV**2*bb1*bb2*hm1**2*hm2**2 - 6.
     &    D0*aINV**2*bb1**2*hm1**2*qm**2 - 4.D0*aINV**3*bb2**2*hm2**2
     &     - 16.D0*aINV**3*bb1 - 40.D0*aINV**3*bb1*bb2*hm2**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2*qm**2 - 8.D0*aINV**3*bb1*bb2**2*
     &    hm2**4 - 2.D0*aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 32.D0*
     &    aINV**3*bb1**2*qm**2 + 8.D0*aINV**3*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1**2*bb2*hm2**2*qm**2 - 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2*hm2**2 + 2.D0*aINV**3*bb1**3*hm1**4 + 40.D0*aINV**4*
     &    bb1*bb2**2*hm2**2 + 16.D0*aINV**4*bb1*bb2**3*hm2**4 - 80.D0*
     &    aINV**4*bb1**2 - 24.D0*aINV**4*bb1**2*bb2*hm2**2 + 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 + 16.D0*aINV**4*bb1**2*
     &    bb2**2*hm2**4 + 6.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 64.
     &    D0*aINV**4*bb1**3*hm1**2 )
      W4loop = W4loop + ss1*CC1 * ( 16.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 8.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - 10.D0*aINV**4*bb1**4*hm1**4 - 8.D0*
     &    aINV**5*bb1*bb2**4*hm2**4 + 64.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 128.D0*aINV**5*
     &    bb1**3*bb2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 8.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    hm1**2 + 40.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 + 16.D0*
     &    aINV**5*bb1**5*hm1**4 - 8.D0*aINV**6*bb1**2*bb2**4*hm2**4 - 
     &    32.D0*aINV**6*bb1**3*bb2**3*hm2**4 - 32.D0*aINV**6*bb1**4*
     &    bb2**2*hm2**4 - 16.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 - 
     &    32.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 8.D0*aINV**6*bb1**6*
     &    hm1**4 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 8.D0*aINV**2*bb1*bb2*qm**2
     &     - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D
     &    0*aINV**3*bb1**2*bb2*qm**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2
     &     - 24.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**4*bb1**3*bb2*qm**2 - 12.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 128.D0
     &    *aINV**5*bb1**3*bb2 + 32.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 40.
     &    D0*aINV**5*bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W4loop = W4loop + ss1*CC1*p2q**2 * ( 16.D0*aINV**5*bb1**3*bb2**2
     &     - 32.D0*aINV**6*bb1**4*bb2**2 )
      W4loop = W4loop + 8.D0*aINV*bb1*qm**2 + 8.D0*aINV**2*bb1 + 8.D0*
     &    aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*bb1**2*qm**2 - 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2 + 8.D0*
     &    aINV**3*bb1**3*hm1**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 
     &    16.D0*aINV**4*bb1**3*bb2*hm2**2 - 8.D0*aINV**4*bb1**4*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb1 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop + ss1*CC1 * (  - aINV*hm1**2*qm**2 + 12.D0*
     &    aINV**2*qm**2 - 2.D0*aINV**2*hm2**2 - aINV**2*hm1**2 + 4.D0*
     &    aINV**2*bb2*hm2**2*qm**2 - aINV**2*bb2*hm1**2*hm2**2 + 4.D0*
     &    aINV**2*bb1*hm1**2*qm**2 - aINV**2*bb1*hm1**2*hm2**2 + 16.D0*
     &    aINV**3 + 24.D0*aINV**3*bb2*hm2**2 - 4.D0*aINV**3*bb2**2*
     &    hm2**2*qm**2 + 4.D0*aINV**3*bb2**2*hm2**4 + aINV**3*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**3*bb1*hm2**2 + 8.D0*aINV**3*bb1*
     &    hm1**2 - 8.D0*aINV**3*bb1*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1
     &    *bb2*hm2**4 + 6.D0*aINV**3*bb1*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 4.D0*aINV**3*bb1**2*hm1**2*
     &    hm2**2 + aINV**3*bb1**2*hm1**4 - 24.D0*aINV**4*bb2**2*hm2**2
     &     - 8.D0*aINV**4*bb2**3*hm2**4 - 48.D0*aINV**4*bb1*bb2*hm2**2
     &     - 20.D0*aINV**4*bb1*bb2**2*hm2**4 - 4.D0*aINV**4*bb1*bb2**2*
     &    hm1**2*hm2**2 - 24.D0*aINV**4*bb1**2*hm1**2 - 8.D0*aINV**4*
     &    bb1**2*bb2*hm2**4 - 16.D0*aINV**4*bb1**2*bb2*hm1**2*hm2**2 - 
     &    4.D0*aINV**4*bb1**3*hm1**2*hm2**2 )
      W5loop = W5loop + ss1*CC1 * (  - 4.D0*aINV**4*bb1**3*hm1**4 + 4.D0
     &    *aINV**5*bb2**4*hm2**4 + 16.D0*aINV**5*bb1*bb2**3*hm2**4 + 16.
     &    D0*aINV**5*bb1**2*bb2**2*hm2**4 + 8.D0*aINV**5*bb1**2*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**5*bb1**4*hm1**4 )
      W5loop = W5loop + ss1*CC1*p2q * (  - 2.D0*aINV**2 + 4.D0*aINV**2*
     &    bb2*qm**2 - aINV**2*bb1*hm1**2 + 8.D0*aINV**3*bb2 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 16.D0*aINV**3*bb1 - 8.D0*aINV**3*bb1*
     &    bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*
     &    bb2*hm1**2 + 4.D0*aINV**3*bb1**2*hm1**2 - 4.D0*aINV**4*bb2**3
     &    *hm2**2 - 48.D0*aINV**4*bb1*bb2 - 28.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 16.D0*aINV**4*bb1**2*bb2*hm2**2 - 12.D0*aINV**4*
     &    bb1**2*bb2*hm1**2 - 4.D0*aINV**4*bb1**3*hm1**2 + 16.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 + 32.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5loop = W5loop + ss1*CC1*p2q**2 * ( 4.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb1*bb2**2 - 8.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**5*
     &    bb1**2*bb2**2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm2**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2



           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1
 
       FFloopW4_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W4loop

        return
        end

C------------ chiC2: matrix element loop W5  -------------------------
      
	double precision function FloopW5_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1) 

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFloopW5_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFloopW5_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW5_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FloopW5_psi2schic2=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW5_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFloopW5_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        x1=x(1)
        x2=x(2)
 
        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

            endif
                   p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

       bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )



      W1loop =
     &  + ss1*CC1 * ( 32.D0*aINV**3*bb1*bb2 + 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2 - 32.D0*aINV**4*bb1*bb2**2 - 208.D0*aINV**4*bb1**2*bb2
     &     - 32.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*hm1**2 - 40.D0*aINV**4*bb1**3*bb2*hm1**2 + 192.D0*
     &    aINV**5*bb1**2*bb2**2 + 64.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    192.D0*aINV**5*bb1**3*bb2 + 96.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2 + 32.D0*aINV**5*bb1**3*bb2**2*hm1**2 + 64.D0*aINV**5*
     &    bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**2*bb2**4*hm2**2 - 96.D0
     &    *aINV**6*bb1**3*bb2**3*hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm1**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 32.D0*aINV**4*bb1**2*bb2**2
     &     + 32.D0*aINV**5*bb1**2*bb2**3 + 96.D0*aINV**5*bb1**3*bb2**2
     &     - 64.D0*aINV**6*bb1**3*bb2**3 - 64.D0*aINV**6*bb1**4*bb2**2
     &     )
      W1loop = W1loop + 32.D0*aINV**3*bb1**2*bb2 - 32.D0*aINV**4*bb1**2
     &    *bb2**2 - 32.D0*aINV**4*bb1**3*bb2

      W2loop =
     &  + p2q * ( 16.D0*aINV**3*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2
     &     - 8.D0*aINV**4*bb1**3*bb2 )
      W2loop = W2loop + ss1*CC1 * (  - 4.D0*aINV*qm**2 - 2.D0*aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 + 2.D0*aINV**2*bb2*qm**2 - 2.D0*
     &    aINV**2*bb2*hm2**2 + 28.D0*aINV**2*bb1*qm**2 - 6.D0*aINV**2*
     &    bb1*hm1**2 + 8.D0*aINV**2*bb1*bb2*hm2**2*qm**2 + aINV**2*bb1*
     &    bb2*hm1**2*qm**2 - aINV**2*bb1*bb2*hm1**2*hm2**2 + 9.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 - 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 40.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*bb1
     &    *bb2**2*hm2**2*qm**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**4 + 2.D0*
     &    aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 16.D0*aINV**3*bb1**2*qm**2
     &     + 36.D0*aINV**3*bb1**2*hm1**2 - 20.D0*aINV**3*bb1**2*bb2*
     &    hm2**2*qm**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2 + 12.D0*
     &    aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 12.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2 + 6.D0*aINV**3*bb1**3*hm1**4 - 2.D0*aINV**4*
     &    bb2**3*hm2**2 - 60.D0*aINV**4*bb1*bb2**2*hm2**2 + 4.D0*
     &    aINV**4*bb1*bb2**3*hm2**2*qm**2 )
      W2loop = W2loop + ss1*CC1 * (  - 12.D0*aINV**4*bb1*bb2**3*hm2**4
     &     - aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 108.D0*aINV**4*bb1**2*
     &    bb2*hm2**2 - 6.D0*aINV**4*bb1**2*bb2*hm1**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*qm**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**4 - 15.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 56.D0*
     &    aINV**4*bb1**3*hm1**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2*qm**2
     &     + 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 38.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - aINV**4*bb1**3*bb2*hm1**4 + 4.D0*
     &    aINV**4*bb1**4*hm1**2*qm**2 - 13.D0*aINV**4*bb1**4*hm1**4 + 
     &    24.D0*aINV**5*bb1*bb2**3*hm2**2 + 12.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 72.D0*aINV**5*bb1**2*bb2**2*hm2**2 + 44.D0*aINV**5*
     &    bb1**2*bb2**3*hm2**4 + 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*
     &    hm2**2 + 48.D0*aINV**5*bb1**3*bb2*hm2**2 + 24.D0*aINV**5*
     &    bb1**3*bb2*hm1**2 + 40.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 32.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 24.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W2loop = W2loop + ss1*CC1 * ( 44.D0*aINV**5*bb1**4*bb2*hm1**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**4*bb2*hm1**4 + 12.D0*aINV**5*
     &    bb1**5*hm1**4 - 4.D0*aINV**6*bb1*bb2**5*hm2**4 - 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 - 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 - 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 - 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 - 4.D0*aINV**6*bb1**6*hm1**4 )
      W2loop = W2loop + ss1*CC1*p2q * ( 8.D0*aINV**2*bb1*bb2*qm**2 + 24.
     &    D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1*bb2**2*qm**2 + 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 - 20.D0*aINV**3*bb1**2*bb2*qm**2 + 
     &    8.D0*aINV**3*bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb1*bb2**2 - 8.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 - 108.D0*aINV**4*bb1**2*bb2 + 8.D0
     &    *aINV**4*bb1**2*bb2**2*qm**2 - 40.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 8.D0*aINV**4*
     &    bb1**3*bb2*qm**2 - 34.D0*aINV**4*bb1**3*bb2*hm1**2 + 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 + 48.D0*aINV**5*bb1**2*bb2**2 + 52.D
     &    0*aINV**5*bb1**2*bb2**3*hm2**2 + 48.D0*aINV**5*bb1**3*bb2 + 
     &    80.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm1**2 + 44.D0*aINV**5*bb1**4*bb2*hm1**2 - 16.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**2 - 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2loop = W2loop + ss1*CC1*p2q**2 * (  - 16.D0*aINV**4*bb1**2*
     &    bb2**2 + 8.D0*aINV**5*bb1**2*bb2**3 + 40.D0*aINV**5*bb1**3*
     &    bb2**2 - 16.D0*aINV**6*bb1**3*bb2**3 - 16.D0*aINV**6*bb1**4*
     &    bb2**2 )
      W2loop = W2loop - 8.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 + 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 + 4.D0*
     &    aINV**2*bb1**2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2*bb2*hm2**2
     &     + 8.D0*aINV**3*bb1**3*hm1**2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2 - 4.D0*
     &    aINV**4*bb1**4*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop + ss1*CC1 * (  - 2.D0*aINV*qm**2 - aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 - 2.D0*aINV**2*bb2*qm**2 + 12.D0*
     &    aINV**2*bb1*qm**2 - 6.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - aINV**2*bb1*bb2*hm1**2*qm**2 + 4.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 + 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 - aINV**3*bb1*bb2**2
     &    *hm1**2*hm2**2 + 30.D0*aINV**3*bb1**2*hm1**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 4.D0*aINV**3*
     &    bb1**3*hm1**2*qm**2 + 5.D0*aINV**3*bb1**3*hm1**4 + 2.D0*
     &    aINV**4*bb2**3*hm2**2 + 20.D0*aINV**4*bb1*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2*qm**2 + 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**4 + aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 16.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 + 6.D0*aINV**4*bb1**2*bb2*hm1**2 - 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 )
      W3loop = W3loop + ss1*CC1 * ( 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 28.D0*aINV**4*bb1**3*hm1**2 - 4.D0*aINV**4*bb1**3*
     &    bb2*hm1**2*qm**2 - 12.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 
     &    aINV**4*bb1**3*bb2*hm1**4 - 8.D0*aINV**4*bb1**4*hm1**4 - 24.D0
     &    *aINV**5*bb1*bb2**3*hm2**2 - 8.D0*aINV**5*bb1*bb2**4*hm2**4
     &     - 48.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 16.D0*aINV**5*bb1**2*
     &    bb2**3*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*hm2**2 - 24.
     &    D0*aINV**5*bb1**3*bb2*hm1**2 - 12.D0*aINV**5*bb1**3*bb2**2*
     &    hm1**2*hm2**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**5*bb1**4*bb2*hm1**4 + 4.D0*aINV**5*bb1**5*hm1**4 + 4.D0
     &    *aINV**6*bb1*bb2**5*hm2**4 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 16.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*hm1**4 )
      W3loop = W3loop + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 8.D
     &    0*aINV**3*bb1*bb2 + 4.D0*aINV**3*bb1*bb2**2*qm**2 - 8.D0*
     &    aINV**3*bb1**2*bb2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 8.
     &    D0*aINV**4*bb1*bb2**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2*qm**2 + 2.D0
     &    *aINV**4*bb1**2*bb2**2*hm1**2 - 12.D0*aINV**4*bb1**3*bb2*
     &    hm1**2 - 4.D0*aINV**5*bb1*bb2**4*hm2**2 - 48.D0*aINV**5*
     &    bb1**2*bb2**2 - 24.D0*aINV**5*bb1**2*bb2**3*hm2**2 - 12.D0*
     &    aINV**5*bb1**3*bb2**2*hm1**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2
     &     + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 32.D0*aINV**6*bb1**3*
     &    bb2**3*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 )
      W3loop = W3loop + ss1*CC1*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**3 + 16.D0*aINV**6*bb1**3*bb2**3 )
      W3loop = W3loop - 4.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 - 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 4.D0*aINV**3*bb1**3*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1**3*bb2 )
      W4loop = W4loop + ss1*CC1 * ( 4.D0*aINV*qm**2 + 2.D0*aINV*bb1*
     &    hm1**2*qm**2 + 4.D0*aINV**2 + 4.D0*aINV**2*bb2*hm2**2 - 16.D0
     &    *aINV**2*bb1*qm**2 + 2.D0*aINV**2*bb1*hm1**2 - 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 + 2.D0*aINV**2*bb1*bb2*hm1**2*hm2**2 - 6.
     &    D0*aINV**2*bb1**2*hm1**2*qm**2 - 4.D0*aINV**3*bb2**2*hm2**2
     &     - 16.D0*aINV**3*bb1 - 40.D0*aINV**3*bb1*bb2*hm2**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2*qm**2 - 8.D0*aINV**3*bb1*bb2**2*
     &    hm2**4 - 2.D0*aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 32.D0*
     &    aINV**3*bb1**2*qm**2 + 8.D0*aINV**3*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1**2*bb2*hm2**2*qm**2 - 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2*hm2**2 + 2.D0*aINV**3*bb1**3*hm1**4 + 40.D0*aINV**4*
     &    bb1*bb2**2*hm2**2 + 16.D0*aINV**4*bb1*bb2**3*hm2**4 - 80.D0*
     &    aINV**4*bb1**2 - 24.D0*aINV**4*bb1**2*bb2*hm2**2 + 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 + 16.D0*aINV**4*bb1**2*
     &    bb2**2*hm2**4 + 6.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 64.
     &    D0*aINV**4*bb1**3*hm1**2 )
      W4loop = W4loop + ss1*CC1 * ( 16.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 8.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - 10.D0*aINV**4*bb1**4*hm1**4 - 8.D0*
     &    aINV**5*bb1*bb2**4*hm2**4 + 64.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 128.D0*aINV**5*
     &    bb1**3*bb2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 8.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    hm1**2 + 40.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 + 16.D0*
     &    aINV**5*bb1**5*hm1**4 - 8.D0*aINV**6*bb1**2*bb2**4*hm2**4 - 
     &    32.D0*aINV**6*bb1**3*bb2**3*hm2**4 - 32.D0*aINV**6*bb1**4*
     &    bb2**2*hm2**4 - 16.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 - 
     &    32.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 8.D0*aINV**6*bb1**6*
     &    hm1**4 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 8.D0*aINV**2*bb1*bb2*qm**2
     &     - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D
     &    0*aINV**3*bb1**2*bb2*qm**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2
     &     - 24.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**4*bb1**3*bb2*qm**2 - 12.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 128.D0
     &    *aINV**5*bb1**3*bb2 + 32.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 40.
     &    D0*aINV**5*bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W4loop = W4loop + ss1*CC1*p2q**2 * ( 16.D0*aINV**5*bb1**3*bb2**2
     &     - 32.D0*aINV**6*bb1**4*bb2**2 )
      W4loop = W4loop + 8.D0*aINV*bb1*qm**2 + 8.D0*aINV**2*bb1 + 8.D0*
     &    aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*bb1**2*qm**2 - 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2 + 8.D0*
     &    aINV**3*bb1**3*hm1**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 
     &    16.D0*aINV**4*bb1**3*bb2*hm2**2 - 8.D0*aINV**4*bb1**4*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb1 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop + ss1*CC1 * (  - aINV*hm1**2*qm**2 + 12.D0*
     &    aINV**2*qm**2 - 2.D0*aINV**2*hm2**2 - aINV**2*hm1**2 + 4.D0*
     &    aINV**2*bb2*hm2**2*qm**2 - aINV**2*bb2*hm1**2*hm2**2 + 4.D0*
     &    aINV**2*bb1*hm1**2*qm**2 - aINV**2*bb1*hm1**2*hm2**2 + 16.D0*
     &    aINV**3 + 24.D0*aINV**3*bb2*hm2**2 - 4.D0*aINV**3*bb2**2*
     &    hm2**2*qm**2 + 4.D0*aINV**3*bb2**2*hm2**4 + aINV**3*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**3*bb1*hm2**2 + 8.D0*aINV**3*bb1*
     &    hm1**2 - 8.D0*aINV**3*bb1*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1
     &    *bb2*hm2**4 + 6.D0*aINV**3*bb1*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 4.D0*aINV**3*bb1**2*hm1**2*
     &    hm2**2 + aINV**3*bb1**2*hm1**4 - 24.D0*aINV**4*bb2**2*hm2**2
     &     - 8.D0*aINV**4*bb2**3*hm2**4 - 48.D0*aINV**4*bb1*bb2*hm2**2
     &     - 20.D0*aINV**4*bb1*bb2**2*hm2**4 - 4.D0*aINV**4*bb1*bb2**2*
     &    hm1**2*hm2**2 - 24.D0*aINV**4*bb1**2*hm1**2 - 8.D0*aINV**4*
     &    bb1**2*bb2*hm2**4 - 16.D0*aINV**4*bb1**2*bb2*hm1**2*hm2**2 - 
     &    4.D0*aINV**4*bb1**3*hm1**2*hm2**2 )
      W5loop = W5loop + ss1*CC1 * (  - 4.D0*aINV**4*bb1**3*hm1**4 + 4.D0
     &    *aINV**5*bb2**4*hm2**4 + 16.D0*aINV**5*bb1*bb2**3*hm2**4 + 16.
     &    D0*aINV**5*bb1**2*bb2**2*hm2**4 + 8.D0*aINV**5*bb1**2*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**5*bb1**4*hm1**4 )
      W5loop = W5loop + ss1*CC1*p2q * (  - 2.D0*aINV**2 + 4.D0*aINV**2*
     &    bb2*qm**2 - aINV**2*bb1*hm1**2 + 8.D0*aINV**3*bb2 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 16.D0*aINV**3*bb1 - 8.D0*aINV**3*bb1*
     &    bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*
     &    bb2*hm1**2 + 4.D0*aINV**3*bb1**2*hm1**2 - 4.D0*aINV**4*bb2**3
     &    *hm2**2 - 48.D0*aINV**4*bb1*bb2 - 28.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 16.D0*aINV**4*bb1**2*bb2*hm2**2 - 12.D0*aINV**4*
     &    bb1**2*bb2*hm1**2 - 4.D0*aINV**4*bb1**3*hm1**2 + 16.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 + 32.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5loop = W5loop + ss1*CC1*p2q**2 * ( 4.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb1*bb2**2 - 8.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**5*
     &    bb1**2*bb2**2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm2**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2



           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1
 
       FFloopW5_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W5loop

        return
        end

C--------------- psi2-chiC2: bub1a --------------------------------
      
C------------  chiC2: matrix element bub1a W3  -----------------
      
	double precision function Fbub1aW3_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1aW3_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1aW3_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1aW3_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1aW3_psi2schic2=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1aW3_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFbub1aW3_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
         
           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2

      bb2 =
     &  - 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2 + 1.D0/4.D0*ss2*
     &    alp1 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2 - 1.D0/4.D0*ss2*alp1
     &     )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub1a = 0.d0

      W2bub1a = 0.d0

      W3bub1a =
     &  + ss1*CC1 * ( 16.D0*aINV**3*bb1*bb2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 )
      W3bub1a = W3bub1a + ss1*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*bb2**2
     &     )
      W3bub1a = W3bub1a - 4.D0*aINV**2*bb1*bb2

      W4bub1a = 0.d0

      W5bub1a =
     &  + p2q * (  - 4.D0*aINV**2*bb1*bb2 )
      W5bub1a = W5bub1a + ss1*CC1 * (  - 4.D0*aINV*qm**2 - aINV*hm1**2
     &     - 6.D0*aINV**2 + 2.D0*aINV**2*bb2**2*hm2**2*qm**2 + 1.D0/2.D0
     &    *aINV**2*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**2*bb1*bb2*hm2**2*
     &    qm**2 + aINV**2*bb1*bb2*hm1**2*hm2**2 + 2.D0*aINV**2*bb1**2*
     &    hm1**2*qm**2 + 1.D0/2.D0*aINV**2*bb1**2*hm1**4 + 10.D0*
     &    aINV**3*bb2**2*hm2**2 + 20.D0*aINV**3*bb1*bb2*hm2**2 + 10.D0*
     &    aINV**3*bb1**2*hm1**2 - 2.D0*aINV**4*bb2**4*hm2**4 - 8.D0*
     &    aINV**4*bb1*bb2**3*hm2**4 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**4
     &     - 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**4*bb1**4*hm1**4 )
      W5bub1a = W5bub1a + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 
     &    aINV**2*bb1*bb2*hm1**2 + 20.D0*aINV**3*bb1*bb2 - 8.D0*aINV**4
     &    *bb1*bb2**3*hm2**2 - 16.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**4*bb1**3*bb2*hm1**2 )
      W5bub1a = W5bub1a + ss1*CC1*p2q**2 * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2 )
      W5bub1a = W5bub1a + 2.D0*qm**2 + 1.D0/2.D0*hm1**2 + 2.D0*aINV - 2.
     &    D0*aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 - 2.D0
     &    *aINV**2*bb1**2*hm1**2


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1aW3_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W3bub1a
        
        return
        end

C------------  chiC2: matrix element bub1a W5  ------------------------------
      
	double precision function Fbub1aW5_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1aW5_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1aW5_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1aW5_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1aW5_psi2schic2=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1aW5_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFbub1aW5_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2

      bb2 =
     &  - 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2 + 1.D0/4.D0*ss2*
     &    alp1 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2 - 1.D0/4.D0*ss2*alp1
     &     )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub1a = 0.d0

      W2bub1a = 0.d0

      W3bub1a =
     &  + ss1*CC1 * ( 16.D0*aINV**3*bb1*bb2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 )
      W3bub1a = W3bub1a + ss1*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*bb2**2
     &     )
      W3bub1a = W3bub1a - 4.D0*aINV**2*bb1*bb2

      W4bub1a = 0.d0

      W5bub1a =
     &  + p2q * (  - 4.D0*aINV**2*bb1*bb2 )
      W5bub1a = W5bub1a + ss1*CC1 * (  - 4.D0*aINV*qm**2 - aINV*hm1**2
     &     - 6.D0*aINV**2 + 2.D0*aINV**2*bb2**2*hm2**2*qm**2 + 1.D0/2.D0
     &    *aINV**2*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**2*bb1*bb2*hm2**2*
     &    qm**2 + aINV**2*bb1*bb2*hm1**2*hm2**2 + 2.D0*aINV**2*bb1**2*
     &    hm1**2*qm**2 + 1.D0/2.D0*aINV**2*bb1**2*hm1**4 + 10.D0*
     &    aINV**3*bb2**2*hm2**2 + 20.D0*aINV**3*bb1*bb2*hm2**2 + 10.D0*
     &    aINV**3*bb1**2*hm1**2 - 2.D0*aINV**4*bb2**4*hm2**4 - 8.D0*
     &    aINV**4*bb1*bb2**3*hm2**4 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**4
     &     - 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**4*bb1**4*hm1**4 )
      W5bub1a = W5bub1a + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 
     &    aINV**2*bb1*bb2*hm1**2 + 20.D0*aINV**3*bb1*bb2 - 8.D0*aINV**4
     &    *bb1*bb2**3*hm2**2 - 16.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**4*bb1**3*bb2*hm1**2 )
      W5bub1a = W5bub1a + ss1*CC1*p2q**2 * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2 )
      W5bub1a = W5bub1a + 2.D0*qm**2 + 1.D0/2.D0*hm1**2 + 2.D0*aINV - 2.
     &    D0*aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 - 2.D0
     &    *aINV**2*bb1**2*hm1**2


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1aW5_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W5bub1a
        
        return
        end

C---------------psi2-chiC2: bub1b --------------------------------
      
C------------  chiC2: matrix element bub1b W1  -----------------
      
	double precision function Fbub1bW1_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1) 

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1bW1_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1bW1_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW1_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1bW1_psi2schic2=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW1_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub1bW1_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )

      W1bub1b =
     &  + ss1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub1b = W1bub1b + ss1*CC1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D
     &    0*aINV**4*bb1**3*bb2 )
      W1bub1b = W1bub1b + ss1**2*CC1 * ( 16.D0*aINV**4*bb1*bb2**2*tau
     &     + 8.D0*aINV**4*bb1**2*bb2*tau - 4.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*tau + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*tau - 8.D0*
     &    aINV**4*bb1**3*tau - 4.D0*aINV**4*bb1**3*bb2*hm2**2*tau + 4.D0
     &    *aINV**4*bb1**3*bb2*hm1**2*tau - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2*tau - 16.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 16.D0*
     &    aINV**5*bb1**4*bb2*hm2**2*tau - 16.D0*aINV**5*bb1**4*bb2*
     &    hm1**2*tau + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*
     &    aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1bub1b = W1bub1b + ss1**2*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 8.D0*aINV**4*bb1**3*bb2*tau - 16.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 16.D0*aINV**5*bb1**4*bb2*tau + 32.D0*
     &    aINV**6*bb1**3*bb2**3 + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub1b =
     &  + ss1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm2**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0
     &    *aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1*CC1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - 
     &    aINV**2*bb1*bb2*hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*
     &    bb1**2*hm2**2 - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 
     &    4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3
     &    *bb2*hm1**2 + 4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*CC1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 
     &    8.D0*aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau - 2.D0*aINV**2*bb1*qm**2*
     &    tau - 1.D0/2.D0*aINV**2*bb1*hm2**2*tau + aINV**2*bb1*bb2*
     &    hm2**2*qm**2*tau + 1.D0/4.D0*aINV**2*bb1*bb2*hm2**4*tau - 
     &    aINV**2*bb1*bb2*hm1**2*qm**2*tau - 1.D0/4.D0*aINV**2*bb1*bb2*
     &    hm1**2*hm2**2*tau + aINV**2*bb1**2*hm2**2*qm**2*tau + 1.D0/4.D
     &    0*aINV**2*bb1**2*hm2**4*tau - aINV**2*bb1**2*hm1**2*qm**2*tau
     &     - 1.D0/4.D0*aINV**2*bb1**2*hm1**2*hm2**2*tau - 4.D0*aINV**3*
     &    bb2*tau - 4.D0*aINV**3*bb1*tau + 16.D0*aINV**3*bb1*bb2*qm**2
     &     + 4.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*bb2*hm2**2*
     &    tau - 2.D0*aINV**3*bb1*bb2*hm1**2*tau + 16.D0*aINV**3*bb1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*hm2**2 + 2.D0*aINV**3*bb1**2*
     &    hm2**2*tau - 2.D0*aINV**3*bb1**2*hm1**2*tau - 4.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2*tau - aINV**3*bb1**2*bb2*hm2**4*tau
     &     + 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2*tau + aINV**3*bb1**2*
     &    bb2*hm1**2*hm2**2*tau )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb1**3*hm2**2*
     &    qm**2*tau - aINV**3*bb1**3*hm2**4*tau + 4.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2*tau + aINV**3*bb1**3*hm1**2*hm2**2*tau + 2.D0*
     &    aINV**4*bb2**3*hm2**2*tau + 40.D0*aINV**4*bb1*bb2 + 6.D0*
     &    aINV**4*bb1*bb2**2*hm2**2*tau - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm2**4 - aINV**4*bb1*bb2**3
     &    *hm2**4*tau + aINV**4*bb1*bb2**3*hm1**2*hm2**2*tau + 40.D0*
     &    aINV**4*bb1**2 - 8.D0*aINV**4*bb1**2*bb2*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**2*bb2*hm1**2*tau - 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 3.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4*tau + 3.D0*aINV**4*bb1**2*bb2**2
     &    *hm1**2*hm2**2*tau - 12.D0*aINV**4*bb1**3*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**4 - 2.D0*aINV**4*bb1**3*
     &    bb2*hm2**4*tau - 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 
     &    aINV**4*bb1**3*bb2*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( aINV**4*bb1**3*bb2*hm1**2*
     &    hm2**2*tau + aINV**4*bb1**3*bb2*hm1**4*tau - 4.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - aINV**4*bb1**4*hm1**2*hm2**2 - aINV**4*
     &    bb1**4*hm1**2*hm2**2*tau + aINV**4*bb1**4*hm1**4*tau - 32.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 96.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**2*bb2**3*hm2**4*tau - 4.D0*aINV**5
     &    *bb1**2*bb2**3*hm1**2*hm2**2*tau - 64.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 + 12.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2
     &    *hm2**2*tau - 32.D0*aINV**5*bb1**4*hm1**2 + 8.D0*aINV**5*
     &    bb1**4*bb2*hm2**4*tau - 4.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2
     &    *tau - 4.D0*aINV**5*bb1**4*bb2*hm1**4*tau + 4.D0*aINV**5*
     &    bb1**5*hm1**2*hm2**2*tau - 4.D0*aINV**5*bb1**5*hm1**4*tau + 4.
     &    D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**4 + 24.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*
     &    hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2*qm**2
     &    *tau + 1.D0/2.D0*aINV**2*bb1*bb2*hm2**2*tau + 2.D0*aINV**2*
     &    bb1**2*qm**2*tau + 1.D0/2.D0*aINV**2*bb1**2*hm2**2*tau + 4.D0
     &    *aINV**3*bb1*bb2*tau + 4.D0*aINV**3*bb1*bb2**2*qm**2*tau + 
     &    aINV**3*bb1*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1**2*tau - 4.D0
     &    *aINV**3*bb1**3*qm**2*tau - aINV**3*bb1**3*hm2**2*tau + 16.D0
     &    *aINV**4*bb1*bb2**2*tau - 2.D0*aINV**4*bb1*bb2**3*hm2**2*tau
     &     + 4.D0*aINV**4*bb1**2*bb2*tau - 8.D0*aINV**4*bb1**2*bb2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*tau + 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    tau - 12.D0*aINV**4*bb1**3*tau - 8.D0*aINV**4*bb1**3*bb2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**2 - 6.D0*aINV**4*bb1**3*
     &    bb2*hm2**2*tau - 2.D0*aINV**4*bb1**4*hm1**2*tau - 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2*tau - 64.D0*aINV**5*bb1**2*bb2**2
     &     - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2*tau - 64.D0*aINV**5*
     &    bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm2**2*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 
     &    16.D0*aINV**5*bb1**4*bb2*hm2**2*tau - 8.D0*aINV**5*bb1**4*bb2
     &    *hm1**2*tau + 4.D0*aINV**5*bb1**5*hm1**2*tau + 16.D0*aINV**6*
     &    bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 
     &    32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*
     &    bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q**2 * (  - 4.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 4.D0*aINV**4*bb1**3*bb2*tau - 8.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 8.D0*aINV**5*bb1**4*bb2*tau + 16.D0*
     &    aINV**6*bb1**3*bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub1b =
     &  + ss1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1*CC1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb2*tau + 4.D0
     &    *aINV**3*bb1*tau + 2.D0*aINV**3*bb1*bb2*hm2**2*tau - 2.D0*
     &    aINV**3*bb1*bb2*hm1**2*tau + 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 8.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 8.D0*aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*
     &    bb1**2*bb2**2*hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub1b = W3bub1b + ss1**2*CC1*p2q * ( 4.D0*aINV**3*bb1*bb2*tau
     &     + 8.D0*aINV**4*bb1*bb2**2*tau - 8.D0*aINV**4*bb1**2*bb2*tau
     &     - 16.D0*aINV**5*bb1**2*bb2**2 )

      W4bub1b =
     &  + ss1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1*CC1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1 * ( 8.D0*aINV**3*bb1*tau - 2.D0*
     &    aINV**3*bb1**2*hm2**2*tau + 2.D0*aINV**3*bb1**2*hm1**2*tau - 
     &    40.D0*aINV**4*bb1**2 + 8.D0*aINV**4*bb1**3*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**3*hm1**2*tau + 8.D0*aINV**5*bb1**2*bb2**2*hm2**2
     &     + 16.D0*aINV**5*bb1**3*bb2*hm2**2 + 8.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1**2*tau
     &     - 8.D0*aINV**4*bb1**2*bb2*tau + 8.D0*aINV**4*bb1**3*tau + 16.
     &    D0*aINV**5*bb1**3*bb2 )

      W5bub1b =
     &  + ss1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm2**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1*CC1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*
     &    hm2**2 + 2.D0*aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV*hm2**2*qm**2
     &    *tau - 1.D0/8.D0*aINV*hm2**4*tau + 1.D0/2.D0*aINV*hm1**2*
     &    qm**2*tau + 1.D0/8.D0*aINV*hm1**2*hm2**2*tau - 6.D0*aINV**2*
     &    qm**2 - 3.D0/2.D0*aINV**2*hm2**2 - 1.D0/2.D0*aINV**2*hm2**2*
     &    tau + 1.D0/2.D0*aINV**2*hm1**2*tau + 2.D0*aINV**2*bb1*hm2**2*
     &    qm**2*tau + 1.D0/2.D0*aINV**2*bb1*hm2**4*tau - 2.D0*aINV**2*
     &    bb1*hm1**2*qm**2*tau - 1.D0/2.D0*aINV**2*bb1*hm1**2*hm2**2*
     &    tau - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*qm**2 + 1.D0/
     &    2.D0*aINV**3*bb2**2*hm2**4 + 1.D0/2.D0*aINV**3*bb2**2*hm2**4*
     &    tau - 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2*tau + 4.D0*
     &    aINV**3*bb1*hm2**2*tau - 4.D0*aINV**3*bb1*hm1**2*tau + 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm2**4 + 
     &    aINV**3*bb1*bb2*hm2**4*tau - aINV**3*bb1*bb2*hm1**2*hm2**2*
     &    tau + 2.D0*aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*
     &    bb1**2*hm1**2*hm2**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**2*hm2**2
     &    *tau )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV**3*bb1**2*
     &    hm1**4*tau + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*
     &    bb2*hm2**2 - 2.D0*aINV**4*bb1*bb2**2*hm2**4*tau + 2.D0*
     &    aINV**4*bb1*bb2**2*hm1**2*hm2**2*tau + 12.D0*aINV**4*bb1**2*
     &    hm1**2 - 4.D0*aINV**4*bb1**2*bb2*hm2**4*tau + 4.D0*aINV**4*
     &    bb1**2*bb2*hm1**2*hm2**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*
     &    hm2**2*tau + 2.D0*aINV**4*bb1**3*hm1**4*tau - 2.D0*aINV**5*
     &    bb2**4*hm2**4 - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5
     &    *bb1**2*bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5
     &    *bb1**4*hm1**4 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q * (  - aINV*qm**2*tau - 1.D0/4.
     &    D0*aINV*hm2**2*tau - aINV**2*tau - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau + 2.D0*aINV**2*bb1*qm**2*
     &    tau + 1.D0/2.D0*aINV**2*bb1*hm2**2*tau - 4.D0*aINV**3*bb2*tau
     &     + aINV**3*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1*tau + 4.D0*
     &    aINV**3*bb1*bb2*qm**2 + aINV**3*bb1*bb2*hm2**2 + 3.D0*aINV**3
     &    *bb1*bb2*hm2**2*tau - aINV**3*bb1*bb2*hm1**2*tau + aINV**3*
     &    bb1**2*hm1**2*tau + 2.D0*aINV**4*bb2**3*hm2**2*tau + 24.D0*
     &    aINV**4*bb1*bb2 + 2.D0*aINV**4*bb1*bb2**2*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 6.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**5*
     &    bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**5*bb1**3*bb2*hm1**2 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q**2 * ( 2.D0*aINV**3*bb1*bb2*
     &    tau + 4.D0*aINV**4*bb1*bb2**2*tau - 4.D0*aINV**4*bb1**2*bb2*
     &    tau - 8.D0*aINV**5*bb1**2*bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1bW1_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W1bub1b
        
        return
        end
      
C------------  chiC2: matrix element bub1b W2  -----------------
      
	double precision function Fbub1bW2_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1bW2_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1bW2_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW2_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1bW2_psi2schic2=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW2_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub1bW2_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )

      W1bub1b =
     &  + ss1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub1b = W1bub1b + ss1*CC1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D
     &    0*aINV**4*bb1**3*bb2 )
      W1bub1b = W1bub1b + ss1**2*CC1 * ( 16.D0*aINV**4*bb1*bb2**2*tau
     &     + 8.D0*aINV**4*bb1**2*bb2*tau - 4.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*tau + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*tau - 8.D0*
     &    aINV**4*bb1**3*tau - 4.D0*aINV**4*bb1**3*bb2*hm2**2*tau + 4.D0
     &    *aINV**4*bb1**3*bb2*hm1**2*tau - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2*tau - 16.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 16.D0*
     &    aINV**5*bb1**4*bb2*hm2**2*tau - 16.D0*aINV**5*bb1**4*bb2*
     &    hm1**2*tau + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*
     &    aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1bub1b = W1bub1b + ss1**2*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 8.D0*aINV**4*bb1**3*bb2*tau - 16.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 16.D0*aINV**5*bb1**4*bb2*tau + 32.D0*
     &    aINV**6*bb1**3*bb2**3 + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub1b =
     &  + ss1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm2**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0
     &    *aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1*CC1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - 
     &    aINV**2*bb1*bb2*hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*
     &    bb1**2*hm2**2 - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 
     &    4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3
     &    *bb2*hm1**2 + 4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*CC1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 
     &    8.D0*aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau - 2.D0*aINV**2*bb1*qm**2*
     &    tau - 1.D0/2.D0*aINV**2*bb1*hm2**2*tau + aINV**2*bb1*bb2*
     &    hm2**2*qm**2*tau + 1.D0/4.D0*aINV**2*bb1*bb2*hm2**4*tau - 
     &    aINV**2*bb1*bb2*hm1**2*qm**2*tau - 1.D0/4.D0*aINV**2*bb1*bb2*
     &    hm1**2*hm2**2*tau + aINV**2*bb1**2*hm2**2*qm**2*tau + 1.D0/4.D
     &    0*aINV**2*bb1**2*hm2**4*tau - aINV**2*bb1**2*hm1**2*qm**2*tau
     &     - 1.D0/4.D0*aINV**2*bb1**2*hm1**2*hm2**2*tau - 4.D0*aINV**3*
     &    bb2*tau - 4.D0*aINV**3*bb1*tau + 16.D0*aINV**3*bb1*bb2*qm**2
     &     + 4.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*bb2*hm2**2*
     &    tau - 2.D0*aINV**3*bb1*bb2*hm1**2*tau + 16.D0*aINV**3*bb1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*hm2**2 + 2.D0*aINV**3*bb1**2*
     &    hm2**2*tau - 2.D0*aINV**3*bb1**2*hm1**2*tau - 4.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2*tau - aINV**3*bb1**2*bb2*hm2**4*tau
     &     + 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2*tau + aINV**3*bb1**2*
     &    bb2*hm1**2*hm2**2*tau )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb1**3*hm2**2*
     &    qm**2*tau - aINV**3*bb1**3*hm2**4*tau + 4.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2*tau + aINV**3*bb1**3*hm1**2*hm2**2*tau + 2.D0*
     &    aINV**4*bb2**3*hm2**2*tau + 40.D0*aINV**4*bb1*bb2 + 6.D0*
     &    aINV**4*bb1*bb2**2*hm2**2*tau - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm2**4 - aINV**4*bb1*bb2**3
     &    *hm2**4*tau + aINV**4*bb1*bb2**3*hm1**2*hm2**2*tau + 40.D0*
     &    aINV**4*bb1**2 - 8.D0*aINV**4*bb1**2*bb2*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**2*bb2*hm1**2*tau - 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 3.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4*tau + 3.D0*aINV**4*bb1**2*bb2**2
     &    *hm1**2*hm2**2*tau - 12.D0*aINV**4*bb1**3*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**4 - 2.D0*aINV**4*bb1**3*
     &    bb2*hm2**4*tau - 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 
     &    aINV**4*bb1**3*bb2*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( aINV**4*bb1**3*bb2*hm1**2*
     &    hm2**2*tau + aINV**4*bb1**3*bb2*hm1**4*tau - 4.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - aINV**4*bb1**4*hm1**2*hm2**2 - aINV**4*
     &    bb1**4*hm1**2*hm2**2*tau + aINV**4*bb1**4*hm1**4*tau - 32.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 96.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**2*bb2**3*hm2**4*tau - 4.D0*aINV**5
     &    *bb1**2*bb2**3*hm1**2*hm2**2*tau - 64.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 + 12.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2
     &    *hm2**2*tau - 32.D0*aINV**5*bb1**4*hm1**2 + 8.D0*aINV**5*
     &    bb1**4*bb2*hm2**4*tau - 4.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2
     &    *tau - 4.D0*aINV**5*bb1**4*bb2*hm1**4*tau + 4.D0*aINV**5*
     &    bb1**5*hm1**2*hm2**2*tau - 4.D0*aINV**5*bb1**5*hm1**4*tau + 4.
     &    D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**4 + 24.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*
     &    hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2*qm**2
     &    *tau + 1.D0/2.D0*aINV**2*bb1*bb2*hm2**2*tau + 2.D0*aINV**2*
     &    bb1**2*qm**2*tau + 1.D0/2.D0*aINV**2*bb1**2*hm2**2*tau + 4.D0
     &    *aINV**3*bb1*bb2*tau + 4.D0*aINV**3*bb1*bb2**2*qm**2*tau + 
     &    aINV**3*bb1*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1**2*tau - 4.D0
     &    *aINV**3*bb1**3*qm**2*tau - aINV**3*bb1**3*hm2**2*tau + 16.D0
     &    *aINV**4*bb1*bb2**2*tau - 2.D0*aINV**4*bb1*bb2**3*hm2**2*tau
     &     + 4.D0*aINV**4*bb1**2*bb2*tau - 8.D0*aINV**4*bb1**2*bb2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*tau + 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    tau - 12.D0*aINV**4*bb1**3*tau - 8.D0*aINV**4*bb1**3*bb2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**2 - 6.D0*aINV**4*bb1**3*
     &    bb2*hm2**2*tau - 2.D0*aINV**4*bb1**4*hm1**2*tau - 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2*tau - 64.D0*aINV**5*bb1**2*bb2**2
     &     - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2*tau - 64.D0*aINV**5*
     &    bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm2**2*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 
     &    16.D0*aINV**5*bb1**4*bb2*hm2**2*tau - 8.D0*aINV**5*bb1**4*bb2
     &    *hm1**2*tau + 4.D0*aINV**5*bb1**5*hm1**2*tau + 16.D0*aINV**6*
     &    bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 
     &    32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*
     &    bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q**2 * (  - 4.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 4.D0*aINV**4*bb1**3*bb2*tau - 8.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 8.D0*aINV**5*bb1**4*bb2*tau + 16.D0*
     &    aINV**6*bb1**3*bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub1b =
     &  + ss1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1*CC1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb2*tau + 4.D0
     &    *aINV**3*bb1*tau + 2.D0*aINV**3*bb1*bb2*hm2**2*tau - 2.D0*
     &    aINV**3*bb1*bb2*hm1**2*tau + 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 8.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 8.D0*aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*
     &    bb1**2*bb2**2*hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub1b = W3bub1b + ss1**2*CC1*p2q * ( 4.D0*aINV**3*bb1*bb2*tau
     &     + 8.D0*aINV**4*bb1*bb2**2*tau - 8.D0*aINV**4*bb1**2*bb2*tau
     &     - 16.D0*aINV**5*bb1**2*bb2**2 )

      W4bub1b =
     &  + ss1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1*CC1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1 * ( 8.D0*aINV**3*bb1*tau - 2.D0*
     &    aINV**3*bb1**2*hm2**2*tau + 2.D0*aINV**3*bb1**2*hm1**2*tau - 
     &    40.D0*aINV**4*bb1**2 + 8.D0*aINV**4*bb1**3*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**3*hm1**2*tau + 8.D0*aINV**5*bb1**2*bb2**2*hm2**2
     &     + 16.D0*aINV**5*bb1**3*bb2*hm2**2 + 8.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1**2*tau
     &     - 8.D0*aINV**4*bb1**2*bb2*tau + 8.D0*aINV**4*bb1**3*tau + 16.
     &    D0*aINV**5*bb1**3*bb2 )

      W5bub1b =
     &  + ss1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm2**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1*CC1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*
     &    hm2**2 + 2.D0*aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV*hm2**2*qm**2
     &    *tau - 1.D0/8.D0*aINV*hm2**4*tau + 1.D0/2.D0*aINV*hm1**2*
     &    qm**2*tau + 1.D0/8.D0*aINV*hm1**2*hm2**2*tau - 6.D0*aINV**2*
     &    qm**2 - 3.D0/2.D0*aINV**2*hm2**2 - 1.D0/2.D0*aINV**2*hm2**2*
     &    tau + 1.D0/2.D0*aINV**2*hm1**2*tau + 2.D0*aINV**2*bb1*hm2**2*
     &    qm**2*tau + 1.D0/2.D0*aINV**2*bb1*hm2**4*tau - 2.D0*aINV**2*
     &    bb1*hm1**2*qm**2*tau - 1.D0/2.D0*aINV**2*bb1*hm1**2*hm2**2*
     &    tau - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*qm**2 + 1.D0/
     &    2.D0*aINV**3*bb2**2*hm2**4 + 1.D0/2.D0*aINV**3*bb2**2*hm2**4*
     &    tau - 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2*tau + 4.D0*
     &    aINV**3*bb1*hm2**2*tau - 4.D0*aINV**3*bb1*hm1**2*tau + 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm2**4 + 
     &    aINV**3*bb1*bb2*hm2**4*tau - aINV**3*bb1*bb2*hm1**2*hm2**2*
     &    tau + 2.D0*aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*
     &    bb1**2*hm1**2*hm2**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**2*hm2**2
     &    *tau )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV**3*bb1**2*
     &    hm1**4*tau + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*
     &    bb2*hm2**2 - 2.D0*aINV**4*bb1*bb2**2*hm2**4*tau + 2.D0*
     &    aINV**4*bb1*bb2**2*hm1**2*hm2**2*tau + 12.D0*aINV**4*bb1**2*
     &    hm1**2 - 4.D0*aINV**4*bb1**2*bb2*hm2**4*tau + 4.D0*aINV**4*
     &    bb1**2*bb2*hm1**2*hm2**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*
     &    hm2**2*tau + 2.D0*aINV**4*bb1**3*hm1**4*tau - 2.D0*aINV**5*
     &    bb2**4*hm2**4 - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5
     &    *bb1**2*bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5
     &    *bb1**4*hm1**4 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q * (  - aINV*qm**2*tau - 1.D0/4.
     &    D0*aINV*hm2**2*tau - aINV**2*tau - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau + 2.D0*aINV**2*bb1*qm**2*
     &    tau + 1.D0/2.D0*aINV**2*bb1*hm2**2*tau - 4.D0*aINV**3*bb2*tau
     &     + aINV**3*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1*tau + 4.D0*
     &    aINV**3*bb1*bb2*qm**2 + aINV**3*bb1*bb2*hm2**2 + 3.D0*aINV**3
     &    *bb1*bb2*hm2**2*tau - aINV**3*bb1*bb2*hm1**2*tau + aINV**3*
     &    bb1**2*hm1**2*tau + 2.D0*aINV**4*bb2**3*hm2**2*tau + 24.D0*
     &    aINV**4*bb1*bb2 + 2.D0*aINV**4*bb1*bb2**2*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 6.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**5*
     &    bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**5*bb1**3*bb2*hm1**2 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q**2 * ( 2.D0*aINV**3*bb1*bb2*
     &    tau + 4.D0*aINV**4*bb1*bb2**2*tau - 4.D0*aINV**4*bb1**2*bb2*
     &    tau - 8.D0*aINV**5*bb1**2*bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1bW2_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W2bub1b
        
        return
        end
      
C------------  chiC2: matrix element bub1b W3  -----------------
      
	double precision function Fbub1bW3_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1bW3_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1bW3_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW3_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1bW3_psi2schic2=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW3_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub1bW3_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )

      W1bub1b =
     &  + ss1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub1b = W1bub1b + ss1*CC1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D
     &    0*aINV**4*bb1**3*bb2 )
      W1bub1b = W1bub1b + ss1**2*CC1 * ( 16.D0*aINV**4*bb1*bb2**2*tau
     &     + 8.D0*aINV**4*bb1**2*bb2*tau - 4.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*tau + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*tau - 8.D0*
     &    aINV**4*bb1**3*tau - 4.D0*aINV**4*bb1**3*bb2*hm2**2*tau + 4.D0
     &    *aINV**4*bb1**3*bb2*hm1**2*tau - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2*tau - 16.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 16.D0*
     &    aINV**5*bb1**4*bb2*hm2**2*tau - 16.D0*aINV**5*bb1**4*bb2*
     &    hm1**2*tau + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*
     &    aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1bub1b = W1bub1b + ss1**2*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 8.D0*aINV**4*bb1**3*bb2*tau - 16.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 16.D0*aINV**5*bb1**4*bb2*tau + 32.D0*
     &    aINV**6*bb1**3*bb2**3 + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub1b =
     &  + ss1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm2**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0
     &    *aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1*CC1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - 
     &    aINV**2*bb1*bb2*hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*
     &    bb1**2*hm2**2 - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 
     &    4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3
     &    *bb2*hm1**2 + 4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*CC1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 
     &    8.D0*aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau - 2.D0*aINV**2*bb1*qm**2*
     &    tau - 1.D0/2.D0*aINV**2*bb1*hm2**2*tau + aINV**2*bb1*bb2*
     &    hm2**2*qm**2*tau + 1.D0/4.D0*aINV**2*bb1*bb2*hm2**4*tau - 
     &    aINV**2*bb1*bb2*hm1**2*qm**2*tau - 1.D0/4.D0*aINV**2*bb1*bb2*
     &    hm1**2*hm2**2*tau + aINV**2*bb1**2*hm2**2*qm**2*tau + 1.D0/4.D
     &    0*aINV**2*bb1**2*hm2**4*tau - aINV**2*bb1**2*hm1**2*qm**2*tau
     &     - 1.D0/4.D0*aINV**2*bb1**2*hm1**2*hm2**2*tau - 4.D0*aINV**3*
     &    bb2*tau - 4.D0*aINV**3*bb1*tau + 16.D0*aINV**3*bb1*bb2*qm**2
     &     + 4.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*bb2*hm2**2*
     &    tau - 2.D0*aINV**3*bb1*bb2*hm1**2*tau + 16.D0*aINV**3*bb1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*hm2**2 + 2.D0*aINV**3*bb1**2*
     &    hm2**2*tau - 2.D0*aINV**3*bb1**2*hm1**2*tau - 4.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2*tau - aINV**3*bb1**2*bb2*hm2**4*tau
     &     + 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2*tau + aINV**3*bb1**2*
     &    bb2*hm1**2*hm2**2*tau )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb1**3*hm2**2*
     &    qm**2*tau - aINV**3*bb1**3*hm2**4*tau + 4.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2*tau + aINV**3*bb1**3*hm1**2*hm2**2*tau + 2.D0*
     &    aINV**4*bb2**3*hm2**2*tau + 40.D0*aINV**4*bb1*bb2 + 6.D0*
     &    aINV**4*bb1*bb2**2*hm2**2*tau - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm2**4 - aINV**4*bb1*bb2**3
     &    *hm2**4*tau + aINV**4*bb1*bb2**3*hm1**2*hm2**2*tau + 40.D0*
     &    aINV**4*bb1**2 - 8.D0*aINV**4*bb1**2*bb2*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**2*bb2*hm1**2*tau - 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 3.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4*tau + 3.D0*aINV**4*bb1**2*bb2**2
     &    *hm1**2*hm2**2*tau - 12.D0*aINV**4*bb1**3*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**4 - 2.D0*aINV**4*bb1**3*
     &    bb2*hm2**4*tau - 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 
     &    aINV**4*bb1**3*bb2*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( aINV**4*bb1**3*bb2*hm1**2*
     &    hm2**2*tau + aINV**4*bb1**3*bb2*hm1**4*tau - 4.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - aINV**4*bb1**4*hm1**2*hm2**2 - aINV**4*
     &    bb1**4*hm1**2*hm2**2*tau + aINV**4*bb1**4*hm1**4*tau - 32.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 96.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**2*bb2**3*hm2**4*tau - 4.D0*aINV**5
     &    *bb1**2*bb2**3*hm1**2*hm2**2*tau - 64.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 + 12.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2
     &    *hm2**2*tau - 32.D0*aINV**5*bb1**4*hm1**2 + 8.D0*aINV**5*
     &    bb1**4*bb2*hm2**4*tau - 4.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2
     &    *tau - 4.D0*aINV**5*bb1**4*bb2*hm1**4*tau + 4.D0*aINV**5*
     &    bb1**5*hm1**2*hm2**2*tau - 4.D0*aINV**5*bb1**5*hm1**4*tau + 4.
     &    D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**4 + 24.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*
     &    hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2*qm**2
     &    *tau + 1.D0/2.D0*aINV**2*bb1*bb2*hm2**2*tau + 2.D0*aINV**2*
     &    bb1**2*qm**2*tau + 1.D0/2.D0*aINV**2*bb1**2*hm2**2*tau + 4.D0
     &    *aINV**3*bb1*bb2*tau + 4.D0*aINV**3*bb1*bb2**2*qm**2*tau + 
     &    aINV**3*bb1*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1**2*tau - 4.D0
     &    *aINV**3*bb1**3*qm**2*tau - aINV**3*bb1**3*hm2**2*tau + 16.D0
     &    *aINV**4*bb1*bb2**2*tau - 2.D0*aINV**4*bb1*bb2**3*hm2**2*tau
     &     + 4.D0*aINV**4*bb1**2*bb2*tau - 8.D0*aINV**4*bb1**2*bb2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*tau + 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    tau - 12.D0*aINV**4*bb1**3*tau - 8.D0*aINV**4*bb1**3*bb2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**2 - 6.D0*aINV**4*bb1**3*
     &    bb2*hm2**2*tau - 2.D0*aINV**4*bb1**4*hm1**2*tau - 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2*tau - 64.D0*aINV**5*bb1**2*bb2**2
     &     - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2*tau - 64.D0*aINV**5*
     &    bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm2**2*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 
     &    16.D0*aINV**5*bb1**4*bb2*hm2**2*tau - 8.D0*aINV**5*bb1**4*bb2
     &    *hm1**2*tau + 4.D0*aINV**5*bb1**5*hm1**2*tau + 16.D0*aINV**6*
     &    bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 
     &    32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*
     &    bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q**2 * (  - 4.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 4.D0*aINV**4*bb1**3*bb2*tau - 8.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 8.D0*aINV**5*bb1**4*bb2*tau + 16.D0*
     &    aINV**6*bb1**3*bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub1b =
     &  + ss1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1*CC1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb2*tau + 4.D0
     &    *aINV**3*bb1*tau + 2.D0*aINV**3*bb1*bb2*hm2**2*tau - 2.D0*
     &    aINV**3*bb1*bb2*hm1**2*tau + 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 8.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 8.D0*aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*
     &    bb1**2*bb2**2*hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub1b = W3bub1b + ss1**2*CC1*p2q * ( 4.D0*aINV**3*bb1*bb2*tau
     &     + 8.D0*aINV**4*bb1*bb2**2*tau - 8.D0*aINV**4*bb1**2*bb2*tau
     &     - 16.D0*aINV**5*bb1**2*bb2**2 )

      W4bub1b =
     &  + ss1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1*CC1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1 * ( 8.D0*aINV**3*bb1*tau - 2.D0*
     &    aINV**3*bb1**2*hm2**2*tau + 2.D0*aINV**3*bb1**2*hm1**2*tau - 
     &    40.D0*aINV**4*bb1**2 + 8.D0*aINV**4*bb1**3*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**3*hm1**2*tau + 8.D0*aINV**5*bb1**2*bb2**2*hm2**2
     &     + 16.D0*aINV**5*bb1**3*bb2*hm2**2 + 8.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1**2*tau
     &     - 8.D0*aINV**4*bb1**2*bb2*tau + 8.D0*aINV**4*bb1**3*tau + 16.
     &    D0*aINV**5*bb1**3*bb2 )

      W5bub1b =
     &  + ss1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm2**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1*CC1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*
     &    hm2**2 + 2.D0*aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV*hm2**2*qm**2
     &    *tau - 1.D0/8.D0*aINV*hm2**4*tau + 1.D0/2.D0*aINV*hm1**2*
     &    qm**2*tau + 1.D0/8.D0*aINV*hm1**2*hm2**2*tau - 6.D0*aINV**2*
     &    qm**2 - 3.D0/2.D0*aINV**2*hm2**2 - 1.D0/2.D0*aINV**2*hm2**2*
     &    tau + 1.D0/2.D0*aINV**2*hm1**2*tau + 2.D0*aINV**2*bb1*hm2**2*
     &    qm**2*tau + 1.D0/2.D0*aINV**2*bb1*hm2**4*tau - 2.D0*aINV**2*
     &    bb1*hm1**2*qm**2*tau - 1.D0/2.D0*aINV**2*bb1*hm1**2*hm2**2*
     &    tau - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*qm**2 + 1.D0/
     &    2.D0*aINV**3*bb2**2*hm2**4 + 1.D0/2.D0*aINV**3*bb2**2*hm2**4*
     &    tau - 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2*tau + 4.D0*
     &    aINV**3*bb1*hm2**2*tau - 4.D0*aINV**3*bb1*hm1**2*tau + 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm2**4 + 
     &    aINV**3*bb1*bb2*hm2**4*tau - aINV**3*bb1*bb2*hm1**2*hm2**2*
     &    tau + 2.D0*aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*
     &    bb1**2*hm1**2*hm2**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**2*hm2**2
     &    *tau )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV**3*bb1**2*
     &    hm1**4*tau + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*
     &    bb2*hm2**2 - 2.D0*aINV**4*bb1*bb2**2*hm2**4*tau + 2.D0*
     &    aINV**4*bb1*bb2**2*hm1**2*hm2**2*tau + 12.D0*aINV**4*bb1**2*
     &    hm1**2 - 4.D0*aINV**4*bb1**2*bb2*hm2**4*tau + 4.D0*aINV**4*
     &    bb1**2*bb2*hm1**2*hm2**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*
     &    hm2**2*tau + 2.D0*aINV**4*bb1**3*hm1**4*tau - 2.D0*aINV**5*
     &    bb2**4*hm2**4 - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5
     &    *bb1**2*bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5
     &    *bb1**4*hm1**4 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q * (  - aINV*qm**2*tau - 1.D0/4.
     &    D0*aINV*hm2**2*tau - aINV**2*tau - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau + 2.D0*aINV**2*bb1*qm**2*
     &    tau + 1.D0/2.D0*aINV**2*bb1*hm2**2*tau - 4.D0*aINV**3*bb2*tau
     &     + aINV**3*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1*tau + 4.D0*
     &    aINV**3*bb1*bb2*qm**2 + aINV**3*bb1*bb2*hm2**2 + 3.D0*aINV**3
     &    *bb1*bb2*hm2**2*tau - aINV**3*bb1*bb2*hm1**2*tau + aINV**3*
     &    bb1**2*hm1**2*tau + 2.D0*aINV**4*bb2**3*hm2**2*tau + 24.D0*
     &    aINV**4*bb1*bb2 + 2.D0*aINV**4*bb1*bb2**2*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 6.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**5*
     &    bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**5*bb1**3*bb2*hm1**2 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q**2 * ( 2.D0*aINV**3*bb1*bb2*
     &    tau + 4.D0*aINV**4*bb1*bb2**2*tau - 4.D0*aINV**4*bb1**2*bb2*
     &    tau - 8.D0*aINV**5*bb1**2*bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1bW3_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W3bub1b
        
        return
        end
      
C------------  chiC2: matrix element bub1b W4  -----------------
      
	double precision function Fbub1bW4_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1bW4_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1bW4_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW4_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1bW4_psi2schic2=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW4_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub1bW4_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )

      W1bub1b =
     &  + ss1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub1b = W1bub1b + ss1*CC1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D
     &    0*aINV**4*bb1**3*bb2 )
      W1bub1b = W1bub1b + ss1**2*CC1 * ( 16.D0*aINV**4*bb1*bb2**2*tau
     &     + 8.D0*aINV**4*bb1**2*bb2*tau - 4.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*tau + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*tau - 8.D0*
     &    aINV**4*bb1**3*tau - 4.D0*aINV**4*bb1**3*bb2*hm2**2*tau + 4.D0
     &    *aINV**4*bb1**3*bb2*hm1**2*tau - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2*tau - 16.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 16.D0*
     &    aINV**5*bb1**4*bb2*hm2**2*tau - 16.D0*aINV**5*bb1**4*bb2*
     &    hm1**2*tau + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*
     &    aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1bub1b = W1bub1b + ss1**2*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 8.D0*aINV**4*bb1**3*bb2*tau - 16.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 16.D0*aINV**5*bb1**4*bb2*tau + 32.D0*
     &    aINV**6*bb1**3*bb2**3 + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub1b =
     &  + ss1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm2**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0
     &    *aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1*CC1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - 
     &    aINV**2*bb1*bb2*hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*
     &    bb1**2*hm2**2 - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 
     &    4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3
     &    *bb2*hm1**2 + 4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*CC1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 
     &    8.D0*aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau - 2.D0*aINV**2*bb1*qm**2*
     &    tau - 1.D0/2.D0*aINV**2*bb1*hm2**2*tau + aINV**2*bb1*bb2*
     &    hm2**2*qm**2*tau + 1.D0/4.D0*aINV**2*bb1*bb2*hm2**4*tau - 
     &    aINV**2*bb1*bb2*hm1**2*qm**2*tau - 1.D0/4.D0*aINV**2*bb1*bb2*
     &    hm1**2*hm2**2*tau + aINV**2*bb1**2*hm2**2*qm**2*tau + 1.D0/4.D
     &    0*aINV**2*bb1**2*hm2**4*tau - aINV**2*bb1**2*hm1**2*qm**2*tau
     &     - 1.D0/4.D0*aINV**2*bb1**2*hm1**2*hm2**2*tau - 4.D0*aINV**3*
     &    bb2*tau - 4.D0*aINV**3*bb1*tau + 16.D0*aINV**3*bb1*bb2*qm**2
     &     + 4.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*bb2*hm2**2*
     &    tau - 2.D0*aINV**3*bb1*bb2*hm1**2*tau + 16.D0*aINV**3*bb1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*hm2**2 + 2.D0*aINV**3*bb1**2*
     &    hm2**2*tau - 2.D0*aINV**3*bb1**2*hm1**2*tau - 4.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2*tau - aINV**3*bb1**2*bb2*hm2**4*tau
     &     + 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2*tau + aINV**3*bb1**2*
     &    bb2*hm1**2*hm2**2*tau )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb1**3*hm2**2*
     &    qm**2*tau - aINV**3*bb1**3*hm2**4*tau + 4.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2*tau + aINV**3*bb1**3*hm1**2*hm2**2*tau + 2.D0*
     &    aINV**4*bb2**3*hm2**2*tau + 40.D0*aINV**4*bb1*bb2 + 6.D0*
     &    aINV**4*bb1*bb2**2*hm2**2*tau - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm2**4 - aINV**4*bb1*bb2**3
     &    *hm2**4*tau + aINV**4*bb1*bb2**3*hm1**2*hm2**2*tau + 40.D0*
     &    aINV**4*bb1**2 - 8.D0*aINV**4*bb1**2*bb2*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**2*bb2*hm1**2*tau - 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 3.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4*tau + 3.D0*aINV**4*bb1**2*bb2**2
     &    *hm1**2*hm2**2*tau - 12.D0*aINV**4*bb1**3*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**4 - 2.D0*aINV**4*bb1**3*
     &    bb2*hm2**4*tau - 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 
     &    aINV**4*bb1**3*bb2*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( aINV**4*bb1**3*bb2*hm1**2*
     &    hm2**2*tau + aINV**4*bb1**3*bb2*hm1**4*tau - 4.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - aINV**4*bb1**4*hm1**2*hm2**2 - aINV**4*
     &    bb1**4*hm1**2*hm2**2*tau + aINV**4*bb1**4*hm1**4*tau - 32.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 96.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**2*bb2**3*hm2**4*tau - 4.D0*aINV**5
     &    *bb1**2*bb2**3*hm1**2*hm2**2*tau - 64.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 + 12.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2
     &    *hm2**2*tau - 32.D0*aINV**5*bb1**4*hm1**2 + 8.D0*aINV**5*
     &    bb1**4*bb2*hm2**4*tau - 4.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2
     &    *tau - 4.D0*aINV**5*bb1**4*bb2*hm1**4*tau + 4.D0*aINV**5*
     &    bb1**5*hm1**2*hm2**2*tau - 4.D0*aINV**5*bb1**5*hm1**4*tau + 4.
     &    D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**4 + 24.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*
     &    hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2*qm**2
     &    *tau + 1.D0/2.D0*aINV**2*bb1*bb2*hm2**2*tau + 2.D0*aINV**2*
     &    bb1**2*qm**2*tau + 1.D0/2.D0*aINV**2*bb1**2*hm2**2*tau + 4.D0
     &    *aINV**3*bb1*bb2*tau + 4.D0*aINV**3*bb1*bb2**2*qm**2*tau + 
     &    aINV**3*bb1*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1**2*tau - 4.D0
     &    *aINV**3*bb1**3*qm**2*tau - aINV**3*bb1**3*hm2**2*tau + 16.D0
     &    *aINV**4*bb1*bb2**2*tau - 2.D0*aINV**4*bb1*bb2**3*hm2**2*tau
     &     + 4.D0*aINV**4*bb1**2*bb2*tau - 8.D0*aINV**4*bb1**2*bb2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*tau + 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    tau - 12.D0*aINV**4*bb1**3*tau - 8.D0*aINV**4*bb1**3*bb2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**2 - 6.D0*aINV**4*bb1**3*
     &    bb2*hm2**2*tau - 2.D0*aINV**4*bb1**4*hm1**2*tau - 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2*tau - 64.D0*aINV**5*bb1**2*bb2**2
     &     - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2*tau - 64.D0*aINV**5*
     &    bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm2**2*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 
     &    16.D0*aINV**5*bb1**4*bb2*hm2**2*tau - 8.D0*aINV**5*bb1**4*bb2
     &    *hm1**2*tau + 4.D0*aINV**5*bb1**5*hm1**2*tau + 16.D0*aINV**6*
     &    bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 
     &    32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*
     &    bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q**2 * (  - 4.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 4.D0*aINV**4*bb1**3*bb2*tau - 8.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 8.D0*aINV**5*bb1**4*bb2*tau + 16.D0*
     &    aINV**6*bb1**3*bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub1b =
     &  + ss1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1*CC1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb2*tau + 4.D0
     &    *aINV**3*bb1*tau + 2.D0*aINV**3*bb1*bb2*hm2**2*tau - 2.D0*
     &    aINV**3*bb1*bb2*hm1**2*tau + 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 8.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 8.D0*aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*
     &    bb1**2*bb2**2*hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub1b = W3bub1b + ss1**2*CC1*p2q * ( 4.D0*aINV**3*bb1*bb2*tau
     &     + 8.D0*aINV**4*bb1*bb2**2*tau - 8.D0*aINV**4*bb1**2*bb2*tau
     &     - 16.D0*aINV**5*bb1**2*bb2**2 )

      W4bub1b =
     &  + ss1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1*CC1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1 * ( 8.D0*aINV**3*bb1*tau - 2.D0*
     &    aINV**3*bb1**2*hm2**2*tau + 2.D0*aINV**3*bb1**2*hm1**2*tau - 
     &    40.D0*aINV**4*bb1**2 + 8.D0*aINV**4*bb1**3*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**3*hm1**2*tau + 8.D0*aINV**5*bb1**2*bb2**2*hm2**2
     &     + 16.D0*aINV**5*bb1**3*bb2*hm2**2 + 8.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1**2*tau
     &     - 8.D0*aINV**4*bb1**2*bb2*tau + 8.D0*aINV**4*bb1**3*tau + 16.
     &    D0*aINV**5*bb1**3*bb2 )

      W5bub1b =
     &  + ss1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm2**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1*CC1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*
     &    hm2**2 + 2.D0*aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV*hm2**2*qm**2
     &    *tau - 1.D0/8.D0*aINV*hm2**4*tau + 1.D0/2.D0*aINV*hm1**2*
     &    qm**2*tau + 1.D0/8.D0*aINV*hm1**2*hm2**2*tau - 6.D0*aINV**2*
     &    qm**2 - 3.D0/2.D0*aINV**2*hm2**2 - 1.D0/2.D0*aINV**2*hm2**2*
     &    tau + 1.D0/2.D0*aINV**2*hm1**2*tau + 2.D0*aINV**2*bb1*hm2**2*
     &    qm**2*tau + 1.D0/2.D0*aINV**2*bb1*hm2**4*tau - 2.D0*aINV**2*
     &    bb1*hm1**2*qm**2*tau - 1.D0/2.D0*aINV**2*bb1*hm1**2*hm2**2*
     &    tau - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*qm**2 + 1.D0/
     &    2.D0*aINV**3*bb2**2*hm2**4 + 1.D0/2.D0*aINV**3*bb2**2*hm2**4*
     &    tau - 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2*tau + 4.D0*
     &    aINV**3*bb1*hm2**2*tau - 4.D0*aINV**3*bb1*hm1**2*tau + 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm2**4 + 
     &    aINV**3*bb1*bb2*hm2**4*tau - aINV**3*bb1*bb2*hm1**2*hm2**2*
     &    tau + 2.D0*aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*
     &    bb1**2*hm1**2*hm2**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**2*hm2**2
     &    *tau )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV**3*bb1**2*
     &    hm1**4*tau + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*
     &    bb2*hm2**2 - 2.D0*aINV**4*bb1*bb2**2*hm2**4*tau + 2.D0*
     &    aINV**4*bb1*bb2**2*hm1**2*hm2**2*tau + 12.D0*aINV**4*bb1**2*
     &    hm1**2 - 4.D0*aINV**4*bb1**2*bb2*hm2**4*tau + 4.D0*aINV**4*
     &    bb1**2*bb2*hm1**2*hm2**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*
     &    hm2**2*tau + 2.D0*aINV**4*bb1**3*hm1**4*tau - 2.D0*aINV**5*
     &    bb2**4*hm2**4 - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5
     &    *bb1**2*bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5
     &    *bb1**4*hm1**4 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q * (  - aINV*qm**2*tau - 1.D0/4.
     &    D0*aINV*hm2**2*tau - aINV**2*tau - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau + 2.D0*aINV**2*bb1*qm**2*
     &    tau + 1.D0/2.D0*aINV**2*bb1*hm2**2*tau - 4.D0*aINV**3*bb2*tau
     &     + aINV**3*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1*tau + 4.D0*
     &    aINV**3*bb1*bb2*qm**2 + aINV**3*bb1*bb2*hm2**2 + 3.D0*aINV**3
     &    *bb1*bb2*hm2**2*tau - aINV**3*bb1*bb2*hm1**2*tau + aINV**3*
     &    bb1**2*hm1**2*tau + 2.D0*aINV**4*bb2**3*hm2**2*tau + 24.D0*
     &    aINV**4*bb1*bb2 + 2.D0*aINV**4*bb1*bb2**2*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 6.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**5*
     &    bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**5*bb1**3*bb2*hm1**2 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q**2 * ( 2.D0*aINV**3*bb1*bb2*
     &    tau + 4.D0*aINV**4*bb1*bb2**2*tau - 4.D0*aINV**4*bb1**2*bb2*
     &    tau - 8.D0*aINV**5*bb1**2*bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1bW4_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W4bub1b
        
        return
        end
      
C------------  chiC2: matrix element bub1b W5  -----------------
      
	double precision function Fbub1bW5_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1bW5_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1bW5_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW5_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1bW5_psi2schic2=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW5_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub1bW5_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )

      W1bub1b =
     &  + ss1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub1b = W1bub1b + ss1*CC1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D
     &    0*aINV**4*bb1**3*bb2 )
      W1bub1b = W1bub1b + ss1**2*CC1 * ( 16.D0*aINV**4*bb1*bb2**2*tau
     &     + 8.D0*aINV**4*bb1**2*bb2*tau - 4.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*tau + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*tau - 8.D0*
     &    aINV**4*bb1**3*tau - 4.D0*aINV**4*bb1**3*bb2*hm2**2*tau + 4.D0
     &    *aINV**4*bb1**3*bb2*hm1**2*tau - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2*tau - 16.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 16.D0*
     &    aINV**5*bb1**4*bb2*hm2**2*tau - 16.D0*aINV**5*bb1**4*bb2*
     &    hm1**2*tau + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*
     &    aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1bub1b = W1bub1b + ss1**2*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 8.D0*aINV**4*bb1**3*bb2*tau - 16.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 16.D0*aINV**5*bb1**4*bb2*tau + 32.D0*
     &    aINV**6*bb1**3*bb2**3 + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub1b =
     &  + ss1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm2**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0
     &    *aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1*CC1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - 
     &    aINV**2*bb1*bb2*hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*
     &    bb1**2*hm2**2 - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 
     &    4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3
     &    *bb2*hm1**2 + 4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*CC1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 
     &    8.D0*aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau - 2.D0*aINV**2*bb1*qm**2*
     &    tau - 1.D0/2.D0*aINV**2*bb1*hm2**2*tau + aINV**2*bb1*bb2*
     &    hm2**2*qm**2*tau + 1.D0/4.D0*aINV**2*bb1*bb2*hm2**4*tau - 
     &    aINV**2*bb1*bb2*hm1**2*qm**2*tau - 1.D0/4.D0*aINV**2*bb1*bb2*
     &    hm1**2*hm2**2*tau + aINV**2*bb1**2*hm2**2*qm**2*tau + 1.D0/4.D
     &    0*aINV**2*bb1**2*hm2**4*tau - aINV**2*bb1**2*hm1**2*qm**2*tau
     &     - 1.D0/4.D0*aINV**2*bb1**2*hm1**2*hm2**2*tau - 4.D0*aINV**3*
     &    bb2*tau - 4.D0*aINV**3*bb1*tau + 16.D0*aINV**3*bb1*bb2*qm**2
     &     + 4.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*bb2*hm2**2*
     &    tau - 2.D0*aINV**3*bb1*bb2*hm1**2*tau + 16.D0*aINV**3*bb1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*hm2**2 + 2.D0*aINV**3*bb1**2*
     &    hm2**2*tau - 2.D0*aINV**3*bb1**2*hm1**2*tau - 4.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2*tau - aINV**3*bb1**2*bb2*hm2**4*tau
     &     + 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2*tau + aINV**3*bb1**2*
     &    bb2*hm1**2*hm2**2*tau )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb1**3*hm2**2*
     &    qm**2*tau - aINV**3*bb1**3*hm2**4*tau + 4.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2*tau + aINV**3*bb1**3*hm1**2*hm2**2*tau + 2.D0*
     &    aINV**4*bb2**3*hm2**2*tau + 40.D0*aINV**4*bb1*bb2 + 6.D0*
     &    aINV**4*bb1*bb2**2*hm2**2*tau - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm2**4 - aINV**4*bb1*bb2**3
     &    *hm2**4*tau + aINV**4*bb1*bb2**3*hm1**2*hm2**2*tau + 40.D0*
     &    aINV**4*bb1**2 - 8.D0*aINV**4*bb1**2*bb2*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**2*bb2*hm1**2*tau - 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 3.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4*tau + 3.D0*aINV**4*bb1**2*bb2**2
     &    *hm1**2*hm2**2*tau - 12.D0*aINV**4*bb1**3*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**4 - 2.D0*aINV**4*bb1**3*
     &    bb2*hm2**4*tau - 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 
     &    aINV**4*bb1**3*bb2*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( aINV**4*bb1**3*bb2*hm1**2*
     &    hm2**2*tau + aINV**4*bb1**3*bb2*hm1**4*tau - 4.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - aINV**4*bb1**4*hm1**2*hm2**2 - aINV**4*
     &    bb1**4*hm1**2*hm2**2*tau + aINV**4*bb1**4*hm1**4*tau - 32.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 96.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**2*bb2**3*hm2**4*tau - 4.D0*aINV**5
     &    *bb1**2*bb2**3*hm1**2*hm2**2*tau - 64.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 + 12.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2
     &    *hm2**2*tau - 32.D0*aINV**5*bb1**4*hm1**2 + 8.D0*aINV**5*
     &    bb1**4*bb2*hm2**4*tau - 4.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2
     &    *tau - 4.D0*aINV**5*bb1**4*bb2*hm1**4*tau + 4.D0*aINV**5*
     &    bb1**5*hm1**2*hm2**2*tau - 4.D0*aINV**5*bb1**5*hm1**4*tau + 4.
     &    D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**4 + 24.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*
     &    hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2*qm**2
     &    *tau + 1.D0/2.D0*aINV**2*bb1*bb2*hm2**2*tau + 2.D0*aINV**2*
     &    bb1**2*qm**2*tau + 1.D0/2.D0*aINV**2*bb1**2*hm2**2*tau + 4.D0
     &    *aINV**3*bb1*bb2*tau + 4.D0*aINV**3*bb1*bb2**2*qm**2*tau + 
     &    aINV**3*bb1*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1**2*tau - 4.D0
     &    *aINV**3*bb1**3*qm**2*tau - aINV**3*bb1**3*hm2**2*tau + 16.D0
     &    *aINV**4*bb1*bb2**2*tau - 2.D0*aINV**4*bb1*bb2**3*hm2**2*tau
     &     + 4.D0*aINV**4*bb1**2*bb2*tau - 8.D0*aINV**4*bb1**2*bb2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*tau + 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    tau - 12.D0*aINV**4*bb1**3*tau - 8.D0*aINV**4*bb1**3*bb2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**2 - 6.D0*aINV**4*bb1**3*
     &    bb2*hm2**2*tau - 2.D0*aINV**4*bb1**4*hm1**2*tau - 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2*tau - 64.D0*aINV**5*bb1**2*bb2**2
     &     - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2*tau - 64.D0*aINV**5*
     &    bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm2**2*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 
     &    16.D0*aINV**5*bb1**4*bb2*hm2**2*tau - 8.D0*aINV**5*bb1**4*bb2
     &    *hm1**2*tau + 4.D0*aINV**5*bb1**5*hm1**2*tau + 16.D0*aINV**6*
     &    bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 
     &    32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*
     &    bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q**2 * (  - 4.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 4.D0*aINV**4*bb1**3*bb2*tau - 8.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 8.D0*aINV**5*bb1**4*bb2*tau + 16.D0*
     &    aINV**6*bb1**3*bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub1b =
     &  + ss1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1*CC1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb2*tau + 4.D0
     &    *aINV**3*bb1*tau + 2.D0*aINV**3*bb1*bb2*hm2**2*tau - 2.D0*
     &    aINV**3*bb1*bb2*hm1**2*tau + 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 8.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 8.D0*aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*
     &    bb1**2*bb2**2*hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub1b = W3bub1b + ss1**2*CC1*p2q * ( 4.D0*aINV**3*bb1*bb2*tau
     &     + 8.D0*aINV**4*bb1*bb2**2*tau - 8.D0*aINV**4*bb1**2*bb2*tau
     &     - 16.D0*aINV**5*bb1**2*bb2**2 )

      W4bub1b =
     &  + ss1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1*CC1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1 * ( 8.D0*aINV**3*bb1*tau - 2.D0*
     &    aINV**3*bb1**2*hm2**2*tau + 2.D0*aINV**3*bb1**2*hm1**2*tau - 
     &    40.D0*aINV**4*bb1**2 + 8.D0*aINV**4*bb1**3*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**3*hm1**2*tau + 8.D0*aINV**5*bb1**2*bb2**2*hm2**2
     &     + 16.D0*aINV**5*bb1**3*bb2*hm2**2 + 8.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1**2*tau
     &     - 8.D0*aINV**4*bb1**2*bb2*tau + 8.D0*aINV**4*bb1**3*tau + 16.
     &    D0*aINV**5*bb1**3*bb2 )

      W5bub1b =
     &  + ss1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm2**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1*CC1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*
     &    hm2**2 + 2.D0*aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV*hm2**2*qm**2
     &    *tau - 1.D0/8.D0*aINV*hm2**4*tau + 1.D0/2.D0*aINV*hm1**2*
     &    qm**2*tau + 1.D0/8.D0*aINV*hm1**2*hm2**2*tau - 6.D0*aINV**2*
     &    qm**2 - 3.D0/2.D0*aINV**2*hm2**2 - 1.D0/2.D0*aINV**2*hm2**2*
     &    tau + 1.D0/2.D0*aINV**2*hm1**2*tau + 2.D0*aINV**2*bb1*hm2**2*
     &    qm**2*tau + 1.D0/2.D0*aINV**2*bb1*hm2**4*tau - 2.D0*aINV**2*
     &    bb1*hm1**2*qm**2*tau - 1.D0/2.D0*aINV**2*bb1*hm1**2*hm2**2*
     &    tau - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*qm**2 + 1.D0/
     &    2.D0*aINV**3*bb2**2*hm2**4 + 1.D0/2.D0*aINV**3*bb2**2*hm2**4*
     &    tau - 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2*tau + 4.D0*
     &    aINV**3*bb1*hm2**2*tau - 4.D0*aINV**3*bb1*hm1**2*tau + 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm2**4 + 
     &    aINV**3*bb1*bb2*hm2**4*tau - aINV**3*bb1*bb2*hm1**2*hm2**2*
     &    tau + 2.D0*aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*
     &    bb1**2*hm1**2*hm2**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**2*hm2**2
     &    *tau )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV**3*bb1**2*
     &    hm1**4*tau + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*
     &    bb2*hm2**2 - 2.D0*aINV**4*bb1*bb2**2*hm2**4*tau + 2.D0*
     &    aINV**4*bb1*bb2**2*hm1**2*hm2**2*tau + 12.D0*aINV**4*bb1**2*
     &    hm1**2 - 4.D0*aINV**4*bb1**2*bb2*hm2**4*tau + 4.D0*aINV**4*
     &    bb1**2*bb2*hm1**2*hm2**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*
     &    hm2**2*tau + 2.D0*aINV**4*bb1**3*hm1**4*tau - 2.D0*aINV**5*
     &    bb2**4*hm2**4 - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5
     &    *bb1**2*bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5
     &    *bb1**4*hm1**4 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q * (  - aINV*qm**2*tau - 1.D0/4.
     &    D0*aINV*hm2**2*tau - aINV**2*tau - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau + 2.D0*aINV**2*bb1*qm**2*
     &    tau + 1.D0/2.D0*aINV**2*bb1*hm2**2*tau - 4.D0*aINV**3*bb2*tau
     &     + aINV**3*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1*tau + 4.D0*
     &    aINV**3*bb1*bb2*qm**2 + aINV**3*bb1*bb2*hm2**2 + 3.D0*aINV**3
     &    *bb1*bb2*hm2**2*tau - aINV**3*bb1*bb2*hm1**2*tau + aINV**3*
     &    bb1**2*hm1**2*tau + 2.D0*aINV**4*bb2**3*hm2**2*tau + 24.D0*
     &    aINV**4*bb1*bb2 + 2.D0*aINV**4*bb1*bb2**2*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 6.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**5*
     &    bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**5*bb1**3*bb2*hm1**2 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q**2 * ( 2.D0*aINV**3*bb1*bb2*
     &    tau + 4.D0*aINV**4*bb1*bb2**2*tau - 4.D0*aINV**4*bb1**2*bb2*
     &    tau - 8.D0*aINV**5*bb1**2*bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1bW5_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W5bub1b
        
        return
        end

C---------------psi2-chiC2: bub2 --------------------------------
      
C------------  chiC2: matrix element bub2 W1  -----------------
      
	double precision function Fbub2W1_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub2W1_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub2W1_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W1_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub2W1_psi2schic2=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W1_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub2W1_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)
                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub2 =
     &  + ss2 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*
     &    bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 
     &    16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q * ( 32.D0*aINV**6*bb1**3*bb2**3
     &     + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm1**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm1**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub2 = W2bub2 + ss2*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb1*bb2*qm**2 + 4.
     &    D0*aINV**3*bb1*bb2*hm1**2 + 16.D0*aINV**3*bb1**2*qm**2 + 4.D0
     &    *aINV**3*bb1**2*hm1**2 + 40.D0*aINV**4*bb1*bb2 - 4.D0*aINV**4
     &    *bb1*bb2**3*hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm1**2*hm2**2
     &     + 40.D0*aINV**4*bb1**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2*
     &    qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2*qm**2 - 4.D0*aINV**4*bb1**3*bb2*
     &    hm1**2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 - 
     &    aINV**4*bb1**3*bb2*hm1**4 - 4.D0*aINV**4*bb1**4*hm1**2*qm**2
     &     - aINV**4*bb1**4*hm1**4 - 32.D0*aINV**5*bb1*bb2**3*hm2**2 - 
     &    96.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 64.D0*aINV**5*bb1**3*bb2
     &    *hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 - 32.D0*aINV**5*
     &    bb1**4*hm1**2 + 4.D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 + 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2 - 
     &    64.D0*aINV**5*bb1**2*bb2**2 - 64.D0*aINV**5*bb1**3*bb2 + 16.D0
     &    *aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q**2 * ( 16.D0*aINV**6*bb1**3*
     &    bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub2 =
     &  + ss2 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2 * ( 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2*p2q * (  - 16.D0*aINV**5*bb1**2*
     &    bb2**2 )

      W4bub2 =
     &  + ss2 * ( 8.D0*aINV**3*bb1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * (  - 40.D0*aINV**4*bb1**2 + 8.D0*
     &    aINV**5*bb1**2*bb2**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 + 8.D0*aINV**5*bb1**4*hm1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * ( 16.D0*aINV**5*bb1**3*bb2 )

      W5bub2 =
     &  + ss2 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm1**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub2 = W5bub2 + ss2*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 6.D0*aINV**2*qm**2 - 3.D0/2.D
     &    0*aINV**2*hm1**2 - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*
     &    qm**2 + 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**3
     &    *bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm1**2*hm2**2 + 2.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**4
     &     + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*bb2*hm2**2
     &     + 12.D0*aINV**4*bb1**2*hm1**2 - 2.D0*aINV**5*bb2**4*hm2**4
     &     - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5*bb1**2*
     &    bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D
     &    0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5*bb1**4*
     &    hm1**4 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q * ( 4.D0*aINV**3*bb1*bb2*qm**2
     &     + aINV**3*bb1*bb2*hm1**2 + 24.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub2W1_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W1bub2
        
        return
        end
      
C------------  chiC2: matrix element bub2 W2  -----------------
      
	double precision function Fbub2W2_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub2W2_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub2W2_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W2_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub2W2_psi2schic2=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W2_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub2W2_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub2 =
     &  + ss2 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*
     &    bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 
     &    16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q * ( 32.D0*aINV**6*bb1**3*bb2**3
     &     + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm1**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm1**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub2 = W2bub2 + ss2*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb1*bb2*qm**2 + 4.
     &    D0*aINV**3*bb1*bb2*hm1**2 + 16.D0*aINV**3*bb1**2*qm**2 + 4.D0
     &    *aINV**3*bb1**2*hm1**2 + 40.D0*aINV**4*bb1*bb2 - 4.D0*aINV**4
     &    *bb1*bb2**3*hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm1**2*hm2**2
     &     + 40.D0*aINV**4*bb1**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2*
     &    qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2*qm**2 - 4.D0*aINV**4*bb1**3*bb2*
     &    hm1**2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 - 
     &    aINV**4*bb1**3*bb2*hm1**4 - 4.D0*aINV**4*bb1**4*hm1**2*qm**2
     &     - aINV**4*bb1**4*hm1**4 - 32.D0*aINV**5*bb1*bb2**3*hm2**2 - 
     &    96.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 64.D0*aINV**5*bb1**3*bb2
     &    *hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 - 32.D0*aINV**5*
     &    bb1**4*hm1**2 + 4.D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 + 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2 - 
     &    64.D0*aINV**5*bb1**2*bb2**2 - 64.D0*aINV**5*bb1**3*bb2 + 16.D0
     &    *aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q**2 * ( 16.D0*aINV**6*bb1**3*
     &    bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub2 =
     &  + ss2 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2 * ( 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2*p2q * (  - 16.D0*aINV**5*bb1**2*
     &    bb2**2 )

      W4bub2 =
     &  + ss2 * ( 8.D0*aINV**3*bb1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * (  - 40.D0*aINV**4*bb1**2 + 8.D0*
     &    aINV**5*bb1**2*bb2**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 + 8.D0*aINV**5*bb1**4*hm1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * ( 16.D0*aINV**5*bb1**3*bb2 )

      W5bub2 =
     &  + ss2 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm1**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub2 = W5bub2 + ss2*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 6.D0*aINV**2*qm**2 - 3.D0/2.D
     &    0*aINV**2*hm1**2 - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*
     &    qm**2 + 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**3
     &    *bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm1**2*hm2**2 + 2.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**4
     &     + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*bb2*hm2**2
     &     + 12.D0*aINV**4*bb1**2*hm1**2 - 2.D0*aINV**5*bb2**4*hm2**4
     &     - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5*bb1**2*
     &    bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D
     &    0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5*bb1**4*
     &    hm1**4 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q * ( 4.D0*aINV**3*bb1*bb2*qm**2
     &     + aINV**3*bb1*bb2*hm1**2 + 24.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub2W2_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W2bub2
        
        return
        end
      
C------------  chiC2: matrix element bub2 W3  -----------------
      
	double precision function Fbub2W3_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub2W3_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub2W3_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W3_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub2W3_psi2schic2=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W3_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub2W3_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub2 =
     &  + ss2 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*
     &    bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 
     &    16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q * ( 32.D0*aINV**6*bb1**3*bb2**3
     &     + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm1**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm1**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub2 = W2bub2 + ss2*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb1*bb2*qm**2 + 4.
     &    D0*aINV**3*bb1*bb2*hm1**2 + 16.D0*aINV**3*bb1**2*qm**2 + 4.D0
     &    *aINV**3*bb1**2*hm1**2 + 40.D0*aINV**4*bb1*bb2 - 4.D0*aINV**4
     &    *bb1*bb2**3*hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm1**2*hm2**2
     &     + 40.D0*aINV**4*bb1**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2*
     &    qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2*qm**2 - 4.D0*aINV**4*bb1**3*bb2*
     &    hm1**2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 - 
     &    aINV**4*bb1**3*bb2*hm1**4 - 4.D0*aINV**4*bb1**4*hm1**2*qm**2
     &     - aINV**4*bb1**4*hm1**4 - 32.D0*aINV**5*bb1*bb2**3*hm2**2 - 
     &    96.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 64.D0*aINV**5*bb1**3*bb2
     &    *hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 - 32.D0*aINV**5*
     &    bb1**4*hm1**2 + 4.D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 + 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2 - 
     &    64.D0*aINV**5*bb1**2*bb2**2 - 64.D0*aINV**5*bb1**3*bb2 + 16.D0
     &    *aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q**2 * ( 16.D0*aINV**6*bb1**3*
     &    bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub2 =
     &  + ss2 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2 * ( 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2*p2q * (  - 16.D0*aINV**5*bb1**2*
     &    bb2**2 )

      W4bub2 =
     &  + ss2 * ( 8.D0*aINV**3*bb1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * (  - 40.D0*aINV**4*bb1**2 + 8.D0*
     &    aINV**5*bb1**2*bb2**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 + 8.D0*aINV**5*bb1**4*hm1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * ( 16.D0*aINV**5*bb1**3*bb2 )

      W5bub2 =
     &  + ss2 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm1**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub2 = W5bub2 + ss2*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 6.D0*aINV**2*qm**2 - 3.D0/2.D
     &    0*aINV**2*hm1**2 - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*
     &    qm**2 + 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**3
     &    *bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm1**2*hm2**2 + 2.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**4
     &     + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*bb2*hm2**2
     &     + 12.D0*aINV**4*bb1**2*hm1**2 - 2.D0*aINV**5*bb2**4*hm2**4
     &     - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5*bb1**2*
     &    bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D
     &    0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5*bb1**4*
     &    hm1**4 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q * ( 4.D0*aINV**3*bb1*bb2*qm**2
     &     + aINV**3*bb1*bb2*hm1**2 + 24.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub2W3_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W3bub2
        
        return
        end
      
C------------  chiC2: matrix element bub2 W4  -----------------
      
	double precision function Fbub2W4_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub2W4_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub2W4_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W4_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub2W4_psi2schic2=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W4_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub2W4_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       
     
        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub2 =
     &  + ss2 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*
     &    bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 
     &    16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q * ( 32.D0*aINV**6*bb1**3*bb2**3
     &     + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm1**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm1**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub2 = W2bub2 + ss2*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb1*bb2*qm**2 + 4.
     &    D0*aINV**3*bb1*bb2*hm1**2 + 16.D0*aINV**3*bb1**2*qm**2 + 4.D0
     &    *aINV**3*bb1**2*hm1**2 + 40.D0*aINV**4*bb1*bb2 - 4.D0*aINV**4
     &    *bb1*bb2**3*hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm1**2*hm2**2
     &     + 40.D0*aINV**4*bb1**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2*
     &    qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2*qm**2 - 4.D0*aINV**4*bb1**3*bb2*
     &    hm1**2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 - 
     &    aINV**4*bb1**3*bb2*hm1**4 - 4.D0*aINV**4*bb1**4*hm1**2*qm**2
     &     - aINV**4*bb1**4*hm1**4 - 32.D0*aINV**5*bb1*bb2**3*hm2**2 - 
     &    96.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 64.D0*aINV**5*bb1**3*bb2
     &    *hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 - 32.D0*aINV**5*
     &    bb1**4*hm1**2 + 4.D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 + 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2 - 
     &    64.D0*aINV**5*bb1**2*bb2**2 - 64.D0*aINV**5*bb1**3*bb2 + 16.D0
     &    *aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q**2 * ( 16.D0*aINV**6*bb1**3*
     &    bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub2 =
     &  + ss2 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2 * ( 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2*p2q * (  - 16.D0*aINV**5*bb1**2*
     &    bb2**2 )

      W4bub2 =
     &  + ss2 * ( 8.D0*aINV**3*bb1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * (  - 40.D0*aINV**4*bb1**2 + 8.D0*
     &    aINV**5*bb1**2*bb2**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 + 8.D0*aINV**5*bb1**4*hm1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * ( 16.D0*aINV**5*bb1**3*bb2 )

      W5bub2 =
     &  + ss2 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm1**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub2 = W5bub2 + ss2*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 6.D0*aINV**2*qm**2 - 3.D0/2.D
     &    0*aINV**2*hm1**2 - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*
     &    qm**2 + 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**3
     &    *bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm1**2*hm2**2 + 2.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**4
     &     + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*bb2*hm2**2
     &     + 12.D0*aINV**4*bb1**2*hm1**2 - 2.D0*aINV**5*bb2**4*hm2**4
     &     - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5*bb1**2*
     &    bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D
     &    0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5*bb1**4*
     &    hm1**4 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q * ( 4.D0*aINV**3*bb1*bb2*qm**2
     &     + aINV**3*bb1*bb2*hm1**2 + 24.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub2W4_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W4bub2
        
        return
        end
      
C------------  chiC2: matrix element bub2 W5  -----------------
      
	double precision function Fbub2W5_psi2schic2(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub2W5_psi2schic2/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub2W5_psi2schic2

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W5_psi2schic2,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub2W5_psi2schic2=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W5_psi2schic2(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub2W5_psi2schic2/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       
        
        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub2 =
     &  + ss2 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*
     &    bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 
     &    16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q * ( 32.D0*aINV**6*bb1**3*bb2**3
     &     + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm1**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm1**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub2 = W2bub2 + ss2*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb1*bb2*qm**2 + 4.
     &    D0*aINV**3*bb1*bb2*hm1**2 + 16.D0*aINV**3*bb1**2*qm**2 + 4.D0
     &    *aINV**3*bb1**2*hm1**2 + 40.D0*aINV**4*bb1*bb2 - 4.D0*aINV**4
     &    *bb1*bb2**3*hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm1**2*hm2**2
     &     + 40.D0*aINV**4*bb1**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2*
     &    qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2*qm**2 - 4.D0*aINV**4*bb1**3*bb2*
     &    hm1**2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 - 
     &    aINV**4*bb1**3*bb2*hm1**4 - 4.D0*aINV**4*bb1**4*hm1**2*qm**2
     &     - aINV**4*bb1**4*hm1**4 - 32.D0*aINV**5*bb1*bb2**3*hm2**2 - 
     &    96.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 64.D0*aINV**5*bb1**3*bb2
     &    *hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 - 32.D0*aINV**5*
     &    bb1**4*hm1**2 + 4.D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 + 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2 - 
     &    64.D0*aINV**5*bb1**2*bb2**2 - 64.D0*aINV**5*bb1**3*bb2 + 16.D0
     &    *aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q**2 * ( 16.D0*aINV**6*bb1**3*
     &    bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub2 =
     &  + ss2 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2 * ( 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2*p2q * (  - 16.D0*aINV**5*bb1**2*
     &    bb2**2 )

      W4bub2 =
     &  + ss2 * ( 8.D0*aINV**3*bb1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * (  - 40.D0*aINV**4*bb1**2 + 8.D0*
     &    aINV**5*bb1**2*bb2**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 + 8.D0*aINV**5*bb1**4*hm1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * ( 16.D0*aINV**5*bb1**3*bb2 )

      W5bub2 =
     &  + ss2 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm1**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub2 = W5bub2 + ss2*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 6.D0*aINV**2*qm**2 - 3.D0/2.D
     &    0*aINV**2*hm1**2 - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*
     &    qm**2 + 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**3
     &    *bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm1**2*hm2**2 + 2.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**4
     &     + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*bb2*hm2**2
     &     + 12.D0*aINV**4*bb1**2*hm1**2 - 2.D0*aINV**5*bb2**4*hm2**4
     &     - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5*bb1**2*
     &    bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D
     &    0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5*bb1**4*
     &    hm1**4 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q * ( 4.D0*aINV**3*bb1*bb2*qm**2
     &     + aINV**3*bb1*bb2*hm1**2 + 24.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub2W5_psi2schic2 = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W5bub2
        
        return
        end
















































******************************************************
C             Normalization      
*****************************************************
      
C--------  PP-Normalization  ------------------
      
	double precision function FPP_psi2schic2_rho(hm,ss,qm1,qm2)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
	common/CFPP_psi2schic2_rho/hhm,sss,qqm1,qqm2
C
        external FFPP_psi2schic2_rho
       
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFPP_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FPP_psi2schic2_rho=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFPP_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFPP_psi2schic2_rho/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1
     
        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


      
C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFPP_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *PP

        return
        end

C------------  VV-normalization  ----------------------------------
      
	double precision function FVV_psi2schic2_rho(hm,ss,qm1,qm2)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
	common/CFVV_psi2schic2_rho/hhm,sss,qqm1,qqm2
C
        external FFVV_psi2schic2_rho
       
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFVV_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FVV_psi2schic2_rho=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFVV_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFVV_psi2schic2_rho/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1
     
        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


      
C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFVV_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *VV

        return
        end

C------------  SS-normalization  ----------------------------------
      
	double precision function FSS_psi2schic2_rho(hm,ss,qm1,qm2)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
	common/CFSS_psi2schic2_rho/hhm,sss,qqm1,qqm2
C
        external FFSS_psi2schic2_rho
       
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFSS_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FSS_psi2schic2_rho=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFSS_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFSS_psi2schic2_rho/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1
     
        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


      
C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFSS_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Scalar

        return
        end
      
C------------AA-normalization  ----------------------------------
      
	double precision function FAA_psi2schic2_rho(hm,ss,qm1,qm2)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
	common/CFAA_psi2schic2_rho/hhm,sss,qqm1,qqm2
C
        external FFAA_psi2schic2_rho
       
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFAA_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FAA_psi2schic2_rho=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFAA_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFAA_psi2schic2_rho/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1
     
        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )


      
C-------------all together --------------------------

        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFAA_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Axial

        return
        end

C------------ TT-normalization  ----------------------------------
      
	double precision function FTT_psi2schic2_rho(hm,ss,qm1,qm2)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

        common/accuracy/eps
	common/CFTT_psi2schic2_rho/hhm,sss,qqm1,qqm2
C
        external FFTT_psi2schic2_rho
       
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm1=qm1
        qqm2=qm2

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFTT_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FTT_psi2schic2_rho=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFTT_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFTT_psi2schic2_rho/hm,ss,qm1,qm2
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

          x1=x(2)

         alp1=1.d0-x1
         alp2=x1
     
        w1=qm1/(qm1+qm2)
        w2=qm2/(qm1+qm2)


      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + 2.D0*ss
      
      aINV = 1.d0/aa

      bb =
     &  + t * (  - alp2*w2 + alp1*w1 )

      z =
     &  + t * (  - alp2*qm2**2 - alp1*qm1**2 )
      z = z + hm**2*t * ( alp2*w2**2 + alp1*w1**2 )
      z = z + aINV*hm**2*t**2 * (  - alp2**2*w2**2 + 2.D0*alp1*alp2*w1*
     &    w2 - alp1**2*w1**2 )



      Scalar =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Scalar = Scalar + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Scalar = Scalar + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 
     &    2.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 
     &    4.D0*bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Scalar = Scalar + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*
     &    bb*w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1
     &     )
      Scalar = Scalar + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1
     &     )
      Scalar = Scalar + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 
     &    2.D0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*
     &    w1**2*alp1 )
      Scalar = Scalar + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0
     &    *bb**3*w1*alp1 )

      PP =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      PP = PP + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      PP = PP + aINV*t * ( 8.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 8.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      PP = PP + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      PP = PP + aINV**2*t * ( 6.D0*bb*w2*alp2 - 6.D0*bb*w1*alp1 )
      PP = PP + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      PP = PP + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      VV =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 + 4.D0*qm1*qm2*w2**2*alp2 + 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      VV = VV + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*alp1 )
      VV = VV + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D0*w1*
     &    w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 + 4.D0*bb*
     &    qm1*qm2*w2*alp2 - 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*qm1**2*w1
     &    *alp1 )
      VV = VV + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*w1*
     &    w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      VV = VV + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      VV = VV + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D0*
     &    bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2*
     &    alp1 )
      VV = VV + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*bb**3*
     &    w1*alp1 )

      Axial =
     &  + t * ( 2.D0*qm2**2*w1*w2*alp2 - 4.D0*qm1*qm2*w2**2*alp2 - 4.D0
     &    *qm1*qm2*w1**2*alp1 + 2.D0*qm1**2*w1*w2*alp1 )
      Axial = Axial + t*hm**2 * ( 2.D0*w1*w2**3*alp2 + 2.D0*w1**3*w2*
     &    alp1 )
      Axial = Axial + aINV*t * ( 4.D0*w2**2*alp2 + 2.D0*w1*w2*alp2 + 2.D
     &    0*w1*w2*alp1 + 4.D0*w1**2*alp1 - 2.D0*bb*qm2**2*w2*alp2 - 4.D0
     &    *bb*qm1*qm2*w2*alp2 + 4.D0*bb*qm1*qm2*w1*alp1 + 2.D0*bb*
     &    qm1**2*w1*alp1 )
      Axial = Axial + aINV*t*hm**2 * (  - 2.D0*bb*w2**3*alp2 + 4.D0*bb*
     &    w1*w2**2*alp2 - 4.D0*bb*w1**2*w2*alp1 + 2.D0*bb*w1**3*alp1 )
      Axial = Axial + aINV**2*t * ( 2.D0*bb*w2*alp2 - 2.D0*bb*w1*alp1 )
      Axial = Axial + aINV**2*t*hm**2 * (  - 4.D0*bb**2*w2**2*alp2 + 2.D
     &    0*bb**2*w1*w2*alp2 + 2.D0*bb**2*w1*w2*alp1 - 4.D0*bb**2*w1**2
     &    *alp1 )
      Axial = Axial + aINV**3*t*hm**2 * (  - 2.D0*bb**3*w2*alp2 + 2.D0*
     &    bb**3*w1*alp1 )

      Tensor =
     &  + aINV*t * ( 4.D0*qm2**2*w1*w2*alp2 + 8.D0*qm1*qm2*w2**2*alp2
     &     + 8.D0*qm1*qm2*w1**2*alp1 + 4.D0*qm1**2*w1*w2*alp1 )
      Tensor = Tensor + aINV*t*hm**2 * ( 4.D0*w1*w2**3*alp2 + 4.D0*
     &    w1**3*w2*alp1 )
      Tensor = Tensor + aINV**2*t * ( 8.D0*w2**2*alp2 + 8.D0*w1*w2*alp2
     &     + 8.D0*w1*w2*alp1 + 8.D0*w1**2*alp1 - 4.D0*bb*qm2**2*w2*alp2
     &     + 8.D0*bb*qm1*qm2*w2*alp2 - 8.D0*bb*qm1*qm2*w1*alp1 + 4.D0*
     &    bb*qm1**2*w1*alp1 )
      Tensor = Tensor + aINV**2*t*hm**2 * (  - 4.D0*bb*w2**3*alp2 + 8.D0
     &    *bb*w1*w2**2*alp2 - 8.D0*bb*w1**2*w2*alp1 + 4.D0*bb*w1**3*
     &    alp1 )
      Tensor = Tensor + aINV**3*t*hm**2 * (  - 8.D0*bb**2*w2**2*alp2 + 
     &    4.D0*bb**2*w1*w2*alp2 + 4.D0*bb**2*w1*w2*alp1 - 8.D0*bb**2*
     &    w1**2*alp1 )
      Tensor = Tensor + aINV**4*t*hm**2 * (  - 4.D0*bb**3*w2*alp2 + 4.D0
     &    *bb**3*w1*alp1 )



        floop1 = 1.d0/(4.d0*pi)**2
        Dsimplex2 = t

        FFTT_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &           *Tensor

        return
        end

C--psi(2S) normalization from file charm_12.f at /Ytt/HQL/ort/ ----
      
C-------------------norm: V1V1  --------------------------

	double precision function FV1V1_psi2schic2_rho(hm,ss,qm,CC1)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps         
	common/CFV1V1_psi2schic2_rho/hhm,sss,qqm,CCC1
C
        external FFV1V1_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ss
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFV1V1_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
	FV1V1_psi2schic2_rho=finval
C
        
       return
      deallocate(wrkstr)
        end
C-----------------------------------------------------------

        double precision function FFV1V1_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFV1V1_psi2schic2_rho/hm,ss,qm,CC1
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
        alp2=x1

C-----------   exponential  -----      


      aa =
     &  + t * ( 1.D0 )
      aa = aa + 2.D0*ss
    
      aINV = 1.d0/aa

      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )
      
C------numerator --------------

      V1V1 =
     &  + CC1 * (  - 12.D0*aINV*qm**2*alp2*t*ss - aINV*hm**2*alp2*t*ss
     &     - 18.D0*aINV**2*alp2*t*ss + 12.D0*aINV**2*bb*qm**2*alp2*t*ss
     &     + 3.D0*aINV**2*bb*hm**2*alp2*t*ss + 6.D0*aINV**2*bb**2*hm**2
     &    *qm**2*alp2*t*ss + 1.D0/2.D0*aINV**2*bb**2*hm**4*alp2*t*ss + 
     &    16.D0*aINV**3*bb*alp2*t*ss + 14.D0*aINV**3*bb**2*hm**2*alp2*t
     &    *ss - 4.D0*aINV**3*bb**3*hm**2*qm**2*alp2*t*ss - aINV**3*
     &    bb**3*hm**4*alp2*t*ss - 24.D0*aINV**4*bb**3*hm**2*alp2*t*ss
     &     - 2.D0*aINV**4*bb**4*hm**4*alp2*t*ss + 4.D0*aINV**5*bb**5*
     &    hm**4*alp2*t*ss )
      V1V1 = V1V1 + CC1**2 * ( 18.D0*aINV**2*qm**2*alp2*t*ss**2 + 3.D0/
     &    2.D0*aINV**2*hm**2*alp2*t*ss**2 + 36.D0*aINV**3*alp2*t*ss**2
     &     - 24.D0*aINV**3*bb*qm**2*alp2*t*ss**2 - 6.D0*aINV**3*bb*
     &    hm**2*alp2*t*ss**2 - 18.D0*aINV**3*bb**2*hm**2*qm**2*alp2*t*
     &    ss**2 - 3.D0/2.D0*aINV**3*bb**2*hm**4*alp2*t*ss**2 - 40.D0*
     &    aINV**4*bb*alp2*t*ss**2 - 44.D0*aINV**4*bb**2*hm**2*alp2*t*
     &    ss**2 + 16.D0*aINV**4*bb**3*hm**2*qm**2*alp2*t*ss**2 + 4.D0*
     &    aINV**4*bb**3*hm**4*alp2*t*ss**2 + 3.D0*aINV**4*bb**4*hm**4*
     &    qm**2*alp2*t*ss**2 + 1.D0/4.D0*aINV**4*bb**4*hm**6*alp2*t*
     &    ss**2 + 80.D0*aINV**5*bb**3*hm**2*alp2*t*ss**2 + 13.D0*
     &    aINV**5*bb**4*hm**4*alp2*t*ss**2 - 2.D0*aINV**5*bb**5*hm**4*
     &    qm**2*alp2*t*ss**2 - 1.D0/2.D0*aINV**5*bb**5*hm**6*alp2*t*
     &    ss**2 - 26.D0*aINV**6*bb**5*hm**4*alp2*t*ss**2 - aINV**6*
     &    bb**6*hm**6*alp2*t*ss**2 + 2.D0*aINV**7*bb**7*hm**6*alp2*t*
     &    ss**2 )
      V1V1 = V1V1 + 3.D0*qm**2*alp2*t + 1.D0/4.D0*hm**2*alp2*t + 3.D0*
     &    aINV*alp2*t - 2.D0*aINV*bb*qm**2*alp2*t - 1.D0/2.D0*aINV*bb*
     &    hm**2*alp2*t - 2.D0*aINV**2*bb*alp2*t - aINV**2*bb**2*hm**2*
     &    alp2*t + 2.D0*aINV**3*bb**3*hm**2*alp2*t

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFV1V1_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *V1V1   

         return
         end
      
C------------  VtoV  ----------------------------------

	double precision function FVtoV_psi2schic2_rho(hm,ssum,qm)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps         
	common/CFVtoV_psi2schic2_rho/hhm,sss,qqm
C
        external FFVtoV_psi2schic2_rho
C
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ssum
        qqm=qm

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFVtoV_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
	FVtoV_psi2schic2_rho=finval
C
        
       return
      deallocate(wrkstr)
        end
C
C-------------------------------------------------------
C
        double precision function FFVtoV_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFVtoV_psi2schic2_rho/hm,ssum,qm
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
C        alp1=1.d0-x1
        alp2=x1
C     
        w=1.d0/2.d0

C-----------   exponential  -----      

      aa =
     &  + t * ( 1.D0 )
      aa = aa + ssum

      aINV = 1.d0/aa
  
      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )
    
C------numerator --------------

      VtoV =
     &  + hm**2 * ( 1.D0 )
      VtoV = VtoV + aINV * ( 4.D0 )
      VtoV = VtoV + aINV**2*hm**2 * (  - 4.D0*bb**2 )
      VtoV = VtoV + 4.D0*qm**2

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFVtoV_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *VtoV  

        return
        end

C------------  VtoVk2  ----------------------------------

	double precision function FVtoVk2_psi2schic2_rho(hm,ssum,qm)
C
	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)
C
        common/accuracy/eps         
	common/CFVtoVk2_psi2schic2_rho/hhm,sss,qqm
C
        external FFVtoVk2_psi2schic2_rho
C
        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2
C
        hhm=hm
        sss=ssum
        qqm=qm

        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue
C
        call d01fcf(ndim,a,b,minpts,maxpts,FFVtoVk2_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)
C
	FVtoVk2_psi2schic2_rho=finval
C
        
       return
      deallocate(wrkstr)
        end
C
C-------------------------------------------------------
C
        double precision function FFVtoVk2_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFVtoVk2_psi2schic2_rho/hm,ssum,qm
        common/confinement/conf,xlam, pi

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2
           xmeasure = 1.d0/xlam**2

           endif

        x1=x(2)
C
C        alp1=1.d0-x1
        alp2=x1
C     
        w=1.d0/2.d0

C-----------   exponential  -----      
      aa =
     &  + t * ( 1.D0 )
      aa = aa + ssum

      aINV = 1.d0/aa
  
      bb =
     &  + t * (  - 1.D0/2.D0 + alp2 )

      z =
     &  + t * (  - qm**2 )
      z = z + hm**2*t * ( 1.D0/4.D0 )
      z = z + aINV*hm**2*t**2 * (  - 1.D0/4.D0 + alp2 - alp2**2 )
    
C------numerator --------------

      VtoVk2 =
     &  + aINV * (  - 8.D0*qm**2 )
      VtoVk2 = VtoVk2 + aINV*hm**2 * (  - 2.D0 )
      VtoVk2 = VtoVk2 + aINV**2 * (  - 12.D0 )
      VtoVk2 = VtoVk2 + aINV**2*hm**2 * ( 4.D0*bb**2*qm**2 )
      VtoVk2 = VtoVk2 + aINV**2*hm**4 * ( bb**2 )
      VtoVk2 = VtoVk2 + aINV**3*hm**2 * ( 20.D0*bb**2 )
      VtoVk2 = VtoVk2 + aINV**4*hm**4 * (  - 4.D0*bb**4 )

C-------------all together --------------------------

       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t

       FFVtoVk2_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *VtoVk2  

        return
        end
      
C------------ psi2-chiC2: matrix element loop W1  -------------------------
      
	double precision function FloopW1_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1) 

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFloopW1_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFloopW1_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW1_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FloopW1_psi2schic2_rho=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW1_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFloopW1_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        x1=x(1)
        x2=x(2)
 
        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

         endif
        
           p2q = (hm1**2-hm2**2)/2.d0        

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

       bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )



      W1loop =
     &  + ss1*CC1 * ( 32.D0*aINV**3*bb1*bb2 + 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2 - 32.D0*aINV**4*bb1*bb2**2 - 208.D0*aINV**4*bb1**2*bb2
     &     - 32.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*hm1**2 - 40.D0*aINV**4*bb1**3*bb2*hm1**2 + 192.D0*
     &    aINV**5*bb1**2*bb2**2 + 64.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    192.D0*aINV**5*bb1**3*bb2 + 96.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2 + 32.D0*aINV**5*bb1**3*bb2**2*hm1**2 + 64.D0*aINV**5*
     &    bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**2*bb2**4*hm2**2 - 96.D0
     &    *aINV**6*bb1**3*bb2**3*hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm1**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 32.D0*aINV**4*bb1**2*bb2**2
     &     + 32.D0*aINV**5*bb1**2*bb2**3 + 96.D0*aINV**5*bb1**3*bb2**2
     &     - 64.D0*aINV**6*bb1**3*bb2**3 - 64.D0*aINV**6*bb1**4*bb2**2
     &     )
      W1loop = W1loop + 32.D0*aINV**3*bb1**2*bb2 - 32.D0*aINV**4*bb1**2
     &    *bb2**2 - 32.D0*aINV**4*bb1**3*bb2

      W2loop =
     &  + p2q * ( 16.D0*aINV**3*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2
     &     - 8.D0*aINV**4*bb1**3*bb2 )
      W2loop = W2loop + ss1*CC1 * (  - 4.D0*aINV*qm**2 - 2.D0*aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 + 2.D0*aINV**2*bb2*qm**2 - 2.D0*
     &    aINV**2*bb2*hm2**2 + 28.D0*aINV**2*bb1*qm**2 - 6.D0*aINV**2*
     &    bb1*hm1**2 + 8.D0*aINV**2*bb1*bb2*hm2**2*qm**2 + aINV**2*bb1*
     &    bb2*hm1**2*qm**2 - aINV**2*bb1*bb2*hm1**2*hm2**2 + 9.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 - 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 40.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*bb1
     &    *bb2**2*hm2**2*qm**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**4 + 2.D0*
     &    aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 16.D0*aINV**3*bb1**2*qm**2
     &     + 36.D0*aINV**3*bb1**2*hm1**2 - 20.D0*aINV**3*bb1**2*bb2*
     &    hm2**2*qm**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2 + 12.D0*
     &    aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 12.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2 + 6.D0*aINV**3*bb1**3*hm1**4 - 2.D0*aINV**4*
     &    bb2**3*hm2**2 - 60.D0*aINV**4*bb1*bb2**2*hm2**2 + 4.D0*
     &    aINV**4*bb1*bb2**3*hm2**2*qm**2 )
      W2loop = W2loop + ss1*CC1 * (  - 12.D0*aINV**4*bb1*bb2**3*hm2**4
     &     - aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 108.D0*aINV**4*bb1**2*
     &    bb2*hm2**2 - 6.D0*aINV**4*bb1**2*bb2*hm1**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*qm**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**4 - 15.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 56.D0*
     &    aINV**4*bb1**3*hm1**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2*qm**2
     &     + 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 38.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - aINV**4*bb1**3*bb2*hm1**4 + 4.D0*
     &    aINV**4*bb1**4*hm1**2*qm**2 - 13.D0*aINV**4*bb1**4*hm1**4 + 
     &    24.D0*aINV**5*bb1*bb2**3*hm2**2 + 12.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 72.D0*aINV**5*bb1**2*bb2**2*hm2**2 + 44.D0*aINV**5*
     &    bb1**2*bb2**3*hm2**4 + 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*
     &    hm2**2 + 48.D0*aINV**5*bb1**3*bb2*hm2**2 + 24.D0*aINV**5*
     &    bb1**3*bb2*hm1**2 + 40.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 32.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 24.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W2loop = W2loop + ss1*CC1 * ( 44.D0*aINV**5*bb1**4*bb2*hm1**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**4*bb2*hm1**4 + 12.D0*aINV**5*
     &    bb1**5*hm1**4 - 4.D0*aINV**6*bb1*bb2**5*hm2**4 - 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 - 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 - 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 - 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 - 4.D0*aINV**6*bb1**6*hm1**4 )
      W2loop = W2loop + ss1*CC1*p2q * ( 8.D0*aINV**2*bb1*bb2*qm**2 + 24.
     &    D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1*bb2**2*qm**2 + 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 - 20.D0*aINV**3*bb1**2*bb2*qm**2 + 
     &    8.D0*aINV**3*bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb1*bb2**2 - 8.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 - 108.D0*aINV**4*bb1**2*bb2 + 8.D0
     &    *aINV**4*bb1**2*bb2**2*qm**2 - 40.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 8.D0*aINV**4*
     &    bb1**3*bb2*qm**2 - 34.D0*aINV**4*bb1**3*bb2*hm1**2 + 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 + 48.D0*aINV**5*bb1**2*bb2**2 + 52.D
     &    0*aINV**5*bb1**2*bb2**3*hm2**2 + 48.D0*aINV**5*bb1**3*bb2 + 
     &    80.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm1**2 + 44.D0*aINV**5*bb1**4*bb2*hm1**2 - 16.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**2 - 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2loop = W2loop + ss1*CC1*p2q**2 * (  - 16.D0*aINV**4*bb1**2*
     &    bb2**2 + 8.D0*aINV**5*bb1**2*bb2**3 + 40.D0*aINV**5*bb1**3*
     &    bb2**2 - 16.D0*aINV**6*bb1**3*bb2**3 - 16.D0*aINV**6*bb1**4*
     &    bb2**2 )
      W2loop = W2loop - 8.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 + 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 + 4.D0*
     &    aINV**2*bb1**2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2*bb2*hm2**2
     &     + 8.D0*aINV**3*bb1**3*hm1**2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2 - 4.D0*
     &    aINV**4*bb1**4*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop + ss1*CC1 * (  - 2.D0*aINV*qm**2 - aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 - 2.D0*aINV**2*bb2*qm**2 + 12.D0*
     &    aINV**2*bb1*qm**2 - 6.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - aINV**2*bb1*bb2*hm1**2*qm**2 + 4.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 + 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 - aINV**3*bb1*bb2**2
     &    *hm1**2*hm2**2 + 30.D0*aINV**3*bb1**2*hm1**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 4.D0*aINV**3*
     &    bb1**3*hm1**2*qm**2 + 5.D0*aINV**3*bb1**3*hm1**4 + 2.D0*
     &    aINV**4*bb2**3*hm2**2 + 20.D0*aINV**4*bb1*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2*qm**2 + 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**4 + aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 16.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 + 6.D0*aINV**4*bb1**2*bb2*hm1**2 - 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 )
      W3loop = W3loop + ss1*CC1 * ( 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 28.D0*aINV**4*bb1**3*hm1**2 - 4.D0*aINV**4*bb1**3*
     &    bb2*hm1**2*qm**2 - 12.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 
     &    aINV**4*bb1**3*bb2*hm1**4 - 8.D0*aINV**4*bb1**4*hm1**4 - 24.D0
     &    *aINV**5*bb1*bb2**3*hm2**2 - 8.D0*aINV**5*bb1*bb2**4*hm2**4
     &     - 48.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 16.D0*aINV**5*bb1**2*
     &    bb2**3*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*hm2**2 - 24.
     &    D0*aINV**5*bb1**3*bb2*hm1**2 - 12.D0*aINV**5*bb1**3*bb2**2*
     &    hm1**2*hm2**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**5*bb1**4*bb2*hm1**4 + 4.D0*aINV**5*bb1**5*hm1**4 + 4.D0
     &    *aINV**6*bb1*bb2**5*hm2**4 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 16.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*hm1**4 )
      W3loop = W3loop + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 8.D
     &    0*aINV**3*bb1*bb2 + 4.D0*aINV**3*bb1*bb2**2*qm**2 - 8.D0*
     &    aINV**3*bb1**2*bb2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 8.
     &    D0*aINV**4*bb1*bb2**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2*qm**2 + 2.D0
     &    *aINV**4*bb1**2*bb2**2*hm1**2 - 12.D0*aINV**4*bb1**3*bb2*
     &    hm1**2 - 4.D0*aINV**5*bb1*bb2**4*hm2**2 - 48.D0*aINV**5*
     &    bb1**2*bb2**2 - 24.D0*aINV**5*bb1**2*bb2**3*hm2**2 - 12.D0*
     &    aINV**5*bb1**3*bb2**2*hm1**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2
     &     + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 32.D0*aINV**6*bb1**3*
     &    bb2**3*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 )
      W3loop = W3loop + ss1*CC1*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**3 + 16.D0*aINV**6*bb1**3*bb2**3 )
      W3loop = W3loop - 4.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 - 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 4.D0*aINV**3*bb1**3*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1**3*bb2 )
      W4loop = W4loop + ss1*CC1 * ( 4.D0*aINV*qm**2 + 2.D0*aINV*bb1*
     &    hm1**2*qm**2 + 4.D0*aINV**2 + 4.D0*aINV**2*bb2*hm2**2 - 16.D0
     &    *aINV**2*bb1*qm**2 + 2.D0*aINV**2*bb1*hm1**2 - 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 + 2.D0*aINV**2*bb1*bb2*hm1**2*hm2**2 - 6.
     &    D0*aINV**2*bb1**2*hm1**2*qm**2 - 4.D0*aINV**3*bb2**2*hm2**2
     &     - 16.D0*aINV**3*bb1 - 40.D0*aINV**3*bb1*bb2*hm2**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2*qm**2 - 8.D0*aINV**3*bb1*bb2**2*
     &    hm2**4 - 2.D0*aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 32.D0*
     &    aINV**3*bb1**2*qm**2 + 8.D0*aINV**3*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1**2*bb2*hm2**2*qm**2 - 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2*hm2**2 + 2.D0*aINV**3*bb1**3*hm1**4 + 40.D0*aINV**4*
     &    bb1*bb2**2*hm2**2 + 16.D0*aINV**4*bb1*bb2**3*hm2**4 - 80.D0*
     &    aINV**4*bb1**2 - 24.D0*aINV**4*bb1**2*bb2*hm2**2 + 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 + 16.D0*aINV**4*bb1**2*
     &    bb2**2*hm2**4 + 6.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 64.
     &    D0*aINV**4*bb1**3*hm1**2 )
      W4loop = W4loop + ss1*CC1 * ( 16.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 8.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - 10.D0*aINV**4*bb1**4*hm1**4 - 8.D0*
     &    aINV**5*bb1*bb2**4*hm2**4 + 64.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 128.D0*aINV**5*
     &    bb1**3*bb2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 8.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    hm1**2 + 40.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 + 16.D0*
     &    aINV**5*bb1**5*hm1**4 - 8.D0*aINV**6*bb1**2*bb2**4*hm2**4 - 
     &    32.D0*aINV**6*bb1**3*bb2**3*hm2**4 - 32.D0*aINV**6*bb1**4*
     &    bb2**2*hm2**4 - 16.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 - 
     &    32.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 8.D0*aINV**6*bb1**6*
     &    hm1**4 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 8.D0*aINV**2*bb1*bb2*qm**2
     &     - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D
     &    0*aINV**3*bb1**2*bb2*qm**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2
     &     - 24.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**4*bb1**3*bb2*qm**2 - 12.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 128.D0
     &    *aINV**5*bb1**3*bb2 + 32.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 40.
     &    D0*aINV**5*bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W4loop = W4loop + ss1*CC1*p2q**2 * ( 16.D0*aINV**5*bb1**3*bb2**2
     &     - 32.D0*aINV**6*bb1**4*bb2**2 )
      W4loop = W4loop + 8.D0*aINV*bb1*qm**2 + 8.D0*aINV**2*bb1 + 8.D0*
     &    aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*bb1**2*qm**2 - 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2 + 8.D0*
     &    aINV**3*bb1**3*hm1**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 
     &    16.D0*aINV**4*bb1**3*bb2*hm2**2 - 8.D0*aINV**4*bb1**4*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb1 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop + ss1*CC1 * (  - aINV*hm1**2*qm**2 + 12.D0*
     &    aINV**2*qm**2 - 2.D0*aINV**2*hm2**2 - aINV**2*hm1**2 + 4.D0*
     &    aINV**2*bb2*hm2**2*qm**2 - aINV**2*bb2*hm1**2*hm2**2 + 4.D0*
     &    aINV**2*bb1*hm1**2*qm**2 - aINV**2*bb1*hm1**2*hm2**2 + 16.D0*
     &    aINV**3 + 24.D0*aINV**3*bb2*hm2**2 - 4.D0*aINV**3*bb2**2*
     &    hm2**2*qm**2 + 4.D0*aINV**3*bb2**2*hm2**4 + aINV**3*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**3*bb1*hm2**2 + 8.D0*aINV**3*bb1*
     &    hm1**2 - 8.D0*aINV**3*bb1*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1
     &    *bb2*hm2**4 + 6.D0*aINV**3*bb1*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 4.D0*aINV**3*bb1**2*hm1**2*
     &    hm2**2 + aINV**3*bb1**2*hm1**4 - 24.D0*aINV**4*bb2**2*hm2**2
     &     - 8.D0*aINV**4*bb2**3*hm2**4 - 48.D0*aINV**4*bb1*bb2*hm2**2
     &     - 20.D0*aINV**4*bb1*bb2**2*hm2**4 - 4.D0*aINV**4*bb1*bb2**2*
     &    hm1**2*hm2**2 - 24.D0*aINV**4*bb1**2*hm1**2 - 8.D0*aINV**4*
     &    bb1**2*bb2*hm2**4 - 16.D0*aINV**4*bb1**2*bb2*hm1**2*hm2**2 - 
     &    4.D0*aINV**4*bb1**3*hm1**2*hm2**2 )
      W5loop = W5loop + ss1*CC1 * (  - 4.D0*aINV**4*bb1**3*hm1**4 + 4.D0
     &    *aINV**5*bb2**4*hm2**4 + 16.D0*aINV**5*bb1*bb2**3*hm2**4 + 16.
     &    D0*aINV**5*bb1**2*bb2**2*hm2**4 + 8.D0*aINV**5*bb1**2*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**5*bb1**4*hm1**4 )
      W5loop = W5loop + ss1*CC1*p2q * (  - 2.D0*aINV**2 + 4.D0*aINV**2*
     &    bb2*qm**2 - aINV**2*bb1*hm1**2 + 8.D0*aINV**3*bb2 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 16.D0*aINV**3*bb1 - 8.D0*aINV**3*bb1*
     &    bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*
     &    bb2*hm1**2 + 4.D0*aINV**3*bb1**2*hm1**2 - 4.D0*aINV**4*bb2**3
     &    *hm2**2 - 48.D0*aINV**4*bb1*bb2 - 28.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 16.D0*aINV**4*bb1**2*bb2*hm2**2 - 12.D0*aINV**4*
     &    bb1**2*bb2*hm1**2 - 4.D0*aINV**4*bb1**3*hm1**2 + 16.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 + 32.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5loop = W5loop + ss1*CC1*p2q**2 * ( 4.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb1*bb2**2 - 8.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**5*
     &    bb1**2*bb2**2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm2**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1
 
       FFloopW1_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W1loop

        return
        end

C------------ chiC2: matrix element loop W2  -------------------------
      
	double precision function FloopW2_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFloopW2_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFloopW2_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW2_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FloopW2_psi2schic2_rho=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW2_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFloopW2_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        x1=x(1)
        x2=x(2)
 
        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

            endif
                   p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

       bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )



      W1loop =
     &  + ss1*CC1 * ( 32.D0*aINV**3*bb1*bb2 + 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2 - 32.D0*aINV**4*bb1*bb2**2 - 208.D0*aINV**4*bb1**2*bb2
     &     - 32.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*hm1**2 - 40.D0*aINV**4*bb1**3*bb2*hm1**2 + 192.D0*
     &    aINV**5*bb1**2*bb2**2 + 64.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    192.D0*aINV**5*bb1**3*bb2 + 96.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2 + 32.D0*aINV**5*bb1**3*bb2**2*hm1**2 + 64.D0*aINV**5*
     &    bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**2*bb2**4*hm2**2 - 96.D0
     &    *aINV**6*bb1**3*bb2**3*hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm1**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 32.D0*aINV**4*bb1**2*bb2**2
     &     + 32.D0*aINV**5*bb1**2*bb2**3 + 96.D0*aINV**5*bb1**3*bb2**2
     &     - 64.D0*aINV**6*bb1**3*bb2**3 - 64.D0*aINV**6*bb1**4*bb2**2
     &     )
      W1loop = W1loop + 32.D0*aINV**3*bb1**2*bb2 - 32.D0*aINV**4*bb1**2
     &    *bb2**2 - 32.D0*aINV**4*bb1**3*bb2

      W2loop =
     &  + p2q * ( 16.D0*aINV**3*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2
     &     - 8.D0*aINV**4*bb1**3*bb2 )
      W2loop = W2loop + ss1*CC1 * (  - 4.D0*aINV*qm**2 - 2.D0*aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 + 2.D0*aINV**2*bb2*qm**2 - 2.D0*
     &    aINV**2*bb2*hm2**2 + 28.D0*aINV**2*bb1*qm**2 - 6.D0*aINV**2*
     &    bb1*hm1**2 + 8.D0*aINV**2*bb1*bb2*hm2**2*qm**2 + aINV**2*bb1*
     &    bb2*hm1**2*qm**2 - aINV**2*bb1*bb2*hm1**2*hm2**2 + 9.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 - 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 40.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*bb1
     &    *bb2**2*hm2**2*qm**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**4 + 2.D0*
     &    aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 16.D0*aINV**3*bb1**2*qm**2
     &     + 36.D0*aINV**3*bb1**2*hm1**2 - 20.D0*aINV**3*bb1**2*bb2*
     &    hm2**2*qm**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2 + 12.D0*
     &    aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 12.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2 + 6.D0*aINV**3*bb1**3*hm1**4 - 2.D0*aINV**4*
     &    bb2**3*hm2**2 - 60.D0*aINV**4*bb1*bb2**2*hm2**2 + 4.D0*
     &    aINV**4*bb1*bb2**3*hm2**2*qm**2 )
      W2loop = W2loop + ss1*CC1 * (  - 12.D0*aINV**4*bb1*bb2**3*hm2**4
     &     - aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 108.D0*aINV**4*bb1**2*
     &    bb2*hm2**2 - 6.D0*aINV**4*bb1**2*bb2*hm1**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*qm**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**4 - 15.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 56.D0*
     &    aINV**4*bb1**3*hm1**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2*qm**2
     &     + 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 38.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - aINV**4*bb1**3*bb2*hm1**4 + 4.D0*
     &    aINV**4*bb1**4*hm1**2*qm**2 - 13.D0*aINV**4*bb1**4*hm1**4 + 
     &    24.D0*aINV**5*bb1*bb2**3*hm2**2 + 12.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 72.D0*aINV**5*bb1**2*bb2**2*hm2**2 + 44.D0*aINV**5*
     &    bb1**2*bb2**3*hm2**4 + 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*
     &    hm2**2 + 48.D0*aINV**5*bb1**3*bb2*hm2**2 + 24.D0*aINV**5*
     &    bb1**3*bb2*hm1**2 + 40.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 32.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 24.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W2loop = W2loop + ss1*CC1 * ( 44.D0*aINV**5*bb1**4*bb2*hm1**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**4*bb2*hm1**4 + 12.D0*aINV**5*
     &    bb1**5*hm1**4 - 4.D0*aINV**6*bb1*bb2**5*hm2**4 - 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 - 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 - 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 - 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 - 4.D0*aINV**6*bb1**6*hm1**4 )
      W2loop = W2loop + ss1*CC1*p2q * ( 8.D0*aINV**2*bb1*bb2*qm**2 + 24.
     &    D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1*bb2**2*qm**2 + 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 - 20.D0*aINV**3*bb1**2*bb2*qm**2 + 
     &    8.D0*aINV**3*bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb1*bb2**2 - 8.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 - 108.D0*aINV**4*bb1**2*bb2 + 8.D0
     &    *aINV**4*bb1**2*bb2**2*qm**2 - 40.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 8.D0*aINV**4*
     &    bb1**3*bb2*qm**2 - 34.D0*aINV**4*bb1**3*bb2*hm1**2 + 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 + 48.D0*aINV**5*bb1**2*bb2**2 + 52.D
     &    0*aINV**5*bb1**2*bb2**3*hm2**2 + 48.D0*aINV**5*bb1**3*bb2 + 
     &    80.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm1**2 + 44.D0*aINV**5*bb1**4*bb2*hm1**2 - 16.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**2 - 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2loop = W2loop + ss1*CC1*p2q**2 * (  - 16.D0*aINV**4*bb1**2*
     &    bb2**2 + 8.D0*aINV**5*bb1**2*bb2**3 + 40.D0*aINV**5*bb1**3*
     &    bb2**2 - 16.D0*aINV**6*bb1**3*bb2**3 - 16.D0*aINV**6*bb1**4*
     &    bb2**2 )
      W2loop = W2loop - 8.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 + 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 + 4.D0*
     &    aINV**2*bb1**2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2*bb2*hm2**2
     &     + 8.D0*aINV**3*bb1**3*hm1**2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2 - 4.D0*
     &    aINV**4*bb1**4*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop + ss1*CC1 * (  - 2.D0*aINV*qm**2 - aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 - 2.D0*aINV**2*bb2*qm**2 + 12.D0*
     &    aINV**2*bb1*qm**2 - 6.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - aINV**2*bb1*bb2*hm1**2*qm**2 + 4.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 + 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 - aINV**3*bb1*bb2**2
     &    *hm1**2*hm2**2 + 30.D0*aINV**3*bb1**2*hm1**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 4.D0*aINV**3*
     &    bb1**3*hm1**2*qm**2 + 5.D0*aINV**3*bb1**3*hm1**4 + 2.D0*
     &    aINV**4*bb2**3*hm2**2 + 20.D0*aINV**4*bb1*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2*qm**2 + 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**4 + aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 16.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 + 6.D0*aINV**4*bb1**2*bb2*hm1**2 - 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 )
      W3loop = W3loop + ss1*CC1 * ( 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 28.D0*aINV**4*bb1**3*hm1**2 - 4.D0*aINV**4*bb1**3*
     &    bb2*hm1**2*qm**2 - 12.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 
     &    aINV**4*bb1**3*bb2*hm1**4 - 8.D0*aINV**4*bb1**4*hm1**4 - 24.D0
     &    *aINV**5*bb1*bb2**3*hm2**2 - 8.D0*aINV**5*bb1*bb2**4*hm2**4
     &     - 48.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 16.D0*aINV**5*bb1**2*
     &    bb2**3*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*hm2**2 - 24.
     &    D0*aINV**5*bb1**3*bb2*hm1**2 - 12.D0*aINV**5*bb1**3*bb2**2*
     &    hm1**2*hm2**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**5*bb1**4*bb2*hm1**4 + 4.D0*aINV**5*bb1**5*hm1**4 + 4.D0
     &    *aINV**6*bb1*bb2**5*hm2**4 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 16.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*hm1**4 )
      W3loop = W3loop + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 8.D
     &    0*aINV**3*bb1*bb2 + 4.D0*aINV**3*bb1*bb2**2*qm**2 - 8.D0*
     &    aINV**3*bb1**2*bb2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 8.
     &    D0*aINV**4*bb1*bb2**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2*qm**2 + 2.D0
     &    *aINV**4*bb1**2*bb2**2*hm1**2 - 12.D0*aINV**4*bb1**3*bb2*
     &    hm1**2 - 4.D0*aINV**5*bb1*bb2**4*hm2**2 - 48.D0*aINV**5*
     &    bb1**2*bb2**2 - 24.D0*aINV**5*bb1**2*bb2**3*hm2**2 - 12.D0*
     &    aINV**5*bb1**3*bb2**2*hm1**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2
     &     + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 32.D0*aINV**6*bb1**3*
     &    bb2**3*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 )
      W3loop = W3loop + ss1*CC1*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**3 + 16.D0*aINV**6*bb1**3*bb2**3 )
      W3loop = W3loop - 4.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 - 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 4.D0*aINV**3*bb1**3*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1**3*bb2 )
      W4loop = W4loop + ss1*CC1 * ( 4.D0*aINV*qm**2 + 2.D0*aINV*bb1*
     &    hm1**2*qm**2 + 4.D0*aINV**2 + 4.D0*aINV**2*bb2*hm2**2 - 16.D0
     &    *aINV**2*bb1*qm**2 + 2.D0*aINV**2*bb1*hm1**2 - 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 + 2.D0*aINV**2*bb1*bb2*hm1**2*hm2**2 - 6.
     &    D0*aINV**2*bb1**2*hm1**2*qm**2 - 4.D0*aINV**3*bb2**2*hm2**2
     &     - 16.D0*aINV**3*bb1 - 40.D0*aINV**3*bb1*bb2*hm2**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2*qm**2 - 8.D0*aINV**3*bb1*bb2**2*
     &    hm2**4 - 2.D0*aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 32.D0*
     &    aINV**3*bb1**2*qm**2 + 8.D0*aINV**3*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1**2*bb2*hm2**2*qm**2 - 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2*hm2**2 + 2.D0*aINV**3*bb1**3*hm1**4 + 40.D0*aINV**4*
     &    bb1*bb2**2*hm2**2 + 16.D0*aINV**4*bb1*bb2**3*hm2**4 - 80.D0*
     &    aINV**4*bb1**2 - 24.D0*aINV**4*bb1**2*bb2*hm2**2 + 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 + 16.D0*aINV**4*bb1**2*
     &    bb2**2*hm2**4 + 6.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 64.
     &    D0*aINV**4*bb1**3*hm1**2 )
      W4loop = W4loop + ss1*CC1 * ( 16.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 8.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - 10.D0*aINV**4*bb1**4*hm1**4 - 8.D0*
     &    aINV**5*bb1*bb2**4*hm2**4 + 64.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 128.D0*aINV**5*
     &    bb1**3*bb2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 8.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    hm1**2 + 40.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 + 16.D0*
     &    aINV**5*bb1**5*hm1**4 - 8.D0*aINV**6*bb1**2*bb2**4*hm2**4 - 
     &    32.D0*aINV**6*bb1**3*bb2**3*hm2**4 - 32.D0*aINV**6*bb1**4*
     &    bb2**2*hm2**4 - 16.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 - 
     &    32.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 8.D0*aINV**6*bb1**6*
     &    hm1**4 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 8.D0*aINV**2*bb1*bb2*qm**2
     &     - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D
     &    0*aINV**3*bb1**2*bb2*qm**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2
     &     - 24.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**4*bb1**3*bb2*qm**2 - 12.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 128.D0
     &    *aINV**5*bb1**3*bb2 + 32.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 40.
     &    D0*aINV**5*bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W4loop = W4loop + ss1*CC1*p2q**2 * ( 16.D0*aINV**5*bb1**3*bb2**2
     &     - 32.D0*aINV**6*bb1**4*bb2**2 )
      W4loop = W4loop + 8.D0*aINV*bb1*qm**2 + 8.D0*aINV**2*bb1 + 8.D0*
     &    aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*bb1**2*qm**2 - 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2 + 8.D0*
     &    aINV**3*bb1**3*hm1**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 
     &    16.D0*aINV**4*bb1**3*bb2*hm2**2 - 8.D0*aINV**4*bb1**4*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb1 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop + ss1*CC1 * (  - aINV*hm1**2*qm**2 + 12.D0*
     &    aINV**2*qm**2 - 2.D0*aINV**2*hm2**2 - aINV**2*hm1**2 + 4.D0*
     &    aINV**2*bb2*hm2**2*qm**2 - aINV**2*bb2*hm1**2*hm2**2 + 4.D0*
     &    aINV**2*bb1*hm1**2*qm**2 - aINV**2*bb1*hm1**2*hm2**2 + 16.D0*
     &    aINV**3 + 24.D0*aINV**3*bb2*hm2**2 - 4.D0*aINV**3*bb2**2*
     &    hm2**2*qm**2 + 4.D0*aINV**3*bb2**2*hm2**4 + aINV**3*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**3*bb1*hm2**2 + 8.D0*aINV**3*bb1*
     &    hm1**2 - 8.D0*aINV**3*bb1*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1
     &    *bb2*hm2**4 + 6.D0*aINV**3*bb1*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 4.D0*aINV**3*bb1**2*hm1**2*
     &    hm2**2 + aINV**3*bb1**2*hm1**4 - 24.D0*aINV**4*bb2**2*hm2**2
     &     - 8.D0*aINV**4*bb2**3*hm2**4 - 48.D0*aINV**4*bb1*bb2*hm2**2
     &     - 20.D0*aINV**4*bb1*bb2**2*hm2**4 - 4.D0*aINV**4*bb1*bb2**2*
     &    hm1**2*hm2**2 - 24.D0*aINV**4*bb1**2*hm1**2 - 8.D0*aINV**4*
     &    bb1**2*bb2*hm2**4 - 16.D0*aINV**4*bb1**2*bb2*hm1**2*hm2**2 - 
     &    4.D0*aINV**4*bb1**3*hm1**2*hm2**2 )
      W5loop = W5loop + ss1*CC1 * (  - 4.D0*aINV**4*bb1**3*hm1**4 + 4.D0
     &    *aINV**5*bb2**4*hm2**4 + 16.D0*aINV**5*bb1*bb2**3*hm2**4 + 16.
     &    D0*aINV**5*bb1**2*bb2**2*hm2**4 + 8.D0*aINV**5*bb1**2*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**5*bb1**4*hm1**4 )
      W5loop = W5loop + ss1*CC1*p2q * (  - 2.D0*aINV**2 + 4.D0*aINV**2*
     &    bb2*qm**2 - aINV**2*bb1*hm1**2 + 8.D0*aINV**3*bb2 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 16.D0*aINV**3*bb1 - 8.D0*aINV**3*bb1*
     &    bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*
     &    bb2*hm1**2 + 4.D0*aINV**3*bb1**2*hm1**2 - 4.D0*aINV**4*bb2**3
     &    *hm2**2 - 48.D0*aINV**4*bb1*bb2 - 28.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 16.D0*aINV**4*bb1**2*bb2*hm2**2 - 12.D0*aINV**4*
     &    bb1**2*bb2*hm1**2 - 4.D0*aINV**4*bb1**3*hm1**2 + 16.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 + 32.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5loop = W5loop + ss1*CC1*p2q**2 * ( 4.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb1*bb2**2 - 8.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**5*
     &    bb1**2*bb2**2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm2**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1

       FFloopW2_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W2loop

        return
        end

C------------ chiC2: matrix element loop W3  -------------------------
      
	double precision function FloopW3_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1) 

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFloopW3_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFloopW3_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW3_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FloopW3_psi2schic2_rho=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW3_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFloopW3_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        x1=x(1)
        x2=x(2)
 
        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

            endif
                   p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

       bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )



      W1loop =
     &  + ss1*CC1 * ( 32.D0*aINV**3*bb1*bb2 + 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2 - 32.D0*aINV**4*bb1*bb2**2 - 208.D0*aINV**4*bb1**2*bb2
     &     - 32.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*hm1**2 - 40.D0*aINV**4*bb1**3*bb2*hm1**2 + 192.D0*
     &    aINV**5*bb1**2*bb2**2 + 64.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    192.D0*aINV**5*bb1**3*bb2 + 96.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2 + 32.D0*aINV**5*bb1**3*bb2**2*hm1**2 + 64.D0*aINV**5*
     &    bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**2*bb2**4*hm2**2 - 96.D0
     &    *aINV**6*bb1**3*bb2**3*hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm1**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 32.D0*aINV**4*bb1**2*bb2**2
     &     + 32.D0*aINV**5*bb1**2*bb2**3 + 96.D0*aINV**5*bb1**3*bb2**2
     &     - 64.D0*aINV**6*bb1**3*bb2**3 - 64.D0*aINV**6*bb1**4*bb2**2
     &     )
      W1loop = W1loop + 32.D0*aINV**3*bb1**2*bb2 - 32.D0*aINV**4*bb1**2
     &    *bb2**2 - 32.D0*aINV**4*bb1**3*bb2

      W2loop =
     &  + p2q * ( 16.D0*aINV**3*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2
     &     - 8.D0*aINV**4*bb1**3*bb2 )
      W2loop = W2loop + ss1*CC1 * (  - 4.D0*aINV*qm**2 - 2.D0*aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 + 2.D0*aINV**2*bb2*qm**2 - 2.D0*
     &    aINV**2*bb2*hm2**2 + 28.D0*aINV**2*bb1*qm**2 - 6.D0*aINV**2*
     &    bb1*hm1**2 + 8.D0*aINV**2*bb1*bb2*hm2**2*qm**2 + aINV**2*bb1*
     &    bb2*hm1**2*qm**2 - aINV**2*bb1*bb2*hm1**2*hm2**2 + 9.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 - 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 40.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*bb1
     &    *bb2**2*hm2**2*qm**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**4 + 2.D0*
     &    aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 16.D0*aINV**3*bb1**2*qm**2
     &     + 36.D0*aINV**3*bb1**2*hm1**2 - 20.D0*aINV**3*bb1**2*bb2*
     &    hm2**2*qm**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2 + 12.D0*
     &    aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 12.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2 + 6.D0*aINV**3*bb1**3*hm1**4 - 2.D0*aINV**4*
     &    bb2**3*hm2**2 - 60.D0*aINV**4*bb1*bb2**2*hm2**2 + 4.D0*
     &    aINV**4*bb1*bb2**3*hm2**2*qm**2 )
      W2loop = W2loop + ss1*CC1 * (  - 12.D0*aINV**4*bb1*bb2**3*hm2**4
     &     - aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 108.D0*aINV**4*bb1**2*
     &    bb2*hm2**2 - 6.D0*aINV**4*bb1**2*bb2*hm1**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*qm**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**4 - 15.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 56.D0*
     &    aINV**4*bb1**3*hm1**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2*qm**2
     &     + 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 38.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - aINV**4*bb1**3*bb2*hm1**4 + 4.D0*
     &    aINV**4*bb1**4*hm1**2*qm**2 - 13.D0*aINV**4*bb1**4*hm1**4 + 
     &    24.D0*aINV**5*bb1*bb2**3*hm2**2 + 12.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 72.D0*aINV**5*bb1**2*bb2**2*hm2**2 + 44.D0*aINV**5*
     &    bb1**2*bb2**3*hm2**4 + 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*
     &    hm2**2 + 48.D0*aINV**5*bb1**3*bb2*hm2**2 + 24.D0*aINV**5*
     &    bb1**3*bb2*hm1**2 + 40.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 32.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 24.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W2loop = W2loop + ss1*CC1 * ( 44.D0*aINV**5*bb1**4*bb2*hm1**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**4*bb2*hm1**4 + 12.D0*aINV**5*
     &    bb1**5*hm1**4 - 4.D0*aINV**6*bb1*bb2**5*hm2**4 - 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 - 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 - 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 - 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 - 4.D0*aINV**6*bb1**6*hm1**4 )
      W2loop = W2loop + ss1*CC1*p2q * ( 8.D0*aINV**2*bb1*bb2*qm**2 + 24.
     &    D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1*bb2**2*qm**2 + 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 - 20.D0*aINV**3*bb1**2*bb2*qm**2 + 
     &    8.D0*aINV**3*bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb1*bb2**2 - 8.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 - 108.D0*aINV**4*bb1**2*bb2 + 8.D0
     &    *aINV**4*bb1**2*bb2**2*qm**2 - 40.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 8.D0*aINV**4*
     &    bb1**3*bb2*qm**2 - 34.D0*aINV**4*bb1**3*bb2*hm1**2 + 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 + 48.D0*aINV**5*bb1**2*bb2**2 + 52.D
     &    0*aINV**5*bb1**2*bb2**3*hm2**2 + 48.D0*aINV**5*bb1**3*bb2 + 
     &    80.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm1**2 + 44.D0*aINV**5*bb1**4*bb2*hm1**2 - 16.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**2 - 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2loop = W2loop + ss1*CC1*p2q**2 * (  - 16.D0*aINV**4*bb1**2*
     &    bb2**2 + 8.D0*aINV**5*bb1**2*bb2**3 + 40.D0*aINV**5*bb1**3*
     &    bb2**2 - 16.D0*aINV**6*bb1**3*bb2**3 - 16.D0*aINV**6*bb1**4*
     &    bb2**2 )
      W2loop = W2loop - 8.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 + 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 + 4.D0*
     &    aINV**2*bb1**2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2*bb2*hm2**2
     &     + 8.D0*aINV**3*bb1**3*hm1**2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2 - 4.D0*
     &    aINV**4*bb1**4*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop + ss1*CC1 * (  - 2.D0*aINV*qm**2 - aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 - 2.D0*aINV**2*bb2*qm**2 + 12.D0*
     &    aINV**2*bb1*qm**2 - 6.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - aINV**2*bb1*bb2*hm1**2*qm**2 + 4.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 + 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 - aINV**3*bb1*bb2**2
     &    *hm1**2*hm2**2 + 30.D0*aINV**3*bb1**2*hm1**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 4.D0*aINV**3*
     &    bb1**3*hm1**2*qm**2 + 5.D0*aINV**3*bb1**3*hm1**4 + 2.D0*
     &    aINV**4*bb2**3*hm2**2 + 20.D0*aINV**4*bb1*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2*qm**2 + 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**4 + aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 16.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 + 6.D0*aINV**4*bb1**2*bb2*hm1**2 - 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 )
      W3loop = W3loop + ss1*CC1 * ( 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 28.D0*aINV**4*bb1**3*hm1**2 - 4.D0*aINV**4*bb1**3*
     &    bb2*hm1**2*qm**2 - 12.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 
     &    aINV**4*bb1**3*bb2*hm1**4 - 8.D0*aINV**4*bb1**4*hm1**4 - 24.D0
     &    *aINV**5*bb1*bb2**3*hm2**2 - 8.D0*aINV**5*bb1*bb2**4*hm2**4
     &     - 48.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 16.D0*aINV**5*bb1**2*
     &    bb2**3*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*hm2**2 - 24.
     &    D0*aINV**5*bb1**3*bb2*hm1**2 - 12.D0*aINV**5*bb1**3*bb2**2*
     &    hm1**2*hm2**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**5*bb1**4*bb2*hm1**4 + 4.D0*aINV**5*bb1**5*hm1**4 + 4.D0
     &    *aINV**6*bb1*bb2**5*hm2**4 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 16.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*hm1**4 )
      W3loop = W3loop + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 8.D
     &    0*aINV**3*bb1*bb2 + 4.D0*aINV**3*bb1*bb2**2*qm**2 - 8.D0*
     &    aINV**3*bb1**2*bb2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 8.
     &    D0*aINV**4*bb1*bb2**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2*qm**2 + 2.D0
     &    *aINV**4*bb1**2*bb2**2*hm1**2 - 12.D0*aINV**4*bb1**3*bb2*
     &    hm1**2 - 4.D0*aINV**5*bb1*bb2**4*hm2**2 - 48.D0*aINV**5*
     &    bb1**2*bb2**2 - 24.D0*aINV**5*bb1**2*bb2**3*hm2**2 - 12.D0*
     &    aINV**5*bb1**3*bb2**2*hm1**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2
     &     + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 32.D0*aINV**6*bb1**3*
     &    bb2**3*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 )
      W3loop = W3loop + ss1*CC1*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**3 + 16.D0*aINV**6*bb1**3*bb2**3 )
      W3loop = W3loop - 4.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 - 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 4.D0*aINV**3*bb1**3*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1**3*bb2 )
      W4loop = W4loop + ss1*CC1 * ( 4.D0*aINV*qm**2 + 2.D0*aINV*bb1*
     &    hm1**2*qm**2 + 4.D0*aINV**2 + 4.D0*aINV**2*bb2*hm2**2 - 16.D0
     &    *aINV**2*bb1*qm**2 + 2.D0*aINV**2*bb1*hm1**2 - 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 + 2.D0*aINV**2*bb1*bb2*hm1**2*hm2**2 - 6.
     &    D0*aINV**2*bb1**2*hm1**2*qm**2 - 4.D0*aINV**3*bb2**2*hm2**2
     &     - 16.D0*aINV**3*bb1 - 40.D0*aINV**3*bb1*bb2*hm2**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2*qm**2 - 8.D0*aINV**3*bb1*bb2**2*
     &    hm2**4 - 2.D0*aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 32.D0*
     &    aINV**3*bb1**2*qm**2 + 8.D0*aINV**3*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1**2*bb2*hm2**2*qm**2 - 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2*hm2**2 + 2.D0*aINV**3*bb1**3*hm1**4 + 40.D0*aINV**4*
     &    bb1*bb2**2*hm2**2 + 16.D0*aINV**4*bb1*bb2**3*hm2**4 - 80.D0*
     &    aINV**4*bb1**2 - 24.D0*aINV**4*bb1**2*bb2*hm2**2 + 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 + 16.D0*aINV**4*bb1**2*
     &    bb2**2*hm2**4 + 6.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 64.
     &    D0*aINV**4*bb1**3*hm1**2 )
      W4loop = W4loop + ss1*CC1 * ( 16.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 8.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - 10.D0*aINV**4*bb1**4*hm1**4 - 8.D0*
     &    aINV**5*bb1*bb2**4*hm2**4 + 64.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 128.D0*aINV**5*
     &    bb1**3*bb2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 8.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    hm1**2 + 40.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 + 16.D0*
     &    aINV**5*bb1**5*hm1**4 - 8.D0*aINV**6*bb1**2*bb2**4*hm2**4 - 
     &    32.D0*aINV**6*bb1**3*bb2**3*hm2**4 - 32.D0*aINV**6*bb1**4*
     &    bb2**2*hm2**4 - 16.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 - 
     &    32.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 8.D0*aINV**6*bb1**6*
     &    hm1**4 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 8.D0*aINV**2*bb1*bb2*qm**2
     &     - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D
     &    0*aINV**3*bb1**2*bb2*qm**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2
     &     - 24.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**4*bb1**3*bb2*qm**2 - 12.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 128.D0
     &    *aINV**5*bb1**3*bb2 + 32.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 40.
     &    D0*aINV**5*bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W4loop = W4loop + ss1*CC1*p2q**2 * ( 16.D0*aINV**5*bb1**3*bb2**2
     &     - 32.D0*aINV**6*bb1**4*bb2**2 )
      W4loop = W4loop + 8.D0*aINV*bb1*qm**2 + 8.D0*aINV**2*bb1 + 8.D0*
     &    aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*bb1**2*qm**2 - 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2 + 8.D0*
     &    aINV**3*bb1**3*hm1**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 
     &    16.D0*aINV**4*bb1**3*bb2*hm2**2 - 8.D0*aINV**4*bb1**4*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb1 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop + ss1*CC1 * (  - aINV*hm1**2*qm**2 + 12.D0*
     &    aINV**2*qm**2 - 2.D0*aINV**2*hm2**2 - aINV**2*hm1**2 + 4.D0*
     &    aINV**2*bb2*hm2**2*qm**2 - aINV**2*bb2*hm1**2*hm2**2 + 4.D0*
     &    aINV**2*bb1*hm1**2*qm**2 - aINV**2*bb1*hm1**2*hm2**2 + 16.D0*
     &    aINV**3 + 24.D0*aINV**3*bb2*hm2**2 - 4.D0*aINV**3*bb2**2*
     &    hm2**2*qm**2 + 4.D0*aINV**3*bb2**2*hm2**4 + aINV**3*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**3*bb1*hm2**2 + 8.D0*aINV**3*bb1*
     &    hm1**2 - 8.D0*aINV**3*bb1*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1
     &    *bb2*hm2**4 + 6.D0*aINV**3*bb1*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 4.D0*aINV**3*bb1**2*hm1**2*
     &    hm2**2 + aINV**3*bb1**2*hm1**4 - 24.D0*aINV**4*bb2**2*hm2**2
     &     - 8.D0*aINV**4*bb2**3*hm2**4 - 48.D0*aINV**4*bb1*bb2*hm2**2
     &     - 20.D0*aINV**4*bb1*bb2**2*hm2**4 - 4.D0*aINV**4*bb1*bb2**2*
     &    hm1**2*hm2**2 - 24.D0*aINV**4*bb1**2*hm1**2 - 8.D0*aINV**4*
     &    bb1**2*bb2*hm2**4 - 16.D0*aINV**4*bb1**2*bb2*hm1**2*hm2**2 - 
     &    4.D0*aINV**4*bb1**3*hm1**2*hm2**2 )
      W5loop = W5loop + ss1*CC1 * (  - 4.D0*aINV**4*bb1**3*hm1**4 + 4.D0
     &    *aINV**5*bb2**4*hm2**4 + 16.D0*aINV**5*bb1*bb2**3*hm2**4 + 16.
     &    D0*aINV**5*bb1**2*bb2**2*hm2**4 + 8.D0*aINV**5*bb1**2*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**5*bb1**4*hm1**4 )
      W5loop = W5loop + ss1*CC1*p2q * (  - 2.D0*aINV**2 + 4.D0*aINV**2*
     &    bb2*qm**2 - aINV**2*bb1*hm1**2 + 8.D0*aINV**3*bb2 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 16.D0*aINV**3*bb1 - 8.D0*aINV**3*bb1*
     &    bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*
     &    bb2*hm1**2 + 4.D0*aINV**3*bb1**2*hm1**2 - 4.D0*aINV**4*bb2**3
     &    *hm2**2 - 48.D0*aINV**4*bb1*bb2 - 28.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 16.D0*aINV**4*bb1**2*bb2*hm2**2 - 12.D0*aINV**4*
     &    bb1**2*bb2*hm1**2 - 4.D0*aINV**4*bb1**3*hm1**2 + 16.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 + 32.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5loop = W5loop + ss1*CC1*p2q**2 * ( 4.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb1*bb2**2 - 8.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**5*
     &    bb1**2*bb2**2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm2**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2



           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1
 
       FFloopW3_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W3loop

        return
        end

C------------ chiC2: matrix element loop W4  -------------------------
      
	double precision function FloopW4_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1) 

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFloopW4_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFloopW4_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW4_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FloopW4_psi2schic2_rho=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW4_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)
       

	common/CFloopW4_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi

        x1=x(1)
        x2=x(2)
 
        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

            endif
                   p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

       bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )



      W1loop =
     &  + ss1*CC1 * ( 32.D0*aINV**3*bb1*bb2 + 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2 - 32.D0*aINV**4*bb1*bb2**2 - 208.D0*aINV**4*bb1**2*bb2
     &     - 32.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*hm1**2 - 40.D0*aINV**4*bb1**3*bb2*hm1**2 + 192.D0*
     &    aINV**5*bb1**2*bb2**2 + 64.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    192.D0*aINV**5*bb1**3*bb2 + 96.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2 + 32.D0*aINV**5*bb1**3*bb2**2*hm1**2 + 64.D0*aINV**5*
     &    bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**2*bb2**4*hm2**2 - 96.D0
     &    *aINV**6*bb1**3*bb2**3*hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm1**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 32.D0*aINV**4*bb1**2*bb2**2
     &     + 32.D0*aINV**5*bb1**2*bb2**3 + 96.D0*aINV**5*bb1**3*bb2**2
     &     - 64.D0*aINV**6*bb1**3*bb2**3 - 64.D0*aINV**6*bb1**4*bb2**2
     &     )
      W1loop = W1loop + 32.D0*aINV**3*bb1**2*bb2 - 32.D0*aINV**4*bb1**2
     &    *bb2**2 - 32.D0*aINV**4*bb1**3*bb2

      W2loop =
     &  + p2q * ( 16.D0*aINV**3*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2
     &     - 8.D0*aINV**4*bb1**3*bb2 )
      W2loop = W2loop + ss1*CC1 * (  - 4.D0*aINV*qm**2 - 2.D0*aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 + 2.D0*aINV**2*bb2*qm**2 - 2.D0*
     &    aINV**2*bb2*hm2**2 + 28.D0*aINV**2*bb1*qm**2 - 6.D0*aINV**2*
     &    bb1*hm1**2 + 8.D0*aINV**2*bb1*bb2*hm2**2*qm**2 + aINV**2*bb1*
     &    bb2*hm1**2*qm**2 - aINV**2*bb1*bb2*hm1**2*hm2**2 + 9.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 - 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 40.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*bb1
     &    *bb2**2*hm2**2*qm**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**4 + 2.D0*
     &    aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 16.D0*aINV**3*bb1**2*qm**2
     &     + 36.D0*aINV**3*bb1**2*hm1**2 - 20.D0*aINV**3*bb1**2*bb2*
     &    hm2**2*qm**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2 + 12.D0*
     &    aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 12.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2 + 6.D0*aINV**3*bb1**3*hm1**4 - 2.D0*aINV**4*
     &    bb2**3*hm2**2 - 60.D0*aINV**4*bb1*bb2**2*hm2**2 + 4.D0*
     &    aINV**4*bb1*bb2**3*hm2**2*qm**2 )
      W2loop = W2loop + ss1*CC1 * (  - 12.D0*aINV**4*bb1*bb2**3*hm2**4
     &     - aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 108.D0*aINV**4*bb1**2*
     &    bb2*hm2**2 - 6.D0*aINV**4*bb1**2*bb2*hm1**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*qm**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**4 - 15.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 56.D0*
     &    aINV**4*bb1**3*hm1**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2*qm**2
     &     + 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 38.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - aINV**4*bb1**3*bb2*hm1**4 + 4.D0*
     &    aINV**4*bb1**4*hm1**2*qm**2 - 13.D0*aINV**4*bb1**4*hm1**4 + 
     &    24.D0*aINV**5*bb1*bb2**3*hm2**2 + 12.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 72.D0*aINV**5*bb1**2*bb2**2*hm2**2 + 44.D0*aINV**5*
     &    bb1**2*bb2**3*hm2**4 + 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*
     &    hm2**2 + 48.D0*aINV**5*bb1**3*bb2*hm2**2 + 24.D0*aINV**5*
     &    bb1**3*bb2*hm1**2 + 40.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 32.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 24.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W2loop = W2loop + ss1*CC1 * ( 44.D0*aINV**5*bb1**4*bb2*hm1**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**4*bb2*hm1**4 + 12.D0*aINV**5*
     &    bb1**5*hm1**4 - 4.D0*aINV**6*bb1*bb2**5*hm2**4 - 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 - 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 - 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 - 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 - 4.D0*aINV**6*bb1**6*hm1**4 )
      W2loop = W2loop + ss1*CC1*p2q * ( 8.D0*aINV**2*bb1*bb2*qm**2 + 24.
     &    D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1*bb2**2*qm**2 + 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 - 20.D0*aINV**3*bb1**2*bb2*qm**2 + 
     &    8.D0*aINV**3*bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb1*bb2**2 - 8.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 - 108.D0*aINV**4*bb1**2*bb2 + 8.D0
     &    *aINV**4*bb1**2*bb2**2*qm**2 - 40.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 8.D0*aINV**4*
     &    bb1**3*bb2*qm**2 - 34.D0*aINV**4*bb1**3*bb2*hm1**2 + 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 + 48.D0*aINV**5*bb1**2*bb2**2 + 52.D
     &    0*aINV**5*bb1**2*bb2**3*hm2**2 + 48.D0*aINV**5*bb1**3*bb2 + 
     &    80.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm1**2 + 44.D0*aINV**5*bb1**4*bb2*hm1**2 - 16.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**2 - 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2loop = W2loop + ss1*CC1*p2q**2 * (  - 16.D0*aINV**4*bb1**2*
     &    bb2**2 + 8.D0*aINV**5*bb1**2*bb2**3 + 40.D0*aINV**5*bb1**3*
     &    bb2**2 - 16.D0*aINV**6*bb1**3*bb2**3 - 16.D0*aINV**6*bb1**4*
     &    bb2**2 )
      W2loop = W2loop - 8.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 + 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 + 4.D0*
     &    aINV**2*bb1**2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2*bb2*hm2**2
     &     + 8.D0*aINV**3*bb1**3*hm1**2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2 - 4.D0*
     &    aINV**4*bb1**4*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop + ss1*CC1 * (  - 2.D0*aINV*qm**2 - aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 - 2.D0*aINV**2*bb2*qm**2 + 12.D0*
     &    aINV**2*bb1*qm**2 - 6.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - aINV**2*bb1*bb2*hm1**2*qm**2 + 4.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 + 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 - aINV**3*bb1*bb2**2
     &    *hm1**2*hm2**2 + 30.D0*aINV**3*bb1**2*hm1**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 4.D0*aINV**3*
     &    bb1**3*hm1**2*qm**2 + 5.D0*aINV**3*bb1**3*hm1**4 + 2.D0*
     &    aINV**4*bb2**3*hm2**2 + 20.D0*aINV**4*bb1*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2*qm**2 + 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**4 + aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 16.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 + 6.D0*aINV**4*bb1**2*bb2*hm1**2 - 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 )
      W3loop = W3loop + ss1*CC1 * ( 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 28.D0*aINV**4*bb1**3*hm1**2 - 4.D0*aINV**4*bb1**3*
     &    bb2*hm1**2*qm**2 - 12.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 
     &    aINV**4*bb1**3*bb2*hm1**4 - 8.D0*aINV**4*bb1**4*hm1**4 - 24.D0
     &    *aINV**5*bb1*bb2**3*hm2**2 - 8.D0*aINV**5*bb1*bb2**4*hm2**4
     &     - 48.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 16.D0*aINV**5*bb1**2*
     &    bb2**3*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*hm2**2 - 24.
     &    D0*aINV**5*bb1**3*bb2*hm1**2 - 12.D0*aINV**5*bb1**3*bb2**2*
     &    hm1**2*hm2**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**5*bb1**4*bb2*hm1**4 + 4.D0*aINV**5*bb1**5*hm1**4 + 4.D0
     &    *aINV**6*bb1*bb2**5*hm2**4 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 16.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*hm1**4 )
      W3loop = W3loop + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 8.D
     &    0*aINV**3*bb1*bb2 + 4.D0*aINV**3*bb1*bb2**2*qm**2 - 8.D0*
     &    aINV**3*bb1**2*bb2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 8.
     &    D0*aINV**4*bb1*bb2**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2*qm**2 + 2.D0
     &    *aINV**4*bb1**2*bb2**2*hm1**2 - 12.D0*aINV**4*bb1**3*bb2*
     &    hm1**2 - 4.D0*aINV**5*bb1*bb2**4*hm2**2 - 48.D0*aINV**5*
     &    bb1**2*bb2**2 - 24.D0*aINV**5*bb1**2*bb2**3*hm2**2 - 12.D0*
     &    aINV**5*bb1**3*bb2**2*hm1**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2
     &     + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 32.D0*aINV**6*bb1**3*
     &    bb2**3*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 )
      W3loop = W3loop + ss1*CC1*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**3 + 16.D0*aINV**6*bb1**3*bb2**3 )
      W3loop = W3loop - 4.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 - 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 4.D0*aINV**3*bb1**3*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1**3*bb2 )
      W4loop = W4loop + ss1*CC1 * ( 4.D0*aINV*qm**2 + 2.D0*aINV*bb1*
     &    hm1**2*qm**2 + 4.D0*aINV**2 + 4.D0*aINV**2*bb2*hm2**2 - 16.D0
     &    *aINV**2*bb1*qm**2 + 2.D0*aINV**2*bb1*hm1**2 - 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 + 2.D0*aINV**2*bb1*bb2*hm1**2*hm2**2 - 6.
     &    D0*aINV**2*bb1**2*hm1**2*qm**2 - 4.D0*aINV**3*bb2**2*hm2**2
     &     - 16.D0*aINV**3*bb1 - 40.D0*aINV**3*bb1*bb2*hm2**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2*qm**2 - 8.D0*aINV**3*bb1*bb2**2*
     &    hm2**4 - 2.D0*aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 32.D0*
     &    aINV**3*bb1**2*qm**2 + 8.D0*aINV**3*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1**2*bb2*hm2**2*qm**2 - 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2*hm2**2 + 2.D0*aINV**3*bb1**3*hm1**4 + 40.D0*aINV**4*
     &    bb1*bb2**2*hm2**2 + 16.D0*aINV**4*bb1*bb2**3*hm2**4 - 80.D0*
     &    aINV**4*bb1**2 - 24.D0*aINV**4*bb1**2*bb2*hm2**2 + 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 + 16.D0*aINV**4*bb1**2*
     &    bb2**2*hm2**4 + 6.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 64.
     &    D0*aINV**4*bb1**3*hm1**2 )
      W4loop = W4loop + ss1*CC1 * ( 16.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 8.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - 10.D0*aINV**4*bb1**4*hm1**4 - 8.D0*
     &    aINV**5*bb1*bb2**4*hm2**4 + 64.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 128.D0*aINV**5*
     &    bb1**3*bb2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 8.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    hm1**2 + 40.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 + 16.D0*
     &    aINV**5*bb1**5*hm1**4 - 8.D0*aINV**6*bb1**2*bb2**4*hm2**4 - 
     &    32.D0*aINV**6*bb1**3*bb2**3*hm2**4 - 32.D0*aINV**6*bb1**4*
     &    bb2**2*hm2**4 - 16.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 - 
     &    32.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 8.D0*aINV**6*bb1**6*
     &    hm1**4 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 8.D0*aINV**2*bb1*bb2*qm**2
     &     - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D
     &    0*aINV**3*bb1**2*bb2*qm**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2
     &     - 24.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**4*bb1**3*bb2*qm**2 - 12.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 128.D0
     &    *aINV**5*bb1**3*bb2 + 32.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 40.
     &    D0*aINV**5*bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W4loop = W4loop + ss1*CC1*p2q**2 * ( 16.D0*aINV**5*bb1**3*bb2**2
     &     - 32.D0*aINV**6*bb1**4*bb2**2 )
      W4loop = W4loop + 8.D0*aINV*bb1*qm**2 + 8.D0*aINV**2*bb1 + 8.D0*
     &    aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*bb1**2*qm**2 - 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2 + 8.D0*
     &    aINV**3*bb1**3*hm1**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 
     &    16.D0*aINV**4*bb1**3*bb2*hm2**2 - 8.D0*aINV**4*bb1**4*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb1 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop + ss1*CC1 * (  - aINV*hm1**2*qm**2 + 12.D0*
     &    aINV**2*qm**2 - 2.D0*aINV**2*hm2**2 - aINV**2*hm1**2 + 4.D0*
     &    aINV**2*bb2*hm2**2*qm**2 - aINV**2*bb2*hm1**2*hm2**2 + 4.D0*
     &    aINV**2*bb1*hm1**2*qm**2 - aINV**2*bb1*hm1**2*hm2**2 + 16.D0*
     &    aINV**3 + 24.D0*aINV**3*bb2*hm2**2 - 4.D0*aINV**3*bb2**2*
     &    hm2**2*qm**2 + 4.D0*aINV**3*bb2**2*hm2**4 + aINV**3*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**3*bb1*hm2**2 + 8.D0*aINV**3*bb1*
     &    hm1**2 - 8.D0*aINV**3*bb1*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1
     &    *bb2*hm2**4 + 6.D0*aINV**3*bb1*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 4.D0*aINV**3*bb1**2*hm1**2*
     &    hm2**2 + aINV**3*bb1**2*hm1**4 - 24.D0*aINV**4*bb2**2*hm2**2
     &     - 8.D0*aINV**4*bb2**3*hm2**4 - 48.D0*aINV**4*bb1*bb2*hm2**2
     &     - 20.D0*aINV**4*bb1*bb2**2*hm2**4 - 4.D0*aINV**4*bb1*bb2**2*
     &    hm1**2*hm2**2 - 24.D0*aINV**4*bb1**2*hm1**2 - 8.D0*aINV**4*
     &    bb1**2*bb2*hm2**4 - 16.D0*aINV**4*bb1**2*bb2*hm1**2*hm2**2 - 
     &    4.D0*aINV**4*bb1**3*hm1**2*hm2**2 )
      W5loop = W5loop + ss1*CC1 * (  - 4.D0*aINV**4*bb1**3*hm1**4 + 4.D0
     &    *aINV**5*bb2**4*hm2**4 + 16.D0*aINV**5*bb1*bb2**3*hm2**4 + 16.
     &    D0*aINV**5*bb1**2*bb2**2*hm2**4 + 8.D0*aINV**5*bb1**2*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**5*bb1**4*hm1**4 )
      W5loop = W5loop + ss1*CC1*p2q * (  - 2.D0*aINV**2 + 4.D0*aINV**2*
     &    bb2*qm**2 - aINV**2*bb1*hm1**2 + 8.D0*aINV**3*bb2 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 16.D0*aINV**3*bb1 - 8.D0*aINV**3*bb1*
     &    bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*
     &    bb2*hm1**2 + 4.D0*aINV**3*bb1**2*hm1**2 - 4.D0*aINV**4*bb2**3
     &    *hm2**2 - 48.D0*aINV**4*bb1*bb2 - 28.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 16.D0*aINV**4*bb1**2*bb2*hm2**2 - 12.D0*aINV**4*
     &    bb1**2*bb2*hm1**2 - 4.D0*aINV**4*bb1**3*hm1**2 + 16.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 + 32.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5loop = W5loop + ss1*CC1*p2q**2 * ( 4.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb1*bb2**2 - 8.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**5*
     &    bb1**2*bb2**2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm2**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2



           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1
 
       FFloopW4_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W4loop

        return
        end

C------------ chiC2: matrix element loop W5  -------------------------
      
	double precision function FloopW5_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1) 

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFloopW5_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFloopW5_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFloopW5_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	FloopW5_psi2schic2_rho=finval
        
        return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFloopW5_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFloopW5_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        x1=x(1)
        x2=x(2)
 
        alp1 = 1.d0-x1
        alp2 = x1*(1.d0-x2)
        alp3 = x1*x2

         v= x(3)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

            endif
                   p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp3 + alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

       bb1 =
     &  + t * ( alp2 )
      bb1 = bb1 + 1.D0/2.D0*ss1

      bb2 =
     &  + t * ( alp1 )
      bb2 = bb2 + 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp3 - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2 * ( 1.D0/4.D0*ss2 )
      z = z + hm2**2*t * ( alp1 )
      z = z + hm1**2 * ( 1.D0/4.D0*ss1 )
      z = z + hm1**2*t * ( alp2 )
      z = z + aINV*hm2**2 * (  - 1.D0/4.D0*ss2**2 - 1.D0/4.D0*ss1*ss2 )
      z = z + aINV*hm2**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss2*alp1 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm2**2*t**2 * (  - alp1*alp2 - alp1**2 )
      z = z + aINV*hm1**2 * (  - 1.D0/4.D0*ss1*ss2 - 1.D0/4.D0*ss1**2 )
      z = z + aINV*hm1**2*t * (  - 1.D0/2.D0*ss2*alp2 - ss1*alp2 - 1.D0/
     &    2.D0*ss1*alp1 )
      z = z + aINV*hm1**2*t**2 * (  - alp2**2 - alp1*alp2 )



      W1loop =
     &  + ss1*CC1 * ( 32.D0*aINV**3*bb1*bb2 + 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2 - 32.D0*aINV**4*bb1*bb2**2 - 208.D0*aINV**4*bb1**2*bb2
     &     - 32.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*bb1**2*
     &    bb2**2*hm1**2 - 40.D0*aINV**4*bb1**3*bb2*hm1**2 + 192.D0*
     &    aINV**5*bb1**2*bb2**2 + 64.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 
     &    192.D0*aINV**5*bb1**3*bb2 + 96.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2 + 32.D0*aINV**5*bb1**3*bb2**2*hm1**2 + 64.D0*aINV**5*
     &    bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**2*bb2**4*hm2**2 - 96.D0
     &    *aINV**6*bb1**3*bb2**3*hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm1**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1loop = W1loop + ss1*CC1*p2q * (  - 32.D0*aINV**4*bb1**2*bb2**2
     &     + 32.D0*aINV**5*bb1**2*bb2**3 + 96.D0*aINV**5*bb1**3*bb2**2
     &     - 64.D0*aINV**6*bb1**3*bb2**3 - 64.D0*aINV**6*bb1**4*bb2**2
     &     )
      W1loop = W1loop + 32.D0*aINV**3*bb1**2*bb2 - 32.D0*aINV**4*bb1**2
     &    *bb2**2 - 32.D0*aINV**4*bb1**3*bb2

      W2loop =
     &  + p2q * ( 16.D0*aINV**3*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2
     &     - 8.D0*aINV**4*bb1**3*bb2 )
      W2loop = W2loop + ss1*CC1 * (  - 4.D0*aINV*qm**2 - 2.D0*aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 + 2.D0*aINV**2*bb2*qm**2 - 2.D0*
     &    aINV**2*bb2*hm2**2 + 28.D0*aINV**2*bb1*qm**2 - 6.D0*aINV**2*
     &    bb1*hm1**2 + 8.D0*aINV**2*bb1*bb2*hm2**2*qm**2 + aINV**2*bb1*
     &    bb2*hm1**2*qm**2 - aINV**2*bb1*bb2*hm1**2*hm2**2 + 9.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 - 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 40.D0*aINV**3*bb1*bb2*hm2**2 - 12.D0*aINV**3*bb1
     &    *bb2**2*hm2**2*qm**2 + 4.D0*aINV**3*bb1*bb2**2*hm2**4 + 2.D0*
     &    aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 16.D0*aINV**3*bb1**2*qm**2
     &     + 36.D0*aINV**3*bb1**2*hm1**2 - 20.D0*aINV**3*bb1**2*bb2*
     &    hm2**2*qm**2 - 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2 + 12.D0*
     &    aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 12.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2 + 6.D0*aINV**3*bb1**3*hm1**4 - 2.D0*aINV**4*
     &    bb2**3*hm2**2 - 60.D0*aINV**4*bb1*bb2**2*hm2**2 + 4.D0*
     &    aINV**4*bb1*bb2**3*hm2**2*qm**2 )
      W2loop = W2loop + ss1*CC1 * (  - 12.D0*aINV**4*bb1*bb2**3*hm2**4
     &     - aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 108.D0*aINV**4*bb1**2*
     &    bb2*hm2**2 - 6.D0*aINV**4*bb1**2*bb2*hm1**2 + 12.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*qm**2 - 24.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**4 - 15.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 56.D0*
     &    aINV**4*bb1**3*hm1**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2*qm**2
     &     + 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 38.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - aINV**4*bb1**3*bb2*hm1**4 + 4.D0*
     &    aINV**4*bb1**4*hm1**2*qm**2 - 13.D0*aINV**4*bb1**4*hm1**4 + 
     &    24.D0*aINV**5*bb1*bb2**3*hm2**2 + 12.D0*aINV**5*bb1*bb2**4*
     &    hm2**4 + 72.D0*aINV**5*bb1**2*bb2**2*hm2**2 + 44.D0*aINV**5*
     &    bb1**2*bb2**3*hm2**4 + 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*
     &    hm2**2 + 48.D0*aINV**5*bb1**3*bb2*hm2**2 + 24.D0*aINV**5*
     &    bb1**3*bb2*hm1**2 + 40.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 32.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 24.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W2loop = W2loop + ss1*CC1 * ( 44.D0*aINV**5*bb1**4*bb2*hm1**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**4*bb2*hm1**4 + 12.D0*aINV**5*
     &    bb1**5*hm1**4 - 4.D0*aINV**6*bb1*bb2**5*hm2**4 - 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 - 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 - 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 - 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 - 4.D0*aINV**6*bb1**6*hm1**4 )
      W2loop = W2loop + ss1*CC1*p2q * ( 8.D0*aINV**2*bb1*bb2*qm**2 + 24.
     &    D0*aINV**3*bb1*bb2 - 4.D0*aINV**3*bb1*bb2**2*qm**2 + 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 - 20.D0*aINV**3*bb1**2*bb2*qm**2 + 
     &    8.D0*aINV**3*bb1**2*bb2*hm1**2 - 8.D0*aINV**4*bb1*bb2**2 - 8.D
     &    0*aINV**4*bb1*bb2**3*hm2**2 - 108.D0*aINV**4*bb1**2*bb2 + 8.D0
     &    *aINV**4*bb1**2*bb2**2*qm**2 - 40.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 + 8.D0*aINV**4*
     &    bb1**3*bb2*qm**2 - 34.D0*aINV**4*bb1**3*bb2*hm1**2 + 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2 + 48.D0*aINV**5*bb1**2*bb2**2 + 52.D
     &    0*aINV**5*bb1**2*bb2**3*hm2**2 + 48.D0*aINV**5*bb1**3*bb2 + 
     &    80.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm1**2 + 44.D0*aINV**5*bb1**4*bb2*hm1**2 - 16.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**2 - 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 - 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2loop = W2loop + ss1*CC1*p2q**2 * (  - 16.D0*aINV**4*bb1**2*
     &    bb2**2 + 8.D0*aINV**5*bb1**2*bb2**3 + 40.D0*aINV**5*bb1**3*
     &    bb2**2 - 16.D0*aINV**6*bb1**3*bb2**3 - 16.D0*aINV**6*bb1**4*
     &    bb2**2 )
      W2loop = W2loop - 8.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 + 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 + 4.D0*
     &    aINV**2*bb1**2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2*bb2*hm2**2
     &     + 8.D0*aINV**3*bb1**3*hm1**2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm2**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2 - 4.D0*
     &    aINV**4*bb1**4*hm1**2

      W3loop =
     &  + p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 )
      W3loop = W3loop + ss1*CC1 * (  - 2.D0*aINV*qm**2 - aINV*bb1*
     &    hm1**2*qm**2 - 4.D0*aINV**2 - 2.D0*aINV**2*bb2*qm**2 + 12.D0*
     &    aINV**2*bb1*qm**2 - 6.D0*aINV**2*bb1*hm1**2 + 4.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 - aINV**2*bb1*bb2*hm1**2*qm**2 + 4.D0*
     &    aINV**2*bb1**2*hm1**2*qm**2 - aINV**2*bb1**2*hm1**4 - 2.D0*
     &    aINV**3*bb2**2*hm2**2 + 32.D0*aINV**3*bb1 + 16.D0*aINV**3*bb1
     &    *bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 - aINV**3*bb1*bb2**2
     &    *hm1**2*hm2**2 + 30.D0*aINV**3*bb1**2*hm1**2 - 8.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2*hm2**2 - 4.D0*aINV**3*
     &    bb1**3*hm1**2*qm**2 + 5.D0*aINV**3*bb1**3*hm1**4 + 2.D0*
     &    aINV**4*bb2**3*hm2**2 + 20.D0*aINV**4*bb1*bb2**2*hm2**2 - 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2*qm**2 + 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**4 + aINV**4*bb1*bb2**3*hm1**2*hm2**2 - 16.D0*aINV**4*
     &    bb1**2*bb2*hm2**2 + 6.D0*aINV**4*bb1**2*bb2*hm1**2 - 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 )
      W3loop = W3loop + ss1*CC1 * ( 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 28.D0*aINV**4*bb1**3*hm1**2 - 4.D0*aINV**4*bb1**3*
     &    bb2*hm1**2*qm**2 - 12.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 
     &    aINV**4*bb1**3*bb2*hm1**4 - 8.D0*aINV**4*bb1**4*hm1**4 - 24.D0
     &    *aINV**5*bb1*bb2**3*hm2**2 - 8.D0*aINV**5*bb1*bb2**4*hm2**4
     &     - 48.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 16.D0*aINV**5*bb1**2*
     &    bb2**3*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**3*hm1**2*hm2**2 - 24.
     &    D0*aINV**5*bb1**3*bb2*hm1**2 - 12.D0*aINV**5*bb1**3*bb2**2*
     &    hm1**2*hm2**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**5*bb1**4*bb2*hm1**4 + 4.D0*aINV**5*bb1**5*hm1**4 + 4.D0
     &    *aINV**6*bb1*bb2**5*hm2**4 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 16.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*hm1**4 )
      W3loop = W3loop + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 8.D
     &    0*aINV**3*bb1*bb2 + 4.D0*aINV**3*bb1*bb2**2*qm**2 - 8.D0*
     &    aINV**3*bb1**2*bb2*qm**2 + 4.D0*aINV**3*bb1**2*bb2*hm1**2 + 8.
     &    D0*aINV**4*bb1*bb2**2 + 4.D0*aINV**4*bb1*bb2**3*hm2**2 - 16.D0
     &    *aINV**4*bb1**2*bb2 - 8.D0*aINV**4*bb1**2*bb2**2*qm**2 + 2.D0
     &    *aINV**4*bb1**2*bb2**2*hm1**2 - 12.D0*aINV**4*bb1**3*bb2*
     &    hm1**2 - 4.D0*aINV**5*bb1*bb2**4*hm2**2 - 48.D0*aINV**5*
     &    bb1**2*bb2**2 - 24.D0*aINV**5*bb1**2*bb2**3*hm2**2 - 12.D0*
     &    aINV**5*bb1**3*bb2**2*hm1**2 + 8.D0*aINV**5*bb1**4*bb2*hm1**2
     &     + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 32.D0*aINV**6*bb1**3*
     &    bb2**3*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 )
      W3loop = W3loop + ss1*CC1*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**3 + 16.D0*aINV**6*bb1**3*bb2**3 )
      W3loop = W3loop - 4.D0*aINV*bb1*qm**2 - 8.D0*aINV**2*bb1 - 4.D0*
     &    aINV**2*bb1*bb2*qm**2 - 4.D0*aINV**2*bb1**2*hm1**2 - 4.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 4.D0*aINV**3*bb1**3*hm1**2 + 4.D0
     &    *aINV**4*bb1*bb2**3*hm2**2 + 8.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2

      W4loop =
     &  + p2q * (  - 16.D0*aINV**4*bb1**3*bb2 )
      W4loop = W4loop + ss1*CC1 * ( 4.D0*aINV*qm**2 + 2.D0*aINV*bb1*
     &    hm1**2*qm**2 + 4.D0*aINV**2 + 4.D0*aINV**2*bb2*hm2**2 - 16.D0
     &    *aINV**2*bb1*qm**2 + 2.D0*aINV**2*bb1*hm1**2 - 8.D0*aINV**2*
     &    bb1*bb2*hm2**2*qm**2 + 2.D0*aINV**2*bb1*bb2*hm1**2*hm2**2 - 6.
     &    D0*aINV**2*bb1**2*hm1**2*qm**2 - 4.D0*aINV**3*bb2**2*hm2**2
     &     - 16.D0*aINV**3*bb1 - 40.D0*aINV**3*bb1*bb2*hm2**2 + 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2*qm**2 - 8.D0*aINV**3*bb1*bb2**2*
     &    hm2**4 - 2.D0*aINV**3*bb1*bb2**2*hm1**2*hm2**2 - 32.D0*
     &    aINV**3*bb1**2*qm**2 + 8.D0*aINV**3*bb1**2*hm1**2 + 8.D0*
     &    aINV**3*bb1**2*bb2*hm2**2*qm**2 - 8.D0*aINV**3*bb1**2*bb2*
     &    hm1**2*hm2**2 + 2.D0*aINV**3*bb1**3*hm1**4 + 40.D0*aINV**4*
     &    bb1*bb2**2*hm2**2 + 16.D0*aINV**4*bb1*bb2**3*hm2**4 - 80.D0*
     &    aINV**4*bb1**2 - 24.D0*aINV**4*bb1**2*bb2*hm2**2 + 8.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**2*qm**2 + 16.D0*aINV**4*bb1**2*
     &    bb2**2*hm2**4 + 6.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 64.
     &    D0*aINV**4*bb1**3*hm1**2 )
      W4loop = W4loop + ss1*CC1 * ( 16.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 4.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 + 8.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - 10.D0*aINV**4*bb1**4*hm1**4 - 8.D0*
     &    aINV**5*bb1*bb2**4*hm2**4 + 64.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**4 + 128.D0*aINV**5*
     &    bb1**3*bb2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2**2*hm2**4 + 8.D0
     &    *aINV**5*bb1**3*bb2**2*hm1**2*hm2**2 + 64.D0*aINV**5*bb1**4*
     &    hm1**2 + 40.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2 + 16.D0*
     &    aINV**5*bb1**5*hm1**4 - 8.D0*aINV**6*bb1**2*bb2**4*hm2**4 - 
     &    32.D0*aINV**6*bb1**3*bb2**3*hm2**4 - 32.D0*aINV**6*bb1**4*
     &    bb2**2*hm2**4 - 16.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 - 
     &    32.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 - 8.D0*aINV**6*bb1**6*
     &    hm1**4 )
      W4loop = W4loop + ss1*CC1*p2q * (  - 8.D0*aINV**2*bb1*bb2*qm**2
     &     - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1*bb2**2*hm2**2 + 8.D
     &    0*aINV**3*bb1**2*bb2*qm**2 + 8.D0*aINV**4*bb1*bb2**3*hm2**2
     &     - 24.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**4*bb1**3*bb2*qm**2 - 12.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2 + 128.D0
     &    *aINV**5*bb1**3*bb2 + 32.D0*aINV**5*bb1**3*bb2**2*hm2**2 + 40.
     &    D0*aINV**5*bb1**4*bb2*hm1**2 - 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 - 64.D0*aINV**6*bb1**4*bb2**2*hm2**2 - 32.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W4loop = W4loop + ss1*CC1*p2q**2 * ( 16.D0*aINV**5*bb1**3*bb2**2
     &     - 32.D0*aINV**6*bb1**4*bb2**2 )
      W4loop = W4loop + 8.D0*aINV*bb1*qm**2 + 8.D0*aINV**2*bb1 + 8.D0*
     &    aINV**2*bb1*bb2*hm2**2 + 8.D0*aINV**2*bb1**2*qm**2 - 8.D0*
     &    aINV**3*bb1*bb2**2*hm2**2 + 16.D0*aINV**3*bb1**2 + 8.D0*
     &    aINV**3*bb1**3*hm1**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 
     &    16.D0*aINV**4*bb1**3*bb2*hm2**2 - 8.D0*aINV**4*bb1**4*hm1**2

      W5loop =
     &  + p2q * (  - 4.D0*aINV**2*bb1 + 8.D0*aINV**3*bb1*bb2 )
      W5loop = W5loop + ss1*CC1 * (  - aINV*hm1**2*qm**2 + 12.D0*
     &    aINV**2*qm**2 - 2.D0*aINV**2*hm2**2 - aINV**2*hm1**2 + 4.D0*
     &    aINV**2*bb2*hm2**2*qm**2 - aINV**2*bb2*hm1**2*hm2**2 + 4.D0*
     &    aINV**2*bb1*hm1**2*qm**2 - aINV**2*bb1*hm1**2*hm2**2 + 16.D0*
     &    aINV**3 + 24.D0*aINV**3*bb2*hm2**2 - 4.D0*aINV**3*bb2**2*
     &    hm2**2*qm**2 + 4.D0*aINV**3*bb2**2*hm2**4 + aINV**3*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**3*bb1*hm2**2 + 8.D0*aINV**3*bb1*
     &    hm1**2 - 8.D0*aINV**3*bb1*bb2*hm2**2*qm**2 + 4.D0*aINV**3*bb1
     &    *bb2*hm2**4 + 6.D0*aINV**3*bb1*bb2*hm1**2*hm2**2 - 4.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 4.D0*aINV**3*bb1**2*hm1**2*
     &    hm2**2 + aINV**3*bb1**2*hm1**4 - 24.D0*aINV**4*bb2**2*hm2**2
     &     - 8.D0*aINV**4*bb2**3*hm2**4 - 48.D0*aINV**4*bb1*bb2*hm2**2
     &     - 20.D0*aINV**4*bb1*bb2**2*hm2**4 - 4.D0*aINV**4*bb1*bb2**2*
     &    hm1**2*hm2**2 - 24.D0*aINV**4*bb1**2*hm1**2 - 8.D0*aINV**4*
     &    bb1**2*bb2*hm2**4 - 16.D0*aINV**4*bb1**2*bb2*hm1**2*hm2**2 - 
     &    4.D0*aINV**4*bb1**3*hm1**2*hm2**2 )
      W5loop = W5loop + ss1*CC1 * (  - 4.D0*aINV**4*bb1**3*hm1**4 + 4.D0
     &    *aINV**5*bb2**4*hm2**4 + 16.D0*aINV**5*bb1*bb2**3*hm2**4 + 16.
     &    D0*aINV**5*bb1**2*bb2**2*hm2**4 + 8.D0*aINV**5*bb1**2*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**5*bb1**4*hm1**4 )
      W5loop = W5loop + ss1*CC1*p2q * (  - 2.D0*aINV**2 + 4.D0*aINV**2*
     &    bb2*qm**2 - aINV**2*bb1*hm1**2 + 8.D0*aINV**3*bb2 + 4.D0*
     &    aINV**3*bb2**2*hm2**2 + 16.D0*aINV**3*bb1 - 8.D0*aINV**3*bb1*
     &    bb2*qm**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*
     &    bb2*hm1**2 + 4.D0*aINV**3*bb1**2*hm1**2 - 4.D0*aINV**4*bb2**3
     &    *hm2**2 - 48.D0*aINV**4*bb1*bb2 - 28.D0*aINV**4*bb1*bb2**2*
     &    hm2**2 - 16.D0*aINV**4*bb1**2*bb2*hm2**2 - 12.D0*aINV**4*
     &    bb1**2*bb2*hm1**2 - 4.D0*aINV**4*bb1**3*hm1**2 + 16.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 + 32.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 16.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5loop = W5loop + ss1*CC1*p2q**2 * ( 4.D0*aINV**3*bb1*bb2 - 8.D0*
     &    aINV**4*bb1*bb2**2 - 8.D0*aINV**4*bb1**2*bb2 + 16.D0*aINV**5*
     &    bb1**2*bb2**2 )
      W5loop = W5loop - 4.D0*aINV*qm**2 - 4.D0*aINV**2 - 4.D0*aINV**2*
     &    bb2*hm2**2 - 4.D0*aINV**2*bb1*hm2**2 + 4.D0*aINV**3*bb2**2*
     &    hm2**2 + 8.D0*aINV**3*bb1*bb2*hm2**2 + 4.D0*aINV**3*bb1**2*
     &    hm1**2



           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex3 = t**2*x1
 
       FFloopW5_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex3*dexp(z)
     &       *W5loop

        return
        end

C--------------- psi2-chiC2: bub1a --------------------------------
      
C------------  chiC2: matrix element bub1a W3  -----------------
      
	double precision function Fbub1aW3_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1aW3_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1aW3_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1aW3_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1aW3_psi2schic2_rho=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1aW3_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFbub1aW3_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
         
           p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2

      bb2 =
     &  - 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2 + 1.D0/4.D0*ss2*
     &    alp1 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2 - 1.D0/4.D0*ss2*alp1
     &     )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub1a = 0.d0

      W2bub1a = 0.d0

      W3bub1a =
     &  + ss1*CC1 * ( 16.D0*aINV**3*bb1*bb2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 )
      W3bub1a = W3bub1a + ss1*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*bb2**2
     &     )
      W3bub1a = W3bub1a - 4.D0*aINV**2*bb1*bb2

      W4bub1a = 0.d0

      W5bub1a =
     &  + p2q * (  - 4.D0*aINV**2*bb1*bb2 )
      W5bub1a = W5bub1a + ss1*CC1 * (  - 4.D0*aINV*qm**2 - aINV*hm1**2
     &     - 6.D0*aINV**2 + 2.D0*aINV**2*bb2**2*hm2**2*qm**2 + 1.D0/2.D0
     &    *aINV**2*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**2*bb1*bb2*hm2**2*
     &    qm**2 + aINV**2*bb1*bb2*hm1**2*hm2**2 + 2.D0*aINV**2*bb1**2*
     &    hm1**2*qm**2 + 1.D0/2.D0*aINV**2*bb1**2*hm1**4 + 10.D0*
     &    aINV**3*bb2**2*hm2**2 + 20.D0*aINV**3*bb1*bb2*hm2**2 + 10.D0*
     &    aINV**3*bb1**2*hm1**2 - 2.D0*aINV**4*bb2**4*hm2**4 - 8.D0*
     &    aINV**4*bb1*bb2**3*hm2**4 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**4
     &     - 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**4*bb1**4*hm1**4 )
      W5bub1a = W5bub1a + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 
     &    aINV**2*bb1*bb2*hm1**2 + 20.D0*aINV**3*bb1*bb2 - 8.D0*aINV**4
     &    *bb1*bb2**3*hm2**2 - 16.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**4*bb1**3*bb2*hm1**2 )
      W5bub1a = W5bub1a + ss1*CC1*p2q**2 * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2 )
      W5bub1a = W5bub1a + 2.D0*qm**2 + 1.D0/2.D0*hm1**2 + 2.D0*aINV - 2.
     &    D0*aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 - 2.D0
     &    *aINV**2*bb1**2*hm1**2


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1aW3_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W3bub1a
        
        return
        end

C------------  chiC2: matrix element bub1a W5  ------------------------------
      
	double precision function Fbub1aW5_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(2), b(2), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1aW5_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1aW5_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 2

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,2
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1aW5_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1aW5_psi2schic2_rho=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1aW5_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(2)

	common/CFbub1aW5_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2

      bb2 =
     &  - 1.D0/2.D0*ss2

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2 + 1.D0/4.D0*ss2*
     &    alp1 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2 - 1.D0/4.D0*ss2*alp1
     &     )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub1a = 0.d0

      W2bub1a = 0.d0

      W3bub1a =
     &  + ss1*CC1 * ( 16.D0*aINV**3*bb1*bb2 - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 4.D0*aINV**4*
     &    bb1**3*bb2*hm1**2 )
      W3bub1a = W3bub1a + ss1*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*bb2**2
     &     )
      W3bub1a = W3bub1a - 4.D0*aINV**2*bb1*bb2

      W4bub1a = 0.d0

      W5bub1a =
     &  + p2q * (  - 4.D0*aINV**2*bb1*bb2 )
      W5bub1a = W5bub1a + ss1*CC1 * (  - 4.D0*aINV*qm**2 - aINV*hm1**2
     &     - 6.D0*aINV**2 + 2.D0*aINV**2*bb2**2*hm2**2*qm**2 + 1.D0/2.D0
     &    *aINV**2*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**2*bb1*bb2*hm2**2*
     &    qm**2 + aINV**2*bb1*bb2*hm1**2*hm2**2 + 2.D0*aINV**2*bb1**2*
     &    hm1**2*qm**2 + 1.D0/2.D0*aINV**2*bb1**2*hm1**4 + 10.D0*
     &    aINV**3*bb2**2*hm2**2 + 20.D0*aINV**3*bb1*bb2*hm2**2 + 10.D0*
     &    aINV**3*bb1**2*hm1**2 - 2.D0*aINV**4*bb2**4*hm2**4 - 8.D0*
     &    aINV**4*bb1*bb2**3*hm2**4 - 8.D0*aINV**4*bb1**2*bb2**2*hm2**4
     &     - 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**4*bb1**4*hm1**4 )
      W5bub1a = W5bub1a + ss1*CC1*p2q * ( 4.D0*aINV**2*bb1*bb2*qm**2 + 
     &    aINV**2*bb1*bb2*hm1**2 + 20.D0*aINV**3*bb1*bb2 - 8.D0*aINV**4
     &    *bb1*bb2**3*hm2**2 - 16.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**4*bb1**3*bb2*hm1**2 )
      W5bub1a = W5bub1a + ss1*CC1*p2q**2 * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2 )
      W5bub1a = W5bub1a + 2.D0*qm**2 + 1.D0/2.D0*hm1**2 + 2.D0*aINV - 2.
     &    D0*aINV**2*bb2**2*hm2**2 - 4.D0*aINV**2*bb1*bb2*hm2**2 - 2.D0
     &    *aINV**2*bb1**2*hm1**2


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1aW5_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W5bub1a
        
        return
        end

C---------------psi2-chiC2: bub1b --------------------------------
      
C------------  chiC2: matrix element bub1b W1  -----------------
      
	double precision function Fbub1bW1_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1bW1_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1bW1_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW1_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1bW1_psi2schic2_rho=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW1_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub1bW1_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )

      W1bub1b =
     &  + ss1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub1b = W1bub1b + ss1*CC1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D
     &    0*aINV**4*bb1**3*bb2 )
      W1bub1b = W1bub1b + ss1**2*CC1 * ( 16.D0*aINV**4*bb1*bb2**2*tau
     &     + 8.D0*aINV**4*bb1**2*bb2*tau - 4.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*tau + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*tau - 8.D0*
     &    aINV**4*bb1**3*tau - 4.D0*aINV**4*bb1**3*bb2*hm2**2*tau + 4.D0
     &    *aINV**4*bb1**3*bb2*hm1**2*tau - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2*tau - 16.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 16.D0*
     &    aINV**5*bb1**4*bb2*hm2**2*tau - 16.D0*aINV**5*bb1**4*bb2*
     &    hm1**2*tau + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*
     &    aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1bub1b = W1bub1b + ss1**2*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 8.D0*aINV**4*bb1**3*bb2*tau - 16.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 16.D0*aINV**5*bb1**4*bb2*tau + 32.D0*
     &    aINV**6*bb1**3*bb2**3 + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub1b =
     &  + ss1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm2**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0
     &    *aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1*CC1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - 
     &    aINV**2*bb1*bb2*hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*
     &    bb1**2*hm2**2 - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 
     &    4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3
     &    *bb2*hm1**2 + 4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*CC1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 
     &    8.D0*aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau - 2.D0*aINV**2*bb1*qm**2*
     &    tau - 1.D0/2.D0*aINV**2*bb1*hm2**2*tau + aINV**2*bb1*bb2*
     &    hm2**2*qm**2*tau + 1.D0/4.D0*aINV**2*bb1*bb2*hm2**4*tau - 
     &    aINV**2*bb1*bb2*hm1**2*qm**2*tau - 1.D0/4.D0*aINV**2*bb1*bb2*
     &    hm1**2*hm2**2*tau + aINV**2*bb1**2*hm2**2*qm**2*tau + 1.D0/4.D
     &    0*aINV**2*bb1**2*hm2**4*tau - aINV**2*bb1**2*hm1**2*qm**2*tau
     &     - 1.D0/4.D0*aINV**2*bb1**2*hm1**2*hm2**2*tau - 4.D0*aINV**3*
     &    bb2*tau - 4.D0*aINV**3*bb1*tau + 16.D0*aINV**3*bb1*bb2*qm**2
     &     + 4.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*bb2*hm2**2*
     &    tau - 2.D0*aINV**3*bb1*bb2*hm1**2*tau + 16.D0*aINV**3*bb1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*hm2**2 + 2.D0*aINV**3*bb1**2*
     &    hm2**2*tau - 2.D0*aINV**3*bb1**2*hm1**2*tau - 4.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2*tau - aINV**3*bb1**2*bb2*hm2**4*tau
     &     + 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2*tau + aINV**3*bb1**2*
     &    bb2*hm1**2*hm2**2*tau )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb1**3*hm2**2*
     &    qm**2*tau - aINV**3*bb1**3*hm2**4*tau + 4.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2*tau + aINV**3*bb1**3*hm1**2*hm2**2*tau + 2.D0*
     &    aINV**4*bb2**3*hm2**2*tau + 40.D0*aINV**4*bb1*bb2 + 6.D0*
     &    aINV**4*bb1*bb2**2*hm2**2*tau - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm2**4 - aINV**4*bb1*bb2**3
     &    *hm2**4*tau + aINV**4*bb1*bb2**3*hm1**2*hm2**2*tau + 40.D0*
     &    aINV**4*bb1**2 - 8.D0*aINV**4*bb1**2*bb2*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**2*bb2*hm1**2*tau - 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 3.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4*tau + 3.D0*aINV**4*bb1**2*bb2**2
     &    *hm1**2*hm2**2*tau - 12.D0*aINV**4*bb1**3*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**4 - 2.D0*aINV**4*bb1**3*
     &    bb2*hm2**4*tau - 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 
     &    aINV**4*bb1**3*bb2*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( aINV**4*bb1**3*bb2*hm1**2*
     &    hm2**2*tau + aINV**4*bb1**3*bb2*hm1**4*tau - 4.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - aINV**4*bb1**4*hm1**2*hm2**2 - aINV**4*
     &    bb1**4*hm1**2*hm2**2*tau + aINV**4*bb1**4*hm1**4*tau - 32.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 96.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**2*bb2**3*hm2**4*tau - 4.D0*aINV**5
     &    *bb1**2*bb2**3*hm1**2*hm2**2*tau - 64.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 + 12.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2
     &    *hm2**2*tau - 32.D0*aINV**5*bb1**4*hm1**2 + 8.D0*aINV**5*
     &    bb1**4*bb2*hm2**4*tau - 4.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2
     &    *tau - 4.D0*aINV**5*bb1**4*bb2*hm1**4*tau + 4.D0*aINV**5*
     &    bb1**5*hm1**2*hm2**2*tau - 4.D0*aINV**5*bb1**5*hm1**4*tau + 4.
     &    D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**4 + 24.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*
     &    hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2*qm**2
     &    *tau + 1.D0/2.D0*aINV**2*bb1*bb2*hm2**2*tau + 2.D0*aINV**2*
     &    bb1**2*qm**2*tau + 1.D0/2.D0*aINV**2*bb1**2*hm2**2*tau + 4.D0
     &    *aINV**3*bb1*bb2*tau + 4.D0*aINV**3*bb1*bb2**2*qm**2*tau + 
     &    aINV**3*bb1*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1**2*tau - 4.D0
     &    *aINV**3*bb1**3*qm**2*tau - aINV**3*bb1**3*hm2**2*tau + 16.D0
     &    *aINV**4*bb1*bb2**2*tau - 2.D0*aINV**4*bb1*bb2**3*hm2**2*tau
     &     + 4.D0*aINV**4*bb1**2*bb2*tau - 8.D0*aINV**4*bb1**2*bb2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*tau + 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    tau - 12.D0*aINV**4*bb1**3*tau - 8.D0*aINV**4*bb1**3*bb2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**2 - 6.D0*aINV**4*bb1**3*
     &    bb2*hm2**2*tau - 2.D0*aINV**4*bb1**4*hm1**2*tau - 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2*tau - 64.D0*aINV**5*bb1**2*bb2**2
     &     - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2*tau - 64.D0*aINV**5*
     &    bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm2**2*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 
     &    16.D0*aINV**5*bb1**4*bb2*hm2**2*tau - 8.D0*aINV**5*bb1**4*bb2
     &    *hm1**2*tau + 4.D0*aINV**5*bb1**5*hm1**2*tau + 16.D0*aINV**6*
     &    bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 
     &    32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*
     &    bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q**2 * (  - 4.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 4.D0*aINV**4*bb1**3*bb2*tau - 8.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 8.D0*aINV**5*bb1**4*bb2*tau + 16.D0*
     &    aINV**6*bb1**3*bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub1b =
     &  + ss1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1*CC1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb2*tau + 4.D0
     &    *aINV**3*bb1*tau + 2.D0*aINV**3*bb1*bb2*hm2**2*tau - 2.D0*
     &    aINV**3*bb1*bb2*hm1**2*tau + 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 8.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 8.D0*aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*
     &    bb1**2*bb2**2*hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub1b = W3bub1b + ss1**2*CC1*p2q * ( 4.D0*aINV**3*bb1*bb2*tau
     &     + 8.D0*aINV**4*bb1*bb2**2*tau - 8.D0*aINV**4*bb1**2*bb2*tau
     &     - 16.D0*aINV**5*bb1**2*bb2**2 )

      W4bub1b =
     &  + ss1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1*CC1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1 * ( 8.D0*aINV**3*bb1*tau - 2.D0*
     &    aINV**3*bb1**2*hm2**2*tau + 2.D0*aINV**3*bb1**2*hm1**2*tau - 
     &    40.D0*aINV**4*bb1**2 + 8.D0*aINV**4*bb1**3*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**3*hm1**2*tau + 8.D0*aINV**5*bb1**2*bb2**2*hm2**2
     &     + 16.D0*aINV**5*bb1**3*bb2*hm2**2 + 8.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1**2*tau
     &     - 8.D0*aINV**4*bb1**2*bb2*tau + 8.D0*aINV**4*bb1**3*tau + 16.
     &    D0*aINV**5*bb1**3*bb2 )

      W5bub1b =
     &  + ss1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm2**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1*CC1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*
     &    hm2**2 + 2.D0*aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV*hm2**2*qm**2
     &    *tau - 1.D0/8.D0*aINV*hm2**4*tau + 1.D0/2.D0*aINV*hm1**2*
     &    qm**2*tau + 1.D0/8.D0*aINV*hm1**2*hm2**2*tau - 6.D0*aINV**2*
     &    qm**2 - 3.D0/2.D0*aINV**2*hm2**2 - 1.D0/2.D0*aINV**2*hm2**2*
     &    tau + 1.D0/2.D0*aINV**2*hm1**2*tau + 2.D0*aINV**2*bb1*hm2**2*
     &    qm**2*tau + 1.D0/2.D0*aINV**2*bb1*hm2**4*tau - 2.D0*aINV**2*
     &    bb1*hm1**2*qm**2*tau - 1.D0/2.D0*aINV**2*bb1*hm1**2*hm2**2*
     &    tau - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*qm**2 + 1.D0/
     &    2.D0*aINV**3*bb2**2*hm2**4 + 1.D0/2.D0*aINV**3*bb2**2*hm2**4*
     &    tau - 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2*tau + 4.D0*
     &    aINV**3*bb1*hm2**2*tau - 4.D0*aINV**3*bb1*hm1**2*tau + 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm2**4 + 
     &    aINV**3*bb1*bb2*hm2**4*tau - aINV**3*bb1*bb2*hm1**2*hm2**2*
     &    tau + 2.D0*aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*
     &    bb1**2*hm1**2*hm2**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**2*hm2**2
     &    *tau )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV**3*bb1**2*
     &    hm1**4*tau + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*
     &    bb2*hm2**2 - 2.D0*aINV**4*bb1*bb2**2*hm2**4*tau + 2.D0*
     &    aINV**4*bb1*bb2**2*hm1**2*hm2**2*tau + 12.D0*aINV**4*bb1**2*
     &    hm1**2 - 4.D0*aINV**4*bb1**2*bb2*hm2**4*tau + 4.D0*aINV**4*
     &    bb1**2*bb2*hm1**2*hm2**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*
     &    hm2**2*tau + 2.D0*aINV**4*bb1**3*hm1**4*tau - 2.D0*aINV**5*
     &    bb2**4*hm2**4 - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5
     &    *bb1**2*bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5
     &    *bb1**4*hm1**4 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q * (  - aINV*qm**2*tau - 1.D0/4.
     &    D0*aINV*hm2**2*tau - aINV**2*tau - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau + 2.D0*aINV**2*bb1*qm**2*
     &    tau + 1.D0/2.D0*aINV**2*bb1*hm2**2*tau - 4.D0*aINV**3*bb2*tau
     &     + aINV**3*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1*tau + 4.D0*
     &    aINV**3*bb1*bb2*qm**2 + aINV**3*bb1*bb2*hm2**2 + 3.D0*aINV**3
     &    *bb1*bb2*hm2**2*tau - aINV**3*bb1*bb2*hm1**2*tau + aINV**3*
     &    bb1**2*hm1**2*tau + 2.D0*aINV**4*bb2**3*hm2**2*tau + 24.D0*
     &    aINV**4*bb1*bb2 + 2.D0*aINV**4*bb1*bb2**2*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 6.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**5*
     &    bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**5*bb1**3*bb2*hm1**2 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q**2 * ( 2.D0*aINV**3*bb1*bb2*
     &    tau + 4.D0*aINV**4*bb1*bb2**2*tau - 4.D0*aINV**4*bb1**2*bb2*
     &    tau - 8.D0*aINV**5*bb1**2*bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1bW1_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W1bub1b
        
        return
        end
      
C------------  chiC2: matrix element bub1b W2  -----------------
      
	double precision function Fbub1bW2_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1bW2_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1bW2_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW2_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1bW2_psi2schic2_rho=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW2_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub1bW2_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )

      W1bub1b =
     &  + ss1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub1b = W1bub1b + ss1*CC1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D
     &    0*aINV**4*bb1**3*bb2 )
      W1bub1b = W1bub1b + ss1**2*CC1 * ( 16.D0*aINV**4*bb1*bb2**2*tau
     &     + 8.D0*aINV**4*bb1**2*bb2*tau - 4.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*tau + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*tau - 8.D0*
     &    aINV**4*bb1**3*tau - 4.D0*aINV**4*bb1**3*bb2*hm2**2*tau + 4.D0
     &    *aINV**4*bb1**3*bb2*hm1**2*tau - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2*tau - 16.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 16.D0*
     &    aINV**5*bb1**4*bb2*hm2**2*tau - 16.D0*aINV**5*bb1**4*bb2*
     &    hm1**2*tau + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*
     &    aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1bub1b = W1bub1b + ss1**2*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 8.D0*aINV**4*bb1**3*bb2*tau - 16.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 16.D0*aINV**5*bb1**4*bb2*tau + 32.D0*
     &    aINV**6*bb1**3*bb2**3 + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub1b =
     &  + ss1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm2**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0
     &    *aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1*CC1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - 
     &    aINV**2*bb1*bb2*hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*
     &    bb1**2*hm2**2 - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 
     &    4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3
     &    *bb2*hm1**2 + 4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*CC1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 
     &    8.D0*aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau - 2.D0*aINV**2*bb1*qm**2*
     &    tau - 1.D0/2.D0*aINV**2*bb1*hm2**2*tau + aINV**2*bb1*bb2*
     &    hm2**2*qm**2*tau + 1.D0/4.D0*aINV**2*bb1*bb2*hm2**4*tau - 
     &    aINV**2*bb1*bb2*hm1**2*qm**2*tau - 1.D0/4.D0*aINV**2*bb1*bb2*
     &    hm1**2*hm2**2*tau + aINV**2*bb1**2*hm2**2*qm**2*tau + 1.D0/4.D
     &    0*aINV**2*bb1**2*hm2**4*tau - aINV**2*bb1**2*hm1**2*qm**2*tau
     &     - 1.D0/4.D0*aINV**2*bb1**2*hm1**2*hm2**2*tau - 4.D0*aINV**3*
     &    bb2*tau - 4.D0*aINV**3*bb1*tau + 16.D0*aINV**3*bb1*bb2*qm**2
     &     + 4.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*bb2*hm2**2*
     &    tau - 2.D0*aINV**3*bb1*bb2*hm1**2*tau + 16.D0*aINV**3*bb1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*hm2**2 + 2.D0*aINV**3*bb1**2*
     &    hm2**2*tau - 2.D0*aINV**3*bb1**2*hm1**2*tau - 4.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2*tau - aINV**3*bb1**2*bb2*hm2**4*tau
     &     + 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2*tau + aINV**3*bb1**2*
     &    bb2*hm1**2*hm2**2*tau )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb1**3*hm2**2*
     &    qm**2*tau - aINV**3*bb1**3*hm2**4*tau + 4.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2*tau + aINV**3*bb1**3*hm1**2*hm2**2*tau + 2.D0*
     &    aINV**4*bb2**3*hm2**2*tau + 40.D0*aINV**4*bb1*bb2 + 6.D0*
     &    aINV**4*bb1*bb2**2*hm2**2*tau - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm2**4 - aINV**4*bb1*bb2**3
     &    *hm2**4*tau + aINV**4*bb1*bb2**3*hm1**2*hm2**2*tau + 40.D0*
     &    aINV**4*bb1**2 - 8.D0*aINV**4*bb1**2*bb2*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**2*bb2*hm1**2*tau - 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 3.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4*tau + 3.D0*aINV**4*bb1**2*bb2**2
     &    *hm1**2*hm2**2*tau - 12.D0*aINV**4*bb1**3*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**4 - 2.D0*aINV**4*bb1**3*
     &    bb2*hm2**4*tau - 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 
     &    aINV**4*bb1**3*bb2*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( aINV**4*bb1**3*bb2*hm1**2*
     &    hm2**2*tau + aINV**4*bb1**3*bb2*hm1**4*tau - 4.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - aINV**4*bb1**4*hm1**2*hm2**2 - aINV**4*
     &    bb1**4*hm1**2*hm2**2*tau + aINV**4*bb1**4*hm1**4*tau - 32.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 96.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**2*bb2**3*hm2**4*tau - 4.D0*aINV**5
     &    *bb1**2*bb2**3*hm1**2*hm2**2*tau - 64.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 + 12.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2
     &    *hm2**2*tau - 32.D0*aINV**5*bb1**4*hm1**2 + 8.D0*aINV**5*
     &    bb1**4*bb2*hm2**4*tau - 4.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2
     &    *tau - 4.D0*aINV**5*bb1**4*bb2*hm1**4*tau + 4.D0*aINV**5*
     &    bb1**5*hm1**2*hm2**2*tau - 4.D0*aINV**5*bb1**5*hm1**4*tau + 4.
     &    D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**4 + 24.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*
     &    hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2*qm**2
     &    *tau + 1.D0/2.D0*aINV**2*bb1*bb2*hm2**2*tau + 2.D0*aINV**2*
     &    bb1**2*qm**2*tau + 1.D0/2.D0*aINV**2*bb1**2*hm2**2*tau + 4.D0
     &    *aINV**3*bb1*bb2*tau + 4.D0*aINV**3*bb1*bb2**2*qm**2*tau + 
     &    aINV**3*bb1*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1**2*tau - 4.D0
     &    *aINV**3*bb1**3*qm**2*tau - aINV**3*bb1**3*hm2**2*tau + 16.D0
     &    *aINV**4*bb1*bb2**2*tau - 2.D0*aINV**4*bb1*bb2**3*hm2**2*tau
     &     + 4.D0*aINV**4*bb1**2*bb2*tau - 8.D0*aINV**4*bb1**2*bb2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*tau + 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    tau - 12.D0*aINV**4*bb1**3*tau - 8.D0*aINV**4*bb1**3*bb2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**2 - 6.D0*aINV**4*bb1**3*
     &    bb2*hm2**2*tau - 2.D0*aINV**4*bb1**4*hm1**2*tau - 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2*tau - 64.D0*aINV**5*bb1**2*bb2**2
     &     - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2*tau - 64.D0*aINV**5*
     &    bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm2**2*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 
     &    16.D0*aINV**5*bb1**4*bb2*hm2**2*tau - 8.D0*aINV**5*bb1**4*bb2
     &    *hm1**2*tau + 4.D0*aINV**5*bb1**5*hm1**2*tau + 16.D0*aINV**6*
     &    bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 
     &    32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*
     &    bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q**2 * (  - 4.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 4.D0*aINV**4*bb1**3*bb2*tau - 8.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 8.D0*aINV**5*bb1**4*bb2*tau + 16.D0*
     &    aINV**6*bb1**3*bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub1b =
     &  + ss1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1*CC1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb2*tau + 4.D0
     &    *aINV**3*bb1*tau + 2.D0*aINV**3*bb1*bb2*hm2**2*tau - 2.D0*
     &    aINV**3*bb1*bb2*hm1**2*tau + 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 8.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 8.D0*aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*
     &    bb1**2*bb2**2*hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub1b = W3bub1b + ss1**2*CC1*p2q * ( 4.D0*aINV**3*bb1*bb2*tau
     &     + 8.D0*aINV**4*bb1*bb2**2*tau - 8.D0*aINV**4*bb1**2*bb2*tau
     &     - 16.D0*aINV**5*bb1**2*bb2**2 )

      W4bub1b =
     &  + ss1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1*CC1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1 * ( 8.D0*aINV**3*bb1*tau - 2.D0*
     &    aINV**3*bb1**2*hm2**2*tau + 2.D0*aINV**3*bb1**2*hm1**2*tau - 
     &    40.D0*aINV**4*bb1**2 + 8.D0*aINV**4*bb1**3*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**3*hm1**2*tau + 8.D0*aINV**5*bb1**2*bb2**2*hm2**2
     &     + 16.D0*aINV**5*bb1**3*bb2*hm2**2 + 8.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1**2*tau
     &     - 8.D0*aINV**4*bb1**2*bb2*tau + 8.D0*aINV**4*bb1**3*tau + 16.
     &    D0*aINV**5*bb1**3*bb2 )

      W5bub1b =
     &  + ss1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm2**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1*CC1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*
     &    hm2**2 + 2.D0*aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV*hm2**2*qm**2
     &    *tau - 1.D0/8.D0*aINV*hm2**4*tau + 1.D0/2.D0*aINV*hm1**2*
     &    qm**2*tau + 1.D0/8.D0*aINV*hm1**2*hm2**2*tau - 6.D0*aINV**2*
     &    qm**2 - 3.D0/2.D0*aINV**2*hm2**2 - 1.D0/2.D0*aINV**2*hm2**2*
     &    tau + 1.D0/2.D0*aINV**2*hm1**2*tau + 2.D0*aINV**2*bb1*hm2**2*
     &    qm**2*tau + 1.D0/2.D0*aINV**2*bb1*hm2**4*tau - 2.D0*aINV**2*
     &    bb1*hm1**2*qm**2*tau - 1.D0/2.D0*aINV**2*bb1*hm1**2*hm2**2*
     &    tau - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*qm**2 + 1.D0/
     &    2.D0*aINV**3*bb2**2*hm2**4 + 1.D0/2.D0*aINV**3*bb2**2*hm2**4*
     &    tau - 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2*tau + 4.D0*
     &    aINV**3*bb1*hm2**2*tau - 4.D0*aINV**3*bb1*hm1**2*tau + 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm2**4 + 
     &    aINV**3*bb1*bb2*hm2**4*tau - aINV**3*bb1*bb2*hm1**2*hm2**2*
     &    tau + 2.D0*aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*
     &    bb1**2*hm1**2*hm2**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**2*hm2**2
     &    *tau )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV**3*bb1**2*
     &    hm1**4*tau + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*
     &    bb2*hm2**2 - 2.D0*aINV**4*bb1*bb2**2*hm2**4*tau + 2.D0*
     &    aINV**4*bb1*bb2**2*hm1**2*hm2**2*tau + 12.D0*aINV**4*bb1**2*
     &    hm1**2 - 4.D0*aINV**4*bb1**2*bb2*hm2**4*tau + 4.D0*aINV**4*
     &    bb1**2*bb2*hm1**2*hm2**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*
     &    hm2**2*tau + 2.D0*aINV**4*bb1**3*hm1**4*tau - 2.D0*aINV**5*
     &    bb2**4*hm2**4 - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5
     &    *bb1**2*bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5
     &    *bb1**4*hm1**4 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q * (  - aINV*qm**2*tau - 1.D0/4.
     &    D0*aINV*hm2**2*tau - aINV**2*tau - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau + 2.D0*aINV**2*bb1*qm**2*
     &    tau + 1.D0/2.D0*aINV**2*bb1*hm2**2*tau - 4.D0*aINV**3*bb2*tau
     &     + aINV**3*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1*tau + 4.D0*
     &    aINV**3*bb1*bb2*qm**2 + aINV**3*bb1*bb2*hm2**2 + 3.D0*aINV**3
     &    *bb1*bb2*hm2**2*tau - aINV**3*bb1*bb2*hm1**2*tau + aINV**3*
     &    bb1**2*hm1**2*tau + 2.D0*aINV**4*bb2**3*hm2**2*tau + 24.D0*
     &    aINV**4*bb1*bb2 + 2.D0*aINV**4*bb1*bb2**2*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 6.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**5*
     &    bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**5*bb1**3*bb2*hm1**2 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q**2 * ( 2.D0*aINV**3*bb1*bb2*
     &    tau + 4.D0*aINV**4*bb1*bb2**2*tau - 4.D0*aINV**4*bb1**2*bb2*
     &    tau - 8.D0*aINV**5*bb1**2*bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1bW2_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W2bub1b
        
        return
        end
      
C------------  chiC2: matrix element bub1b W3  -----------------
      
	double precision function Fbub1bW3_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1bW3_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1bW3_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW3_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1bW3_psi2schic2_rho=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW3_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub1bW3_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )

      W1bub1b =
     &  + ss1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub1b = W1bub1b + ss1*CC1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D
     &    0*aINV**4*bb1**3*bb2 )
      W1bub1b = W1bub1b + ss1**2*CC1 * ( 16.D0*aINV**4*bb1*bb2**2*tau
     &     + 8.D0*aINV**4*bb1**2*bb2*tau - 4.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*tau + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*tau - 8.D0*
     &    aINV**4*bb1**3*tau - 4.D0*aINV**4*bb1**3*bb2*hm2**2*tau + 4.D0
     &    *aINV**4*bb1**3*bb2*hm1**2*tau - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2*tau - 16.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 16.D0*
     &    aINV**5*bb1**4*bb2*hm2**2*tau - 16.D0*aINV**5*bb1**4*bb2*
     &    hm1**2*tau + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*
     &    aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1bub1b = W1bub1b + ss1**2*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 8.D0*aINV**4*bb1**3*bb2*tau - 16.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 16.D0*aINV**5*bb1**4*bb2*tau + 32.D0*
     &    aINV**6*bb1**3*bb2**3 + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub1b =
     &  + ss1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm2**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0
     &    *aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1*CC1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - 
     &    aINV**2*bb1*bb2*hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*
     &    bb1**2*hm2**2 - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 
     &    4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3
     &    *bb2*hm1**2 + 4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*CC1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 
     &    8.D0*aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau - 2.D0*aINV**2*bb1*qm**2*
     &    tau - 1.D0/2.D0*aINV**2*bb1*hm2**2*tau + aINV**2*bb1*bb2*
     &    hm2**2*qm**2*tau + 1.D0/4.D0*aINV**2*bb1*bb2*hm2**4*tau - 
     &    aINV**2*bb1*bb2*hm1**2*qm**2*tau - 1.D0/4.D0*aINV**2*bb1*bb2*
     &    hm1**2*hm2**2*tau + aINV**2*bb1**2*hm2**2*qm**2*tau + 1.D0/4.D
     &    0*aINV**2*bb1**2*hm2**4*tau - aINV**2*bb1**2*hm1**2*qm**2*tau
     &     - 1.D0/4.D0*aINV**2*bb1**2*hm1**2*hm2**2*tau - 4.D0*aINV**3*
     &    bb2*tau - 4.D0*aINV**3*bb1*tau + 16.D0*aINV**3*bb1*bb2*qm**2
     &     + 4.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*bb2*hm2**2*
     &    tau - 2.D0*aINV**3*bb1*bb2*hm1**2*tau + 16.D0*aINV**3*bb1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*hm2**2 + 2.D0*aINV**3*bb1**2*
     &    hm2**2*tau - 2.D0*aINV**3*bb1**2*hm1**2*tau - 4.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2*tau - aINV**3*bb1**2*bb2*hm2**4*tau
     &     + 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2*tau + aINV**3*bb1**2*
     &    bb2*hm1**2*hm2**2*tau )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb1**3*hm2**2*
     &    qm**2*tau - aINV**3*bb1**3*hm2**4*tau + 4.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2*tau + aINV**3*bb1**3*hm1**2*hm2**2*tau + 2.D0*
     &    aINV**4*bb2**3*hm2**2*tau + 40.D0*aINV**4*bb1*bb2 + 6.D0*
     &    aINV**4*bb1*bb2**2*hm2**2*tau - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm2**4 - aINV**4*bb1*bb2**3
     &    *hm2**4*tau + aINV**4*bb1*bb2**3*hm1**2*hm2**2*tau + 40.D0*
     &    aINV**4*bb1**2 - 8.D0*aINV**4*bb1**2*bb2*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**2*bb2*hm1**2*tau - 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 3.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4*tau + 3.D0*aINV**4*bb1**2*bb2**2
     &    *hm1**2*hm2**2*tau - 12.D0*aINV**4*bb1**3*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**4 - 2.D0*aINV**4*bb1**3*
     &    bb2*hm2**4*tau - 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 
     &    aINV**4*bb1**3*bb2*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( aINV**4*bb1**3*bb2*hm1**2*
     &    hm2**2*tau + aINV**4*bb1**3*bb2*hm1**4*tau - 4.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - aINV**4*bb1**4*hm1**2*hm2**2 - aINV**4*
     &    bb1**4*hm1**2*hm2**2*tau + aINV**4*bb1**4*hm1**4*tau - 32.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 96.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**2*bb2**3*hm2**4*tau - 4.D0*aINV**5
     &    *bb1**2*bb2**3*hm1**2*hm2**2*tau - 64.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 + 12.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2
     &    *hm2**2*tau - 32.D0*aINV**5*bb1**4*hm1**2 + 8.D0*aINV**5*
     &    bb1**4*bb2*hm2**4*tau - 4.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2
     &    *tau - 4.D0*aINV**5*bb1**4*bb2*hm1**4*tau + 4.D0*aINV**5*
     &    bb1**5*hm1**2*hm2**2*tau - 4.D0*aINV**5*bb1**5*hm1**4*tau + 4.
     &    D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**4 + 24.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*
     &    hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2*qm**2
     &    *tau + 1.D0/2.D0*aINV**2*bb1*bb2*hm2**2*tau + 2.D0*aINV**2*
     &    bb1**2*qm**2*tau + 1.D0/2.D0*aINV**2*bb1**2*hm2**2*tau + 4.D0
     &    *aINV**3*bb1*bb2*tau + 4.D0*aINV**3*bb1*bb2**2*qm**2*tau + 
     &    aINV**3*bb1*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1**2*tau - 4.D0
     &    *aINV**3*bb1**3*qm**2*tau - aINV**3*bb1**3*hm2**2*tau + 16.D0
     &    *aINV**4*bb1*bb2**2*tau - 2.D0*aINV**4*bb1*bb2**3*hm2**2*tau
     &     + 4.D0*aINV**4*bb1**2*bb2*tau - 8.D0*aINV**4*bb1**2*bb2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*tau + 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    tau - 12.D0*aINV**4*bb1**3*tau - 8.D0*aINV**4*bb1**3*bb2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**2 - 6.D0*aINV**4*bb1**3*
     &    bb2*hm2**2*tau - 2.D0*aINV**4*bb1**4*hm1**2*tau - 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2*tau - 64.D0*aINV**5*bb1**2*bb2**2
     &     - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2*tau - 64.D0*aINV**5*
     &    bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm2**2*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 
     &    16.D0*aINV**5*bb1**4*bb2*hm2**2*tau - 8.D0*aINV**5*bb1**4*bb2
     &    *hm1**2*tau + 4.D0*aINV**5*bb1**5*hm1**2*tau + 16.D0*aINV**6*
     &    bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 
     &    32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*
     &    bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q**2 * (  - 4.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 4.D0*aINV**4*bb1**3*bb2*tau - 8.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 8.D0*aINV**5*bb1**4*bb2*tau + 16.D0*
     &    aINV**6*bb1**3*bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub1b =
     &  + ss1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1*CC1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb2*tau + 4.D0
     &    *aINV**3*bb1*tau + 2.D0*aINV**3*bb1*bb2*hm2**2*tau - 2.D0*
     &    aINV**3*bb1*bb2*hm1**2*tau + 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 8.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 8.D0*aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*
     &    bb1**2*bb2**2*hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub1b = W3bub1b + ss1**2*CC1*p2q * ( 4.D0*aINV**3*bb1*bb2*tau
     &     + 8.D0*aINV**4*bb1*bb2**2*tau - 8.D0*aINV**4*bb1**2*bb2*tau
     &     - 16.D0*aINV**5*bb1**2*bb2**2 )

      W4bub1b =
     &  + ss1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1*CC1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1 * ( 8.D0*aINV**3*bb1*tau - 2.D0*
     &    aINV**3*bb1**2*hm2**2*tau + 2.D0*aINV**3*bb1**2*hm1**2*tau - 
     &    40.D0*aINV**4*bb1**2 + 8.D0*aINV**4*bb1**3*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**3*hm1**2*tau + 8.D0*aINV**5*bb1**2*bb2**2*hm2**2
     &     + 16.D0*aINV**5*bb1**3*bb2*hm2**2 + 8.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1**2*tau
     &     - 8.D0*aINV**4*bb1**2*bb2*tau + 8.D0*aINV**4*bb1**3*tau + 16.
     &    D0*aINV**5*bb1**3*bb2 )

      W5bub1b =
     &  + ss1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm2**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1*CC1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*
     &    hm2**2 + 2.D0*aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV*hm2**2*qm**2
     &    *tau - 1.D0/8.D0*aINV*hm2**4*tau + 1.D0/2.D0*aINV*hm1**2*
     &    qm**2*tau + 1.D0/8.D0*aINV*hm1**2*hm2**2*tau - 6.D0*aINV**2*
     &    qm**2 - 3.D0/2.D0*aINV**2*hm2**2 - 1.D0/2.D0*aINV**2*hm2**2*
     &    tau + 1.D0/2.D0*aINV**2*hm1**2*tau + 2.D0*aINV**2*bb1*hm2**2*
     &    qm**2*tau + 1.D0/2.D0*aINV**2*bb1*hm2**4*tau - 2.D0*aINV**2*
     &    bb1*hm1**2*qm**2*tau - 1.D0/2.D0*aINV**2*bb1*hm1**2*hm2**2*
     &    tau - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*qm**2 + 1.D0/
     &    2.D0*aINV**3*bb2**2*hm2**4 + 1.D0/2.D0*aINV**3*bb2**2*hm2**4*
     &    tau - 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2*tau + 4.D0*
     &    aINV**3*bb1*hm2**2*tau - 4.D0*aINV**3*bb1*hm1**2*tau + 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm2**4 + 
     &    aINV**3*bb1*bb2*hm2**4*tau - aINV**3*bb1*bb2*hm1**2*hm2**2*
     &    tau + 2.D0*aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*
     &    bb1**2*hm1**2*hm2**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**2*hm2**2
     &    *tau )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV**3*bb1**2*
     &    hm1**4*tau + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*
     &    bb2*hm2**2 - 2.D0*aINV**4*bb1*bb2**2*hm2**4*tau + 2.D0*
     &    aINV**4*bb1*bb2**2*hm1**2*hm2**2*tau + 12.D0*aINV**4*bb1**2*
     &    hm1**2 - 4.D0*aINV**4*bb1**2*bb2*hm2**4*tau + 4.D0*aINV**4*
     &    bb1**2*bb2*hm1**2*hm2**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*
     &    hm2**2*tau + 2.D0*aINV**4*bb1**3*hm1**4*tau - 2.D0*aINV**5*
     &    bb2**4*hm2**4 - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5
     &    *bb1**2*bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5
     &    *bb1**4*hm1**4 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q * (  - aINV*qm**2*tau - 1.D0/4.
     &    D0*aINV*hm2**2*tau - aINV**2*tau - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau + 2.D0*aINV**2*bb1*qm**2*
     &    tau + 1.D0/2.D0*aINV**2*bb1*hm2**2*tau - 4.D0*aINV**3*bb2*tau
     &     + aINV**3*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1*tau + 4.D0*
     &    aINV**3*bb1*bb2*qm**2 + aINV**3*bb1*bb2*hm2**2 + 3.D0*aINV**3
     &    *bb1*bb2*hm2**2*tau - aINV**3*bb1*bb2*hm1**2*tau + aINV**3*
     &    bb1**2*hm1**2*tau + 2.D0*aINV**4*bb2**3*hm2**2*tau + 24.D0*
     &    aINV**4*bb1*bb2 + 2.D0*aINV**4*bb1*bb2**2*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 6.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**5*
     &    bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**5*bb1**3*bb2*hm1**2 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q**2 * ( 2.D0*aINV**3*bb1*bb2*
     &    tau + 4.D0*aINV**4*bb1*bb2**2*tau - 4.D0*aINV**4*bb1**2*bb2*
     &    tau - 8.D0*aINV**5*bb1**2*bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1bW3_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W3bub1b
        
        return
        end
      
C------------  chiC2: matrix element bub1b W4  -----------------
      
	double precision function Fbub1bW4_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1bW4_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1bW4_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW4_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1bW4_psi2schic2_rho=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW4_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub1bW4_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )

      W1bub1b =
     &  + ss1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub1b = W1bub1b + ss1*CC1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D
     &    0*aINV**4*bb1**3*bb2 )
      W1bub1b = W1bub1b + ss1**2*CC1 * ( 16.D0*aINV**4*bb1*bb2**2*tau
     &     + 8.D0*aINV**4*bb1**2*bb2*tau - 4.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*tau + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*tau - 8.D0*
     &    aINV**4*bb1**3*tau - 4.D0*aINV**4*bb1**3*bb2*hm2**2*tau + 4.D0
     &    *aINV**4*bb1**3*bb2*hm1**2*tau - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2*tau - 16.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 16.D0*
     &    aINV**5*bb1**4*bb2*hm2**2*tau - 16.D0*aINV**5*bb1**4*bb2*
     &    hm1**2*tau + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*
     &    aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1bub1b = W1bub1b + ss1**2*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 8.D0*aINV**4*bb1**3*bb2*tau - 16.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 16.D0*aINV**5*bb1**4*bb2*tau + 32.D0*
     &    aINV**6*bb1**3*bb2**3 + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub1b =
     &  + ss1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm2**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0
     &    *aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1*CC1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - 
     &    aINV**2*bb1*bb2*hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*
     &    bb1**2*hm2**2 - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 
     &    4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3
     &    *bb2*hm1**2 + 4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*CC1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 
     &    8.D0*aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau - 2.D0*aINV**2*bb1*qm**2*
     &    tau - 1.D0/2.D0*aINV**2*bb1*hm2**2*tau + aINV**2*bb1*bb2*
     &    hm2**2*qm**2*tau + 1.D0/4.D0*aINV**2*bb1*bb2*hm2**4*tau - 
     &    aINV**2*bb1*bb2*hm1**2*qm**2*tau - 1.D0/4.D0*aINV**2*bb1*bb2*
     &    hm1**2*hm2**2*tau + aINV**2*bb1**2*hm2**2*qm**2*tau + 1.D0/4.D
     &    0*aINV**2*bb1**2*hm2**4*tau - aINV**2*bb1**2*hm1**2*qm**2*tau
     &     - 1.D0/4.D0*aINV**2*bb1**2*hm1**2*hm2**2*tau - 4.D0*aINV**3*
     &    bb2*tau - 4.D0*aINV**3*bb1*tau + 16.D0*aINV**3*bb1*bb2*qm**2
     &     + 4.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*bb2*hm2**2*
     &    tau - 2.D0*aINV**3*bb1*bb2*hm1**2*tau + 16.D0*aINV**3*bb1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*hm2**2 + 2.D0*aINV**3*bb1**2*
     &    hm2**2*tau - 2.D0*aINV**3*bb1**2*hm1**2*tau - 4.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2*tau - aINV**3*bb1**2*bb2*hm2**4*tau
     &     + 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2*tau + aINV**3*bb1**2*
     &    bb2*hm1**2*hm2**2*tau )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb1**3*hm2**2*
     &    qm**2*tau - aINV**3*bb1**3*hm2**4*tau + 4.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2*tau + aINV**3*bb1**3*hm1**2*hm2**2*tau + 2.D0*
     &    aINV**4*bb2**3*hm2**2*tau + 40.D0*aINV**4*bb1*bb2 + 6.D0*
     &    aINV**4*bb1*bb2**2*hm2**2*tau - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm2**4 - aINV**4*bb1*bb2**3
     &    *hm2**4*tau + aINV**4*bb1*bb2**3*hm1**2*hm2**2*tau + 40.D0*
     &    aINV**4*bb1**2 - 8.D0*aINV**4*bb1**2*bb2*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**2*bb2*hm1**2*tau - 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 3.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4*tau + 3.D0*aINV**4*bb1**2*bb2**2
     &    *hm1**2*hm2**2*tau - 12.D0*aINV**4*bb1**3*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**4 - 2.D0*aINV**4*bb1**3*
     &    bb2*hm2**4*tau - 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 
     &    aINV**4*bb1**3*bb2*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( aINV**4*bb1**3*bb2*hm1**2*
     &    hm2**2*tau + aINV**4*bb1**3*bb2*hm1**4*tau - 4.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - aINV**4*bb1**4*hm1**2*hm2**2 - aINV**4*
     &    bb1**4*hm1**2*hm2**2*tau + aINV**4*bb1**4*hm1**4*tau - 32.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 96.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**2*bb2**3*hm2**4*tau - 4.D0*aINV**5
     &    *bb1**2*bb2**3*hm1**2*hm2**2*tau - 64.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 + 12.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2
     &    *hm2**2*tau - 32.D0*aINV**5*bb1**4*hm1**2 + 8.D0*aINV**5*
     &    bb1**4*bb2*hm2**4*tau - 4.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2
     &    *tau - 4.D0*aINV**5*bb1**4*bb2*hm1**4*tau + 4.D0*aINV**5*
     &    bb1**5*hm1**2*hm2**2*tau - 4.D0*aINV**5*bb1**5*hm1**4*tau + 4.
     &    D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**4 + 24.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*
     &    hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2*qm**2
     &    *tau + 1.D0/2.D0*aINV**2*bb1*bb2*hm2**2*tau + 2.D0*aINV**2*
     &    bb1**2*qm**2*tau + 1.D0/2.D0*aINV**2*bb1**2*hm2**2*tau + 4.D0
     &    *aINV**3*bb1*bb2*tau + 4.D0*aINV**3*bb1*bb2**2*qm**2*tau + 
     &    aINV**3*bb1*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1**2*tau - 4.D0
     &    *aINV**3*bb1**3*qm**2*tau - aINV**3*bb1**3*hm2**2*tau + 16.D0
     &    *aINV**4*bb1*bb2**2*tau - 2.D0*aINV**4*bb1*bb2**3*hm2**2*tau
     &     + 4.D0*aINV**4*bb1**2*bb2*tau - 8.D0*aINV**4*bb1**2*bb2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*tau + 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    tau - 12.D0*aINV**4*bb1**3*tau - 8.D0*aINV**4*bb1**3*bb2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**2 - 6.D0*aINV**4*bb1**3*
     &    bb2*hm2**2*tau - 2.D0*aINV**4*bb1**4*hm1**2*tau - 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2*tau - 64.D0*aINV**5*bb1**2*bb2**2
     &     - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2*tau - 64.D0*aINV**5*
     &    bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm2**2*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 
     &    16.D0*aINV**5*bb1**4*bb2*hm2**2*tau - 8.D0*aINV**5*bb1**4*bb2
     &    *hm1**2*tau + 4.D0*aINV**5*bb1**5*hm1**2*tau + 16.D0*aINV**6*
     &    bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 
     &    32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*
     &    bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q**2 * (  - 4.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 4.D0*aINV**4*bb1**3*bb2*tau - 8.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 8.D0*aINV**5*bb1**4*bb2*tau + 16.D0*
     &    aINV**6*bb1**3*bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub1b =
     &  + ss1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1*CC1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb2*tau + 4.D0
     &    *aINV**3*bb1*tau + 2.D0*aINV**3*bb1*bb2*hm2**2*tau - 2.D0*
     &    aINV**3*bb1*bb2*hm1**2*tau + 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 8.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 8.D0*aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*
     &    bb1**2*bb2**2*hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub1b = W3bub1b + ss1**2*CC1*p2q * ( 4.D0*aINV**3*bb1*bb2*tau
     &     + 8.D0*aINV**4*bb1*bb2**2*tau - 8.D0*aINV**4*bb1**2*bb2*tau
     &     - 16.D0*aINV**5*bb1**2*bb2**2 )

      W4bub1b =
     &  + ss1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1*CC1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1 * ( 8.D0*aINV**3*bb1*tau - 2.D0*
     &    aINV**3*bb1**2*hm2**2*tau + 2.D0*aINV**3*bb1**2*hm1**2*tau - 
     &    40.D0*aINV**4*bb1**2 + 8.D0*aINV**4*bb1**3*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**3*hm1**2*tau + 8.D0*aINV**5*bb1**2*bb2**2*hm2**2
     &     + 16.D0*aINV**5*bb1**3*bb2*hm2**2 + 8.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1**2*tau
     &     - 8.D0*aINV**4*bb1**2*bb2*tau + 8.D0*aINV**4*bb1**3*tau + 16.
     &    D0*aINV**5*bb1**3*bb2 )

      W5bub1b =
     &  + ss1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm2**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1*CC1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*
     &    hm2**2 + 2.D0*aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV*hm2**2*qm**2
     &    *tau - 1.D0/8.D0*aINV*hm2**4*tau + 1.D0/2.D0*aINV*hm1**2*
     &    qm**2*tau + 1.D0/8.D0*aINV*hm1**2*hm2**2*tau - 6.D0*aINV**2*
     &    qm**2 - 3.D0/2.D0*aINV**2*hm2**2 - 1.D0/2.D0*aINV**2*hm2**2*
     &    tau + 1.D0/2.D0*aINV**2*hm1**2*tau + 2.D0*aINV**2*bb1*hm2**2*
     &    qm**2*tau + 1.D0/2.D0*aINV**2*bb1*hm2**4*tau - 2.D0*aINV**2*
     &    bb1*hm1**2*qm**2*tau - 1.D0/2.D0*aINV**2*bb1*hm1**2*hm2**2*
     &    tau - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*qm**2 + 1.D0/
     &    2.D0*aINV**3*bb2**2*hm2**4 + 1.D0/2.D0*aINV**3*bb2**2*hm2**4*
     &    tau - 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2*tau + 4.D0*
     &    aINV**3*bb1*hm2**2*tau - 4.D0*aINV**3*bb1*hm1**2*tau + 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm2**4 + 
     &    aINV**3*bb1*bb2*hm2**4*tau - aINV**3*bb1*bb2*hm1**2*hm2**2*
     &    tau + 2.D0*aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*
     &    bb1**2*hm1**2*hm2**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**2*hm2**2
     &    *tau )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV**3*bb1**2*
     &    hm1**4*tau + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*
     &    bb2*hm2**2 - 2.D0*aINV**4*bb1*bb2**2*hm2**4*tau + 2.D0*
     &    aINV**4*bb1*bb2**2*hm1**2*hm2**2*tau + 12.D0*aINV**4*bb1**2*
     &    hm1**2 - 4.D0*aINV**4*bb1**2*bb2*hm2**4*tau + 4.D0*aINV**4*
     &    bb1**2*bb2*hm1**2*hm2**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*
     &    hm2**2*tau + 2.D0*aINV**4*bb1**3*hm1**4*tau - 2.D0*aINV**5*
     &    bb2**4*hm2**4 - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5
     &    *bb1**2*bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5
     &    *bb1**4*hm1**4 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q * (  - aINV*qm**2*tau - 1.D0/4.
     &    D0*aINV*hm2**2*tau - aINV**2*tau - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau + 2.D0*aINV**2*bb1*qm**2*
     &    tau + 1.D0/2.D0*aINV**2*bb1*hm2**2*tau - 4.D0*aINV**3*bb2*tau
     &     + aINV**3*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1*tau + 4.D0*
     &    aINV**3*bb1*bb2*qm**2 + aINV**3*bb1*bb2*hm2**2 + 3.D0*aINV**3
     &    *bb1*bb2*hm2**2*tau - aINV**3*bb1*bb2*hm1**2*tau + aINV**3*
     &    bb1**2*hm1**2*tau + 2.D0*aINV**4*bb2**3*hm2**2*tau + 24.D0*
     &    aINV**4*bb1*bb2 + 2.D0*aINV**4*bb1*bb2**2*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 6.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**5*
     &    bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**5*bb1**3*bb2*hm1**2 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q**2 * ( 2.D0*aINV**3*bb1*bb2*
     &    tau + 4.D0*aINV**4*bb1*bb2**2*tau - 4.D0*aINV**4*bb1**2*bb2*
     &    tau - 8.D0*aINV**5*bb1**2*bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1bW4_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W4bub1b
        
        return
        end
      
C------------  chiC2: matrix element bub1b W5  -----------------
      
	double precision function Fbub1bW5_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub1bW5_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub1bW5_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub1bW5_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub1bW5_psi2schic2_rho=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub1bW5_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub1bW5_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + 1.D0/2.D0*ss1*tau

      bb2 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb2 = bb2 - 1.D0/2.D0*ss1*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm2**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss1*alp2*tau + 1.D0/4.D0*
     &    ss1*alp1*tau )
      z = z + aINV*hm2**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss1*alp2*tau - 1.D0/4.D0*ss1*
     &    alp1*tau )

      W1bub1b =
     &  + ss1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub1b = W1bub1b + ss1*CC1 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D
     &    0*aINV**4*bb1**3*bb2 )
      W1bub1b = W1bub1b + ss1**2*CC1 * ( 16.D0*aINV**4*bb1*bb2**2*tau
     &     + 8.D0*aINV**4*bb1**2*bb2*tau - 4.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*tau + 4.D0*aINV**4*bb1**2*bb2**2*hm1**2*tau - 8.D0*
     &    aINV**4*bb1**3*tau - 4.D0*aINV**4*bb1**3*bb2*hm2**2*tau + 4.D0
     &    *aINV**4*bb1**3*bb2*hm1**2*tau - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**5*bb1**3*bb2**2*
     &    hm2**2*tau - 16.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 16.D0*
     &    aINV**5*bb1**4*bb2*hm2**2*tau - 16.D0*aINV**5*bb1**4*bb2*
     &    hm1**2*tau + 16.D0*aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*
     &    aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*
     &    bb1**5*bb2*hm1**2 )
      W1bub1b = W1bub1b + ss1**2*CC1*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 8.D0*aINV**4*bb1**3*bb2*tau - 16.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 16.D0*aINV**5*bb1**4*bb2*tau + 32.D0*
     &    aINV**6*bb1**3*bb2**3 + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub1b =
     &  + ss1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm2**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0
     &    *aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1*CC1 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - 
     &    aINV**2*bb1*bb2*hm2**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*
     &    bb1**2*hm2**2 - 8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 
     &    4.D0*aINV**4*bb1*bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2 + 8.D0*aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3
     &    *bb2*hm1**2 + 4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub1b = W2bub1b + ss1*CC1*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 
     &    8.D0*aINV**4*bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau - 2.D0*aINV**2*bb1*qm**2*
     &    tau - 1.D0/2.D0*aINV**2*bb1*hm2**2*tau + aINV**2*bb1*bb2*
     &    hm2**2*qm**2*tau + 1.D0/4.D0*aINV**2*bb1*bb2*hm2**4*tau - 
     &    aINV**2*bb1*bb2*hm1**2*qm**2*tau - 1.D0/4.D0*aINV**2*bb1*bb2*
     &    hm1**2*hm2**2*tau + aINV**2*bb1**2*hm2**2*qm**2*tau + 1.D0/4.D
     &    0*aINV**2*bb1**2*hm2**4*tau - aINV**2*bb1**2*hm1**2*qm**2*tau
     &     - 1.D0/4.D0*aINV**2*bb1**2*hm1**2*hm2**2*tau - 4.D0*aINV**3*
     &    bb2*tau - 4.D0*aINV**3*bb1*tau + 16.D0*aINV**3*bb1*bb2*qm**2
     &     + 4.D0*aINV**3*bb1*bb2*hm2**2 + 2.D0*aINV**3*bb1*bb2*hm2**2*
     &    tau - 2.D0*aINV**3*bb1*bb2*hm1**2*tau + 16.D0*aINV**3*bb1**2*
     &    qm**2 + 4.D0*aINV**3*bb1**2*hm2**2 + 2.D0*aINV**3*bb1**2*
     &    hm2**2*tau - 2.D0*aINV**3*bb1**2*hm1**2*tau - 4.D0*aINV**3*
     &    bb1**2*bb2*hm2**2*qm**2*tau - aINV**3*bb1**2*bb2*hm2**4*tau
     &     + 4.D0*aINV**3*bb1**2*bb2*hm1**2*qm**2*tau + aINV**3*bb1**2*
     &    bb2*hm1**2*hm2**2*tau )
      W2bub1b = W2bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb1**3*hm2**2*
     &    qm**2*tau - aINV**3*bb1**3*hm2**4*tau + 4.D0*aINV**3*bb1**3*
     &    hm1**2*qm**2*tau + aINV**3*bb1**3*hm1**2*hm2**2*tau + 2.D0*
     &    aINV**4*bb2**3*hm2**2*tau + 40.D0*aINV**4*bb1*bb2 + 6.D0*
     &    aINV**4*bb1*bb2**2*hm2**2*tau - 4.D0*aINV**4*bb1*bb2**3*
     &    hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm2**4 - aINV**4*bb1*bb2**3
     &    *hm2**4*tau + aINV**4*bb1*bb2**3*hm1**2*hm2**2*tau + 40.D0*
     &    aINV**4*bb1**2 - 8.D0*aINV**4*bb1**2*bb2*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**2*bb2*hm1**2*tau - 12.D0*aINV**4*bb1**2*bb2**2*
     &    hm2**2*qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm2**4 - 3.D0*
     &    aINV**4*bb1**2*bb2**2*hm2**4*tau + 3.D0*aINV**4*bb1**2*bb2**2
     &    *hm1**2*hm2**2*tau - 12.D0*aINV**4*bb1**3*hm2**2*tau + 14.D0*
     &    aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**4*bb1**3*bb2*hm2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**4 - 2.D0*aINV**4*bb1**3*
     &    bb2*hm2**4*tau - 4.D0*aINV**4*bb1**3*bb2*hm1**2*qm**2 - 
     &    aINV**4*bb1**3*bb2*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( aINV**4*bb1**3*bb2*hm1**2*
     &    hm2**2*tau + aINV**4*bb1**3*bb2*hm1**4*tau - 4.D0*aINV**4*
     &    bb1**4*hm1**2*qm**2 - aINV**4*bb1**4*hm1**2*hm2**2 - aINV**4*
     &    bb1**4*hm1**2*hm2**2*tau + aINV**4*bb1**4*hm1**4*tau - 32.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 96.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 + 4.D0*aINV**5*bb1**2*bb2**3*hm2**4*tau - 4.D0*aINV**5
     &    *bb1**2*bb2**3*hm1**2*hm2**2*tau - 64.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 + 12.D0*aINV**5*
     &    bb1**3*bb2**2*hm2**4*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2
     &    *hm2**2*tau - 32.D0*aINV**5*bb1**4*hm1**2 + 8.D0*aINV**5*
     &    bb1**4*bb2*hm2**4*tau - 4.D0*aINV**5*bb1**4*bb2*hm1**2*hm2**2
     &    *tau - 4.D0*aINV**5*bb1**4*bb2*hm1**4*tau + 4.D0*aINV**5*
     &    bb1**5*hm1**2*hm2**2*tau - 4.D0*aINV**5*bb1**5*hm1**4*tau + 4.
     &    D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*hm2**4 + 8.D0*aINV**6*
     &    bb1**3*bb2**3*hm1**2*hm2**2 )
      W2bub1b = W2bub1b + ss1**2*CC1 * ( 16.D0*aINV**6*bb1**4*bb2**2*
     &    hm2**4 + 24.D0*aINV**6*bb1**4*bb2**2*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0*aINV**6*bb1**5*bb2*
     &    hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 2.D0*aINV**2*bb1*bb2*qm**2
     &    *tau + 1.D0/2.D0*aINV**2*bb1*bb2*hm2**2*tau + 2.D0*aINV**2*
     &    bb1**2*qm**2*tau + 1.D0/2.D0*aINV**2*bb1**2*hm2**2*tau + 4.D0
     &    *aINV**3*bb1*bb2*tau + 4.D0*aINV**3*bb1*bb2**2*qm**2*tau + 
     &    aINV**3*bb1*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1**2*tau - 4.D0
     &    *aINV**3*bb1**3*qm**2*tau - aINV**3*bb1**3*hm2**2*tau + 16.D0
     &    *aINV**4*bb1*bb2**2*tau - 2.D0*aINV**4*bb1*bb2**3*hm2**2*tau
     &     + 4.D0*aINV**4*bb1**2*bb2*tau - 8.D0*aINV**4*bb1**2*bb2**2*
     &    qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm2**2 - 8.D0*aINV**4*
     &    bb1**2*bb2**2*hm2**2*tau + 2.D0*aINV**4*bb1**2*bb2**2*hm1**2*
     &    tau - 12.D0*aINV**4*bb1**3*tau - 8.D0*aINV**4*bb1**3*bb2*
     &    qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm2**2 - 6.D0*aINV**4*bb1**3*
     &    bb2*hm2**2*tau - 2.D0*aINV**4*bb1**4*hm1**2*tau - 4.D0*
     &    aINV**5*bb1*bb2**4*hm2**2*tau - 64.D0*aINV**5*bb1**2*bb2**2
     &     - 8.D0*aINV**5*bb1**2*bb2**3*hm2**2*tau - 64.D0*aINV**5*
     &    bb1**3*bb2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q * ( 12.D0*aINV**5*bb1**3*
     &    bb2**2*hm2**2*tau - 12.D0*aINV**5*bb1**3*bb2**2*hm1**2*tau + 
     &    16.D0*aINV**5*bb1**4*bb2*hm2**2*tau - 8.D0*aINV**5*bb1**4*bb2
     &    *hm1**2*tau + 4.D0*aINV**5*bb1**5*hm1**2*tau + 16.D0*aINV**6*
     &    bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 
     &    32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*
     &    bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub1b = W2bub1b + ss1**2*CC1*p2q**2 * (  - 4.D0*aINV**4*bb1**2*
     &    bb2**2*tau - 4.D0*aINV**4*bb1**3*bb2*tau - 8.D0*aINV**5*
     &    bb1**2*bb2**3*tau + 8.D0*aINV**5*bb1**4*bb2*tau + 16.D0*
     &    aINV**6*bb1**3*bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub1b =
     &  + ss1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1*CC1 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub1b = W3bub1b + ss1**2*CC1 * (  - 4.D0*aINV**3*bb2*tau + 4.D0
     &    *aINV**3*bb1*tau + 2.D0*aINV**3*bb1*bb2*hm2**2*tau - 2.D0*
     &    aINV**3*bb1*bb2*hm1**2*tau + 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 8.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 8.D0*aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*
     &    bb1**2*bb2**2*hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub1b = W3bub1b + ss1**2*CC1*p2q * ( 4.D0*aINV**3*bb1*bb2*tau
     &     + 8.D0*aINV**4*bb1*bb2**2*tau - 8.D0*aINV**4*bb1**2*bb2*tau
     &     - 16.D0*aINV**5*bb1**2*bb2**2 )

      W4bub1b =
     &  + ss1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1*CC1 * ( 8.D0*aINV**3*bb1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1 * ( 8.D0*aINV**3*bb1*tau - 2.D0*
     &    aINV**3*bb1**2*hm2**2*tau + 2.D0*aINV**3*bb1**2*hm1**2*tau - 
     &    40.D0*aINV**4*bb1**2 + 8.D0*aINV**4*bb1**3*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**3*hm1**2*tau + 8.D0*aINV**5*bb1**2*bb2**2*hm2**2
     &     + 16.D0*aINV**5*bb1**3*bb2*hm2**2 + 8.D0*aINV**5*bb1**4*
     &    hm1**2 )
      W4bub1b = W4bub1b + ss1**2*CC1*p2q * (  - 4.D0*aINV**3*bb1**2*tau
     &     - 8.D0*aINV**4*bb1**2*bb2*tau + 8.D0*aINV**4*bb1**3*tau + 16.
     &    D0*aINV**5*bb1**3*bb2 )

      W5bub1b =
     &  + ss1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm2**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1*CC1 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*
     &    hm2**2 + 2.D0*aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*
     &    aINV**3*bb1*bb2*hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub1b = W5bub1b + ss1*CC1*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV*hm2**2*qm**2
     &    *tau - 1.D0/8.D0*aINV*hm2**4*tau + 1.D0/2.D0*aINV*hm1**2*
     &    qm**2*tau + 1.D0/8.D0*aINV*hm1**2*hm2**2*tau - 6.D0*aINV**2*
     &    qm**2 - 3.D0/2.D0*aINV**2*hm2**2 - 1.D0/2.D0*aINV**2*hm2**2*
     &    tau + 1.D0/2.D0*aINV**2*hm1**2*tau + 2.D0*aINV**2*bb1*hm2**2*
     &    qm**2*tau + 1.D0/2.D0*aINV**2*bb1*hm2**4*tau - 2.D0*aINV**2*
     &    bb1*hm1**2*qm**2*tau - 1.D0/2.D0*aINV**2*bb1*hm1**2*hm2**2*
     &    tau - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*qm**2 + 1.D0/
     &    2.D0*aINV**3*bb2**2*hm2**4 + 1.D0/2.D0*aINV**3*bb2**2*hm2**4*
     &    tau - 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2*tau + 4.D0*
     &    aINV**3*bb1*hm2**2*tau - 4.D0*aINV**3*bb1*hm1**2*tau + 4.D0*
     &    aINV**3*bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm2**4 + 
     &    aINV**3*bb1*bb2*hm2**4*tau - aINV**3*bb1*bb2*hm1**2*hm2**2*
     &    tau + 2.D0*aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*
     &    bb1**2*hm1**2*hm2**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**2*hm2**2
     &    *tau )
      W5bub1b = W5bub1b + ss1**2*CC1 * (  - 1.D0/2.D0*aINV**3*bb1**2*
     &    hm1**4*tau + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*
     &    bb2*hm2**2 - 2.D0*aINV**4*bb1*bb2**2*hm2**4*tau + 2.D0*
     &    aINV**4*bb1*bb2**2*hm1**2*hm2**2*tau + 12.D0*aINV**4*bb1**2*
     &    hm1**2 - 4.D0*aINV**4*bb1**2*bb2*hm2**4*tau + 4.D0*aINV**4*
     &    bb1**2*bb2*hm1**2*hm2**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*
     &    hm2**2*tau + 2.D0*aINV**4*bb1**3*hm1**4*tau - 2.D0*aINV**5*
     &    bb2**4*hm2**4 - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5
     &    *bb1**2*bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5
     &    *bb1**4*hm1**4 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q * (  - aINV*qm**2*tau - 1.D0/4.
     &    D0*aINV*hm2**2*tau - aINV**2*tau - 2.D0*aINV**2*bb2*qm**2*tau
     &     - 1.D0/2.D0*aINV**2*bb2*hm2**2*tau + 2.D0*aINV**2*bb1*qm**2*
     &    tau + 1.D0/2.D0*aINV**2*bb1*hm2**2*tau - 4.D0*aINV**3*bb2*tau
     &     + aINV**3*bb2**2*hm2**2*tau + 4.D0*aINV**3*bb1*tau + 4.D0*
     &    aINV**3*bb1*bb2*qm**2 + aINV**3*bb1*bb2*hm2**2 + 3.D0*aINV**3
     &    *bb1*bb2*hm2**2*tau - aINV**3*bb1*bb2*hm1**2*tau + aINV**3*
     &    bb1**2*hm1**2*tau + 2.D0*aINV**4*bb2**3*hm2**2*tau + 24.D0*
     &    aINV**4*bb1*bb2 + 2.D0*aINV**4*bb1*bb2**2*hm2**2*tau - 8.D0*
     &    aINV**4*bb1**2*bb2*hm2**2*tau + 6.D0*aINV**4*bb1**2*bb2*
     &    hm1**2*tau - 2.D0*aINV**4*bb1**3*hm1**2*tau - 8.D0*aINV**5*
     &    bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 8.D0
     &    *aINV**5*bb1**3*bb2*hm1**2 )
      W5bub1b = W5bub1b + ss1**2*CC1*p2q**2 * ( 2.D0*aINV**3*bb1*bb2*
     &    tau + 4.D0*aINV**4*bb1*bb2**2*tau - 4.D0*aINV**4*bb1**2*bb2*
     &    tau - 8.D0*aINV**5*bb1**2*bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub1bW5_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W5bub1b
        
        return
        end

C---------------psi2-chiC2: bub2 --------------------------------
      
C------------  chiC2: matrix element bub2 W1  -----------------
      
	double precision function Fbub2W1_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub2W1_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub2W1_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W1_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub2W1_psi2schic2_rho=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W1_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub2W1_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)
                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub2 =
     &  + ss2 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*
     &    bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 
     &    16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q * ( 32.D0*aINV**6*bb1**3*bb2**3
     &     + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm1**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm1**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub2 = W2bub2 + ss2*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb1*bb2*qm**2 + 4.
     &    D0*aINV**3*bb1*bb2*hm1**2 + 16.D0*aINV**3*bb1**2*qm**2 + 4.D0
     &    *aINV**3*bb1**2*hm1**2 + 40.D0*aINV**4*bb1*bb2 - 4.D0*aINV**4
     &    *bb1*bb2**3*hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm1**2*hm2**2
     &     + 40.D0*aINV**4*bb1**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2*
     &    qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2*qm**2 - 4.D0*aINV**4*bb1**3*bb2*
     &    hm1**2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 - 
     &    aINV**4*bb1**3*bb2*hm1**4 - 4.D0*aINV**4*bb1**4*hm1**2*qm**2
     &     - aINV**4*bb1**4*hm1**4 - 32.D0*aINV**5*bb1*bb2**3*hm2**2 - 
     &    96.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 64.D0*aINV**5*bb1**3*bb2
     &    *hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 - 32.D0*aINV**5*
     &    bb1**4*hm1**2 + 4.D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 + 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2 - 
     &    64.D0*aINV**5*bb1**2*bb2**2 - 64.D0*aINV**5*bb1**3*bb2 + 16.D0
     &    *aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q**2 * ( 16.D0*aINV**6*bb1**3*
     &    bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub2 =
     &  + ss2 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2 * ( 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2*p2q * (  - 16.D0*aINV**5*bb1**2*
     &    bb2**2 )

      W4bub2 =
     &  + ss2 * ( 8.D0*aINV**3*bb1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * (  - 40.D0*aINV**4*bb1**2 + 8.D0*
     &    aINV**5*bb1**2*bb2**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 + 8.D0*aINV**5*bb1**4*hm1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * ( 16.D0*aINV**5*bb1**3*bb2 )

      W5bub2 =
     &  + ss2 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm1**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub2 = W5bub2 + ss2*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 6.D0*aINV**2*qm**2 - 3.D0/2.D
     &    0*aINV**2*hm1**2 - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*
     &    qm**2 + 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**3
     &    *bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm1**2*hm2**2 + 2.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**4
     &     + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*bb2*hm2**2
     &     + 12.D0*aINV**4*bb1**2*hm1**2 - 2.D0*aINV**5*bb2**4*hm2**4
     &     - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5*bb1**2*
     &    bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D
     &    0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5*bb1**4*
     &    hm1**4 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q * ( 4.D0*aINV**3*bb1*bb2*qm**2
     &     + aINV**3*bb1*bb2*hm1**2 + 24.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub2W1_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W1bub2
        
        return
        end
      
C------------  chiC2: matrix element bub2 W2  -----------------
      
	double precision function Fbub2W2_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub2W2_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub2W2_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W2_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub2W2_psi2schic2_rho=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W2_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub2W2_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub2 =
     &  + ss2 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*
     &    bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 
     &    16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q * ( 32.D0*aINV**6*bb1**3*bb2**3
     &     + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm1**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm1**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub2 = W2bub2 + ss2*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb1*bb2*qm**2 + 4.
     &    D0*aINV**3*bb1*bb2*hm1**2 + 16.D0*aINV**3*bb1**2*qm**2 + 4.D0
     &    *aINV**3*bb1**2*hm1**2 + 40.D0*aINV**4*bb1*bb2 - 4.D0*aINV**4
     &    *bb1*bb2**3*hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm1**2*hm2**2
     &     + 40.D0*aINV**4*bb1**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2*
     &    qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2*qm**2 - 4.D0*aINV**4*bb1**3*bb2*
     &    hm1**2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 - 
     &    aINV**4*bb1**3*bb2*hm1**4 - 4.D0*aINV**4*bb1**4*hm1**2*qm**2
     &     - aINV**4*bb1**4*hm1**4 - 32.D0*aINV**5*bb1*bb2**3*hm2**2 - 
     &    96.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 64.D0*aINV**5*bb1**3*bb2
     &    *hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 - 32.D0*aINV**5*
     &    bb1**4*hm1**2 + 4.D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 + 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2 - 
     &    64.D0*aINV**5*bb1**2*bb2**2 - 64.D0*aINV**5*bb1**3*bb2 + 16.D0
     &    *aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q**2 * ( 16.D0*aINV**6*bb1**3*
     &    bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub2 =
     &  + ss2 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2 * ( 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2*p2q * (  - 16.D0*aINV**5*bb1**2*
     &    bb2**2 )

      W4bub2 =
     &  + ss2 * ( 8.D0*aINV**3*bb1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * (  - 40.D0*aINV**4*bb1**2 + 8.D0*
     &    aINV**5*bb1**2*bb2**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 + 8.D0*aINV**5*bb1**4*hm1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * ( 16.D0*aINV**5*bb1**3*bb2 )

      W5bub2 =
     &  + ss2 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm1**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub2 = W5bub2 + ss2*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 6.D0*aINV**2*qm**2 - 3.D0/2.D
     &    0*aINV**2*hm1**2 - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*
     &    qm**2 + 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**3
     &    *bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm1**2*hm2**2 + 2.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**4
     &     + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*bb2*hm2**2
     &     + 12.D0*aINV**4*bb1**2*hm1**2 - 2.D0*aINV**5*bb2**4*hm2**4
     &     - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5*bb1**2*
     &    bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D
     &    0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5*bb1**4*
     &    hm1**4 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q * ( 4.D0*aINV**3*bb1*bb2*qm**2
     &     + aINV**3*bb1*bb2*hm1**2 + 24.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub2W2_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W2bub2
        
        return
        end
      
C------------  chiC2: matrix element bub2 W3  -----------------
      
	double precision function Fbub2W3_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub2W3_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub2W3_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W3_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub2W3_psi2schic2_rho=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W3_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub2W3_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       

        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub2 =
     &  + ss2 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*
     &    bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 
     &    16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q * ( 32.D0*aINV**6*bb1**3*bb2**3
     &     + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm1**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm1**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub2 = W2bub2 + ss2*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb1*bb2*qm**2 + 4.
     &    D0*aINV**3*bb1*bb2*hm1**2 + 16.D0*aINV**3*bb1**2*qm**2 + 4.D0
     &    *aINV**3*bb1**2*hm1**2 + 40.D0*aINV**4*bb1*bb2 - 4.D0*aINV**4
     &    *bb1*bb2**3*hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm1**2*hm2**2
     &     + 40.D0*aINV**4*bb1**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2*
     &    qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2*qm**2 - 4.D0*aINV**4*bb1**3*bb2*
     &    hm1**2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 - 
     &    aINV**4*bb1**3*bb2*hm1**4 - 4.D0*aINV**4*bb1**4*hm1**2*qm**2
     &     - aINV**4*bb1**4*hm1**4 - 32.D0*aINV**5*bb1*bb2**3*hm2**2 - 
     &    96.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 64.D0*aINV**5*bb1**3*bb2
     &    *hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 - 32.D0*aINV**5*
     &    bb1**4*hm1**2 + 4.D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 + 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2 - 
     &    64.D0*aINV**5*bb1**2*bb2**2 - 64.D0*aINV**5*bb1**3*bb2 + 16.D0
     &    *aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q**2 * ( 16.D0*aINV**6*bb1**3*
     &    bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub2 =
     &  + ss2 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2 * ( 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2*p2q * (  - 16.D0*aINV**5*bb1**2*
     &    bb2**2 )

      W4bub2 =
     &  + ss2 * ( 8.D0*aINV**3*bb1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * (  - 40.D0*aINV**4*bb1**2 + 8.D0*
     &    aINV**5*bb1**2*bb2**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 + 8.D0*aINV**5*bb1**4*hm1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * ( 16.D0*aINV**5*bb1**3*bb2 )

      W5bub2 =
     &  + ss2 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm1**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub2 = W5bub2 + ss2*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 6.D0*aINV**2*qm**2 - 3.D0/2.D
     &    0*aINV**2*hm1**2 - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*
     &    qm**2 + 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**3
     &    *bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm1**2*hm2**2 + 2.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**4
     &     + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*bb2*hm2**2
     &     + 12.D0*aINV**4*bb1**2*hm1**2 - 2.D0*aINV**5*bb2**4*hm2**4
     &     - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5*bb1**2*
     &    bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D
     &    0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5*bb1**4*
     &    hm1**4 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q * ( 4.D0*aINV**3*bb1*bb2*qm**2
     &     + aINV**3*bb1*bb2*hm1**2 + 24.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub2W3_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W3bub2
        
        return
        end
      
C------------  chiC2: matrix element bub2 W4  -----------------
      
	double precision function Fbub2W4_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub2W4_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub2W4_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W4_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub2W4_psi2schic2_rho=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W4_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub2W4_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       
     
        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub2 =
     &  + ss2 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*
     &    bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 
     &    16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q * ( 32.D0*aINV**6*bb1**3*bb2**3
     &     + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm1**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm1**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub2 = W2bub2 + ss2*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb1*bb2*qm**2 + 4.
     &    D0*aINV**3*bb1*bb2*hm1**2 + 16.D0*aINV**3*bb1**2*qm**2 + 4.D0
     &    *aINV**3*bb1**2*hm1**2 + 40.D0*aINV**4*bb1*bb2 - 4.D0*aINV**4
     &    *bb1*bb2**3*hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm1**2*hm2**2
     &     + 40.D0*aINV**4*bb1**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2*
     &    qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2*qm**2 - 4.D0*aINV**4*bb1**3*bb2*
     &    hm1**2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 - 
     &    aINV**4*bb1**3*bb2*hm1**4 - 4.D0*aINV**4*bb1**4*hm1**2*qm**2
     &     - aINV**4*bb1**4*hm1**4 - 32.D0*aINV**5*bb1*bb2**3*hm2**2 - 
     &    96.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 64.D0*aINV**5*bb1**3*bb2
     &    *hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 - 32.D0*aINV**5*
     &    bb1**4*hm1**2 + 4.D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 + 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2 - 
     &    64.D0*aINV**5*bb1**2*bb2**2 - 64.D0*aINV**5*bb1**3*bb2 + 16.D0
     &    *aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q**2 * ( 16.D0*aINV**6*bb1**3*
     &    bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub2 =
     &  + ss2 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2 * ( 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2*p2q * (  - 16.D0*aINV**5*bb1**2*
     &    bb2**2 )

      W4bub2 =
     &  + ss2 * ( 8.D0*aINV**3*bb1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * (  - 40.D0*aINV**4*bb1**2 + 8.D0*
     &    aINV**5*bb1**2*bb2**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 + 8.D0*aINV**5*bb1**4*hm1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * ( 16.D0*aINV**5*bb1**3*bb2 )

      W5bub2 =
     &  + ss2 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm1**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub2 = W5bub2 + ss2*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 6.D0*aINV**2*qm**2 - 3.D0/2.D
     &    0*aINV**2*hm1**2 - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*
     &    qm**2 + 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**3
     &    *bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm1**2*hm2**2 + 2.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**4
     &     + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*bb2*hm2**2
     &     + 12.D0*aINV**4*bb1**2*hm1**2 - 2.D0*aINV**5*bb2**4*hm2**4
     &     - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5*bb1**2*
     &    bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D
     &    0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5*bb1**4*
     &    hm1**4 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q * ( 4.D0*aINV**3*bb1*bb2*qm**2
     &     + aINV**3*bb1*bb2*hm1**2 + 24.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub2W4_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W4bub2
        
        return
        end
      
C------------  chiC2: matrix element bub2 W5  -----------------
      
	double precision function Fbub2W5_psi2schic2_rho(hm1,ss1,hm2,ss2,
     & qm,CC1)

	implicit real*8 (a-h,o-z)
        integer ndim,maxpts,minpts,lenwrk,ifail
      double precision a(3), b(3), acc, finval
      double precision, allocatable :: wrkstr(:)

	common/CFbub2W5_psi2schic2_rho/hhm1,sss1,hhm2,sss2,qqm,CCC1
        common/accuracy/eps
        
        external FFbub2W5_psi2schic2_rho

        maxpts=10000000
        minpts=0
        lenwrk=500000

      allocate(wrkstr(lenwrk), stat=ifail)
      if (ifail /= 0) then
          print *, '***Loi: Khong the cap phat bo nho cho wrkstr'
          return
      end if
        ifail=0

        ndim = 3

        hhm1=hm1
        sss1=ss1
        
        hhm2=hm2
        sss2=ss2
        
        qqm=qm
        CCC1=CC1
        
        do 20 k=1,3
           a(k)=0.d0
           b(k)=1.d0
  20     continue

        call d01fcf(ndim,a,b,minpts,maxpts,FFbub2W5_psi2schic2_rho,eps,acc,
     &              lenwrk,wrkstr,finval,ifail)

	Fbub2W5_psi2schic2_rho=finval
        
       return
      deallocate(wrkstr)
        end

C-------------------------------------------------------

        double precision function FFbub2W5_psi2schic2_rho(ndim,x)
	implicit double precision (a-h,o-z)
        integer ndim
        double precision x(3)

	common/CFbub2W5_psi2schic2_rho/hm1,ss1,hm2,ss2,qm,CC1
        common/confinement/conf,xlam, pi
       
        
        v= x(1)

           if(conf.eq.0.d0) then

           t = v/(1.d0-v)
           xmeasure = 1.d0/(1.d0-v)**2

           else

           t=v/xlam**2        
           xmeasure = 1.d0/xlam**2

           endif

           x1=x(2)

         alp1=1.d0-x1
         alp2=x1
            
         tau=x(3)

                    p2q = (hm1**2-hm2**2)/2.d0

      aa =
     &  + t * ( alp2 + alp1 )
      aa = aa + ss2 + ss1

      aINV = 1.d0/aa 

      bb1 =
     &  + t * (  - 1.D0/2.D0*alp2 + 1.D0/2.D0*alp1 )
      bb1 = bb1 + 1.D0/2.D0*ss2*tau

      bb2 =
     &  - 1.D0/2.D0*ss2*tau

      z =
     &  + t * (  - qm**2*alp2 - qm**2*alp1 )
      z = z + hm1**2*t * ( 1.D0/4.D0*alp2 + 1.D0/4.D0*alp1 )
      z = z + aINV*hm2**2*t * (  - 1.D0/4.D0*ss2*alp2*tau + 1.D0/4.D0*
     &    ss2*alp1*tau )
      z = z + aINV*hm1**2*t * ( 1.D0/4.D0*ss2*alp2*tau - 1.D0/4.D0*ss2*
     &    alp1*tau )
      z = z + aINV*hm1**2*t**2 * (  - 1.D0/4.D0*alp2**2 + 1.D0/2.D0*
     &    alp1*alp2 - 1.D0/4.D0*alp1**2 )



      W1bub2 =
     &  + ss2 * ( 16.D0*aINV**4*bb1**2*bb2**2 + 16.D0*aINV**4*bb1**3*
     &    bb2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2 * (  - 96.D0*aINV**5*bb1**2*bb2**2
     &     - 96.D0*aINV**5*bb1**3*bb2 + 16.D0*aINV**6*bb1**2*bb2**4*
     &    hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*hm2**2 + 32.D0*aINV**6*
     &    bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*bb1**4*bb2**2*hm1**2 + 
     &    16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W1bub2 = W1bub2 + ss1*CC1*ss2*p2q * ( 32.D0*aINV**6*bb1**3*bb2**3
     &     + 32.D0*aINV**6*bb1**4*bb2**2 )

      W2bub2 =
     &  + ss2 * (  - 4.D0*aINV**2*bb1*bb2*qm**2 - aINV**2*bb1*bb2*
     &    hm1**2 - 4.D0*aINV**2*bb1**2*qm**2 - aINV**2*bb1**2*hm1**2 - 
     &    8.D0*aINV**3*bb1*bb2 - 8.D0*aINV**3*bb1**2 + 4.D0*aINV**4*bb1
     &    *bb2**3*hm2**2 + 12.D0*aINV**4*bb1**2*bb2**2*hm2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2 + 4.D0*aINV**4*bb1**3*bb2*hm1**2 + 
     &    4.D0*aINV**4*bb1**4*hm1**2 )
      W2bub2 = W2bub2 + ss2*p2q * ( 8.D0*aINV**4*bb1**2*bb2**2 + 8.D0*
     &    aINV**4*bb1**3*bb2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 16.D0*aINV**3*bb1*bb2*qm**2 + 4.
     &    D0*aINV**3*bb1*bb2*hm1**2 + 16.D0*aINV**3*bb1**2*qm**2 + 4.D0
     &    *aINV**3*bb1**2*hm1**2 + 40.D0*aINV**4*bb1*bb2 - 4.D0*aINV**4
     &    *bb1*bb2**3*hm2**2*qm**2 - aINV**4*bb1*bb2**3*hm1**2*hm2**2
     &     + 40.D0*aINV**4*bb1**2 - 12.D0*aINV**4*bb1**2*bb2**2*hm2**2*
     &    qm**2 - 3.D0*aINV**4*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*hm2**2*qm**2 - 4.D0*aINV**4*bb1**3*bb2*
     &    hm1**2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2*hm2**2 - 
     &    aINV**4*bb1**3*bb2*hm1**4 - 4.D0*aINV**4*bb1**4*hm1**2*qm**2
     &     - aINV**4*bb1**4*hm1**4 - 32.D0*aINV**5*bb1*bb2**3*hm2**2 - 
     &    96.D0*aINV**5*bb1**2*bb2**2*hm2**2 - 64.D0*aINV**5*bb1**3*bb2
     &    *hm2**2 - 32.D0*aINV**5*bb1**3*bb2*hm1**2 - 32.D0*aINV**5*
     &    bb1**4*hm1**2 + 4.D0*aINV**6*bb1*bb2**5*hm2**4 + 20.D0*
     &    aINV**6*bb1**2*bb2**4*hm2**4 + 32.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**4 + 8.D0*aINV**6*bb1**3*bb2**3*hm1**2*hm2**2 + 16.D0*
     &    aINV**6*bb1**4*bb2**2*hm2**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2 * ( 24.D0*aINV**6*bb1**4*bb2**2*
     &    hm1**2*hm2**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2*hm2**2 + 4.D0
     &    *aINV**6*bb1**5*bb2*hm1**4 + 4.D0*aINV**6*bb1**6*hm1**4 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q * (  - 8.D0*aINV**4*bb1**2*
     &    bb2**2*qm**2 - 2.D0*aINV**4*bb1**2*bb2**2*hm1**2 - 8.D0*
     &    aINV**4*bb1**3*bb2*qm**2 - 2.D0*aINV**4*bb1**3*bb2*hm1**2 - 
     &    64.D0*aINV**5*bb1**2*bb2**2 - 64.D0*aINV**5*bb1**3*bb2 + 16.D0
     &    *aINV**6*bb1**2*bb2**4*hm2**2 + 48.D0*aINV**6*bb1**3*bb2**3*
     &    hm2**2 + 32.D0*aINV**6*bb1**4*bb2**2*hm2**2 + 16.D0*aINV**6*
     &    bb1**4*bb2**2*hm1**2 + 16.D0*aINV**6*bb1**5*bb2*hm1**2 )
      W2bub2 = W2bub2 + ss1*CC1*ss2*p2q**2 * ( 16.D0*aINV**6*bb1**3*
     &    bb2**3 + 16.D0*aINV**6*bb1**4*bb2**2 )

      W3bub2 =
     &  + ss2 * (  - 8.D0*aINV**3*bb1*bb2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2 * ( 40.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W3bub2 = W3bub2 + ss1*CC1*ss2*p2q * (  - 16.D0*aINV**5*bb1**2*
     &    bb2**2 )

      W4bub2 =
     &  + ss2 * ( 8.D0*aINV**3*bb1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2 * (  - 40.D0*aINV**4*bb1**2 + 8.D0*
     &    aINV**5*bb1**2*bb2**2*hm2**2 + 16.D0*aINV**5*bb1**3*bb2*
     &    hm2**2 + 8.D0*aINV**5*bb1**4*hm1**2 )
      W4bub2 = W4bub2 + ss1*CC1*ss2*p2q * ( 16.D0*aINV**5*bb1**3*bb2 )

      W5bub2 =
     &  + ss2 * ( 2.D0*aINV*qm**2 + 1.D0/2.D0*aINV*hm1**2 + 2.D0*
     &    aINV**2 - 2.D0*aINV**3*bb2**2*hm2**2 - 4.D0*aINV**3*bb1*bb2*
     &    hm2**2 - 2.D0*aINV**3*bb1**2*hm1**2 )
      W5bub2 = W5bub2 + ss2*p2q * (  - 4.D0*aINV**3*bb1*bb2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2 * (  - 6.D0*aINV**2*qm**2 - 3.D0/2.D
     &    0*aINV**2*hm1**2 - 8.D0*aINV**3 + 2.D0*aINV**3*bb2**2*hm2**2*
     &    qm**2 + 1.D0/2.D0*aINV**3*bb2**2*hm1**2*hm2**2 + 4.D0*aINV**3
     &    *bb1*bb2*hm2**2*qm**2 + aINV**3*bb1*bb2*hm1**2*hm2**2 + 2.D0*
     &    aINV**3*bb1**2*hm1**2*qm**2 + 1.D0/2.D0*aINV**3*bb1**2*hm1**4
     &     + 12.D0*aINV**4*bb2**2*hm2**2 + 24.D0*aINV**4*bb1*bb2*hm2**2
     &     + 12.D0*aINV**4*bb1**2*hm1**2 - 2.D0*aINV**5*bb2**4*hm2**4
     &     - 8.D0*aINV**5*bb1*bb2**3*hm2**4 - 8.D0*aINV**5*bb1**2*
     &    bb2**2*hm2**4 - 4.D0*aINV**5*bb1**2*bb2**2*hm1**2*hm2**2 - 8.D
     &    0*aINV**5*bb1**3*bb2*hm1**2*hm2**2 - 2.D0*aINV**5*bb1**4*
     &    hm1**4 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q * ( 4.D0*aINV**3*bb1*bb2*qm**2
     &     + aINV**3*bb1*bb2*hm1**2 + 24.D0*aINV**4*bb1*bb2 - 8.D0*
     &    aINV**5*bb1*bb2**3*hm2**2 - 16.D0*aINV**5*bb1**2*bb2**2*
     &    hm2**2 - 8.D0*aINV**5*bb1**3*bb2*hm1**2 )
      W5bub2 = W5bub2 + ss1*CC1*ss2*p2q**2 * (  - 8.D0*aINV**5*bb1**2*
     &    bb2**2 )


           
       floop1 = 1.d0/(4.d0*pi)**2
       Dsimplex2 = t
 
       FFbub2W5_psi2schic2_rho = floop1*xmeasure*aINV**2*Dsimplex2*dexp(z)
     &       *W5bub2
        
        return
        end
